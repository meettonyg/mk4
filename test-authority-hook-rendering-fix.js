/**
 * Comprehensive Authority Hook Rendering Fix Test
 * 
 * Tests the complete fix for authority-hook component rendering issues.
 * Run this in browser console after clearing cache.
 */

(async function testAuthorityHookRenderingFix() {
    console.log('üîß Testing Authority Hook Rendering Fix...');
    console.log('==========================================');
    
    let testsPassed = 0;
    let totalTests = 0;
    const testResults = [];
    
    function addTest(name, passed, details = null) {
        totalTests++;
        if (passed) testsPassed++;
        
        const status = passed ? '‚úÖ PASS' : '‚ùå FAIL';
        const result = { name, passed, details, timestamp: Date.now() };
        testResults.push(result);
        
        console.log(`${status} ${name}`);
        if (details && !passed) {
            console.log('   Details:', details);
        } else if (details && passed) {
            console.log('   ‚úì', details);
        }
    }
    
    // Test 1: Verify dynamic component loader is available
    const hasLoader = !!window.dynamicComponentLoader;
    addTest(
        'Dynamic Component Loader Available',
        hasLoader,
        hasLoader ? 'Component loader found' : 'Component loader missing'
    );
    
    if (!hasLoader) {
        console.log('‚ùå Cannot continue tests without component loader');
        return;
    }\n    \n    // Test 2: Test template fetching\n    try {\n        console.log('üîÑ Fetching authority-hook template...');\n        const template = await window.dynamicComponentLoader.getTemplate('authority-hook');\n        \n        const hasTemplate = template && template.length > 0;\n        const templateAnalysis = {\n            hasContent: hasTemplate,\n            length: template ? template.length : 0,\n            isClean: hasTemplate && !template.includes('<?php echo esc_attr($componentId'),\n            hasRequiredElements: hasTemplate && template.includes('data-element=\"authority-hook\"'),\n            hasEditableContent: hasTemplate && template.includes('contenteditable=\"true\"'),\n            sample: hasTemplate ? template.substring(0, 100) + '...' : 'No template'\n        };\n        \n        addTest(\n            'Template Fetch Successful',\n            hasTemplate,\n            templateAnalysis\n        );\n        \n        addTest(\n            'Template Structure Valid',\n            templateAnalysis.isClean && templateAnalysis.hasRequiredElements,\n            {\n                isClean: templateAnalysis.isClean,\n                hasRequiredElements: templateAnalysis.hasRequiredElements,\n                hasEditableContent: templateAnalysis.hasEditableContent\n            }\n        );\n        \n    } catch (error) {\n        addTest(\n            'Template Fetch Successful',\n            false,\n            `Template fetch error: ${error.message}`\n        );\n    }\n    \n    // Test 3: Test component rendering\n    try {\n        console.log('üîÑ Testing component rendering...');\n        const testId = 'test-authority-hook-' + Date.now();\n        \n        const element = await window.dynamicComponentLoader.renderComponent({\n            type: 'authority-hook',\n            id: testId,\n            props: {\n                title: 'Test Authority Hook',\n                who: 'Test Audience',\n                what: 'Test Expertise',\n                when: 'Test Timing',\n                how: 'Test Method'\n            }\n        });\n        \n        const renderSuccess = element && element.tagName;\n        const elementAnalysis = {\n            hasElement: !!element,\n            hasCorrectId: element ? element.id === testId : false,\n            hasCorrectClasses: element ? element.className.includes('authority-hook') : false,\n            hasControls: element ? !!element.querySelector('.element-controls') : false,\n            hasEditableElements: element ? element.querySelectorAll('[contenteditable=\"true\"]').length > 0 : false,\n            controlButtonCount: element ? element.querySelectorAll('.control-btn').length : 0\n        };\n        \n        addTest(\n            'Component Rendering Successful',\n            renderSuccess,\n            elementAnalysis\n        );\n        \n        // Test 4: Verify rendered component structure\n        if (element) {\n            const structureValid = \n                element.querySelector('.section-title') &&\n                element.querySelector('.authority-hook-container') &&\n                element.querySelectorAll('.authority-item').length >= 3;\n                \n            addTest(\n                'Rendered Component Structure Valid',\n                structureValid,\n                {\n                    hasTitle: !!element.querySelector('.section-title'),\n                    hasContainer: !!element.querySelector('.authority-hook-container'),\n                    authorityItemCount: element.querySelectorAll('.authority-item').length\n                }\n            );\n            \n            // Test 5: Test component controls\n            const controlButtons = element.querySelectorAll('.control-btn');\n            const hasAllControls = controlButtons.length === 4; // Move Up, Move Down, Duplicate, Delete\n            \n            addTest(\n                'Component Controls Present',\n                hasAllControls,\n                {\n                    controlButtonCount: controlButtons.length,\n                    expectedCount: 4,\n                    buttonTitles: Array.from(controlButtons).map(btn => btn.title)\n                }\n            );\n            \n            // Clean up test element\n            if (element.parentNode) {\n                element.parentNode.removeChild(element);\n            } else {\n                // Add to body temporarily to test, then remove\n                document.body.appendChild(element);\n                setTimeout(() => {\n                    if (element.parentNode) {\n                        element.parentNode.removeChild(element);\n                    }\n                }, 100);\n            }\n        }\n        \n    } catch (error) {\n        addTest(\n            'Component Rendering Successful',\n            false,\n            `Rendering error: ${error.message}`\n        );\n    }\n    \n    // Test 6: Check fallback template availability\n    try {\n        const hasFallback = window.dynamicComponentLoader.fallbackTemplates && \n                           window.dynamicComponentLoader.fallbackTemplates.has('authority-hook');\n        \n        addTest(\n            'Fallback Template Available',\n            hasFallback,\n            hasFallback ? 'Fallback template found in loader' : 'No fallback template'\n        );\n    } catch (error) {\n        addTest(\n            'Fallback Template Available',\n            false,\n            `Error checking fallback: ${error.message}`\n        );\n    }\n    \n    // Test 7: Monitor for console errors during test\n    const originalError = console.error;\n    const capturedErrors = [];\n    \n    console.error = function(...args) {\n        capturedErrors.push({ timestamp: Date.now(), args });\n        originalError.apply(console, args);\n    };\n    \n    // Wait for any delayed errors\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    console.error = originalError;\n    \n    const hasNoNewErrors = capturedErrors.length === 0;\n    addTest(\n        'No Console Errors During Test',\n        hasNoNewErrors,\n        hasNoNewErrors ? 'Clean execution' : {\n            errorCount: capturedErrors.length,\n            errors: capturedErrors.slice(0, 2)\n        }\n    );\n    \n    // Calculate results\n    const successRate = (testsPassed / totalTests) * 100;\n    \n    console.log('\\n==========================================');\n    console.log('üìä AUTHORITY HOOK RENDERING FIX RESULTS');\n    console.log('==========================================');\n    console.log(`Success Rate: ${successRate.toFixed(1)}% (${testsPassed}/${totalTests})`);\n    \n    const overallStatus = successRate >= 95 ? 'üéâ EXCELLENT' : \n                         successRate >= 80 ? '‚úÖ GOOD' : \n                         successRate >= 60 ? '‚ö†Ô∏è FAIR' : '‚ùå POOR';\n    \n    console.log(`Overall Status: ${overallStatus}`);\n    \n    // Recommendations\n    console.log('\\nüí° RECOMMENDATIONS:');\n    if (successRate >= 95) {\n        console.log('‚úÖ Authority hook rendering fix is working perfectly!');\n        console.log('üß™ Try adding an authority-hook component via the component library.');\n        console.log('üìä Monitor console for any remaining errors.');\n    } else if (successRate >= 80) {\n        console.log('üëç Authority hook rendering is mostly working.');\n        console.log('üîç Check failed tests above for remaining issues.');\n        console.log('üîÑ Clear browser cache and try again if issues persist.');\n    } else {\n        console.log('üîß Authority hook rendering still has significant issues.');\n        console.log('üìù Review template syntax and PHP variable handling.');\n        console.log('üîç Check server logs for any PHP errors.');\n        console.log('üîÑ Verify all files were saved correctly.');\n    }\n    \n    // Global results\n    window.authorityHookRenderingTestResults = {\n        successRate,\n        testsPassed,\n        totalTests,\n        overallStatus: overallStatus.replace(/[^A-Z]/g, ''), // Clean status\n        detailedResults: testResults,\n        timestamp: new Date().toISOString()\n    };\n    \n    console.log('\\nüîç Detailed results: window.authorityHookRenderingTestResults');\n    console.log('==========================================');\n    \n})().catch(error => {\n    console.error('‚ùå Authority hook rendering test failed:', error);\n});\n