/**
 * WordPress Save Service for Media Kit Builder
 * Provides a reliable save interface for both Vue bundle and standard architecture
 * Handles all WordPress AJAX communication for saving media kits
 */

(function() {
    'use strict';
    
    // Create namespace
    window.GMKB = window.GMKB || {};
    
    /**
     * Save Service Class
     */
    class SaveService {
        constructor() {
            this.saving = false;
            this.lastSaveTime = null;
            this.saveQueue = [];
            this.autoSaveInterval = null;
            this.autoSaveEnabled = true;
            this.autoSaveDelay = 30000; // 30 seconds
            
            this.init();
        }
        
        /**
         * Initialize the save service
         */
        init() {
            // Ensure gmkbData exists
            if (typeof gmkbData === 'undefined') {
                console.error('SaveService: gmkbData not available');
                return;
            }
            
            // Get post ID from various sources
            this.postId = this.getPostId();
            
            if (!this.postId) {
                console.error('SaveService: No post ID available');
                return;
            }
            
            // Set up auto-save if enabled
            if (this.autoSaveEnabled) {
                this.startAutoSave();
            }
            
            // Listen for save events
            document.addEventListener('gmkb:save-requested', (e) => {
                this.save(e.detail);
            });
            
            console.log('✅ SaveService initialized with post ID:', this.postId);
        }
        
        /**
         * Get post ID from various sources
         */
        getPostId() {
            // Priority 1: gmkbData
            if (gmkbData.postId) return gmkbData.postId;
            if (gmkbData.post_id) return gmkbData.post_id;
            if (gmkbData.mkcg_id) return gmkbData.mkcg_id;
            
            // Priority 2: URL parameters
            const urlParams = new URLSearchParams(window.location.search);
            const mkcgId = urlParams.get('mkcg_id');
            if (mkcgId) {
                // Update gmkbData for consistency
                gmkbData.postId = parseInt(mkcgId);
                gmkbData.post_id = parseInt(mkcgId);
                return parseInt(mkcgId);
            }
            
            const postId = urlParams.get('post_id');
            if (postId) {
                gmkbData.postId = parseInt(postId);
                gmkbData.post_id = parseInt(postId);
                return parseInt(postId);
            }
            
            return null;
        }
        
        /**
         * Get current state from various sources
         */
        getState() {
            let state = null;
            
            // Try Vue/Pinia store (lean bundle)
            if (window.vueApp && window.vueApp.$pinia) {
                try {
                    const store = window.vueApp.$pinia._s.get('main');
                    if (store) {
                        state = {
                            components: store.components || {},
                            layout: store.layout || [],
                            sections: store.sections || [],
                            theme: store.theme || 'default',
                            themeSettings: store.themeSettings || [],
                            globalSettings: store.globalSettings || {}
                        };
                    }
                } catch (e) {
                    console.error('SaveService: Failed to get Vue state:', e);
                }
            }
            
            // Try standard state manager
            if (!state && window.enhancedStateManager) {
                try {
                    state = window.enhancedStateManager.getState();
                } catch (e) {
                    console.error('SaveService: Failed to get standard state:', e);
                }
            }
            
            // Try localStorage as fallback
            if (!state) {
                try {
                    const stored = localStorage.getItem('gmkb_state');
                    if (stored) {
                        state = JSON.parse(stored);
                    }
                } catch (e) {
                    console.error('SaveService: Failed to get localStorage state:', e);
                }
            }
            
            return state;
        }
        
        /**
         * Save media kit to WordPress
         */
        async save(stateOverride = null) {
            if (this.saving) {
                console.log('SaveService: Save already in progress, queueing...');
                this.saveQueue.push(stateOverride);
                return;
            }
            
            this.saving = true;
            
            try {
                // Get state
                const state = stateOverride || this.getState();
                
                if (!state) {
                    throw new Error('No state to save');
                }
                
                if (!this.postId) {
                    throw new Error('No post ID for save');
                }
                
                // Prepare form data
                const formData = new FormData();
                formData.append('action', 'gmkb_save_media_kit');
                formData.append('nonce', gmkbData.nonce || '');
                formData.append('post_id', this.postId);
                formData.append('state', JSON.stringify(state));
                
                // Log save attempt
                console.log('💾 SaveService: Saving to post ID:', this.postId);
                console.log('   Components:', Object.keys(state.components || {}).length);
                console.log('   Theme:', state.theme);
                
                // Make AJAX request
                const response = await fetch(gmkbData.ajaxUrl, {
                    method: 'POST',
                    credentials: 'same-origin',
                    body: formData
                });
                
                const text = await response.text();
                let data;
                
                try {
                    data = JSON.parse(text);
                } catch (e) {
                    console.error('SaveService: Invalid response:', text);
                    throw new Error('Server returned invalid response');
                }
                
                if (!data.success) {
                    throw new Error(data.data || 'Save failed');
                }
                
                // Success!
                this.lastSaveTime = Date.now();
                console.log('✅ SaveService: Save successful', data.data);
                
                // Dispatch success event
                const event = new CustomEvent('gmkb:save-success', {
                    detail: { 
                        postId: this.postId,
                        response: data.data,
                        timestamp: this.lastSaveTime
                    }
                });
                document.dispatchEvent(event);
                
                // Show success message
                this.showSuccess('Media kit saved successfully!');
                
                return data.data;
                
            } catch (error) {
                console.error('❌ SaveService: Save failed:', error);
                
                // Dispatch error event
                const event = new CustomEvent('gmkb:save-error', {
                    detail: { 
                        error: error.message,
                        postId: this.postId
                    }
                });
                document.dispatchEvent(event);
                
                // Show error message
                this.showError('Save failed: ' + error.message);
                
                throw error;
                
            } finally {
                this.saving = false;
                
                // Process queue if any
                if (this.saveQueue.length > 0) {
                    const nextState = this.saveQueue.shift();
                    setTimeout(() => this.save(nextState), 100);
                }
            }
        }
        
        /**
         * Start auto-save
         */
        startAutoSave() {
            if (this.autoSaveInterval) {
                return;
            }
            
            this.autoSaveInterval = setInterval(() => {
                this.autoSave();
            }, this.autoSaveDelay);
            
            console.log('✅ SaveService: Auto-save enabled (every', this.autoSaveDelay / 1000, 'seconds)');
        }
        
        /**
         * Stop auto-save
         */
        stopAutoSave() {
            if (this.autoSaveInterval) {
                clearInterval(this.autoSaveInterval);
                this.autoSaveInterval = null;
                console.log('SaveService: Auto-save disabled');
            }
        }
        
        /**
         * Perform auto-save
         */
        async autoSave() {
            try {
                await this.save();
                console.log('✅ SaveService: Auto-save completed');
            } catch (error) {
                console.warn('SaveService: Auto-save failed:', error.message);
            }
        }
        
        /**
         * Show success message
         */
        showSuccess(message) {
            // Try Vue toast
            if (window.vueApp && window.vueApp.$toast) {
                window.vueApp.$toast.success(message);
                return;
            }
            
            // Try standard toast
            if (window.showToast) {
                window.showToast(message, 'success');
                return;
            }
            
            // Fallback to console
            console.log('✅', message);
        }
        
        /**
         * Show error message
         */
        showError(message) {
            // Try Vue toast
            if (window.vueApp && window.vueApp.$toast) {
                window.vueApp.$toast.error(message);
                return;
            }
            
            // Try standard toast
            if (window.showToast) {
                window.showToast(message, 'error');
                return;
            }
            
            // Fallback to alert
            alert(message);
        }
    }
    
    // Create and expose global instance
    window.GMKB.SaveService = new SaveService();
    
    // Also expose main save method globally for easy access
    window.saveMediaKit = function(state) {
        return window.GMKB.SaveService.save(state);
    };
    
    // Override Vue app save if it exists
    if (window.vueApp) {
        // Wait a bit for Vue to fully initialize
        setTimeout(() => {
            if (window.vueApp.$pinia) {
                const store = window.vueApp.$pinia._s.get('main');
                if (store) {
                    // Override the broken save method
                    store.save = store.saveToWordPress = async function() {
                        console.log('SaveService: Intercepting Vue save');
                        
                        // Get state from store
                        const state = {
                            components: store.components || {},
                            layout: store.layout || [],
                            sections: store.sections || [],
                            theme: store.theme || 'default',
                            themeSettings: store.themeSettings || [],
                            globalSettings: store.globalSettings || {}
                        };
                        
                        // Use our reliable save service
                        return window.GMKB.SaveService.save(state);
                    };
                    
                    console.log('✅ SaveService: Patched Vue save method');
                }
            }
        }, 1000);
    }
    
    console.log('✅ SaveService ready - use saveMediaKit() to save');
    
})();