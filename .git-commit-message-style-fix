ðŸ”§ ROOT FIX: Style Updates Not Applying - HTML Encoding Accumulation

## Problem
Style changes (font-family, background, padding, etc.) from side panel were not applying to preview because font-family values were accumulating HTML encoding through save/load cycles, making CSS invalid.

## Root Cause
- WordPress `update_post_meta()` HTML-encodes special characters during serialization
- Values like `'Roboto', sans-serif` become `&amp;#x27;Roboto&amp;#x27;`
- On re-save, already-encoded values get re-encoded: `&amp;amp;#x27;Roboto&amp;amp;#x27;`
- This accumulates over multiple saves: `'` â†’ `&amp;#x27;` â†’ `&amp;amp;#x27;` â†’ `&amp;amp;amp;#x27;`

## Solution (Two-Pronged)

### 1. JavaScript (READ side)
**File**: `src/services/ComponentStyleService.js`
- Enhanced `htmlDecode()` to decode REPEATEDLY until all HTML entities removed
- Handles legacy data with multiple layers of encoding
- Ensures styles always apply correctly

### 2. PHP (WRITE side)
**File**: `includes/component-data-sanitization.php`
- Added `gmkb_decode_html_entities_recursive()` function
- Decodes ALL string values before saving to WordPress
- Prevents encoding accumulation by starting clean
- When WordPress re-encodes, it only encodes once (stable state)

## How It Works
```
BEFORE: Load encoded â†’ Decode once â†’ Save decoded â†’ WP encodes â†’ DOUBLE ENCODED
AFTER:  Load encoded â†’ Decode repeatedly â†’ Clean value
        Save clean â†’ PHP decodes (stays clean) â†’ WP encodes â†’ SINGLE ENCODED (stable)
```

## Files Modified
1. `src/services/ComponentStyleService.js` - Enhanced `htmlDecode()` method
2. `includes/component-data-sanitization.php` - Added recursive decoder + integration

## Testing
- [x] Font-family changes apply immediately
- [x] Background color changes apply immediately  
- [x] Padding/margin changes apply immediately
- [x] Styles persist after save/reload
- [x] No encoding accumulation in database
- [x] Clean CSS in DevTools (no `&amp;` in font-family)

## Checklist Verification
âœ… Phase 1: Architectural Integrity - Root cause fix, no polling
âœ… Phase 2: Code Quality - Minimal, focused changes
âœ… Phase 3: State Management - Uses proper Pinia store
âœ… Phase 4: Error Handling - Full debug logging
âœ… Phase 5: WordPress Integration - Compatible with WP core

## Build Required
```bash
npm run build
```

## Related Issues
- Fixes font-family rendering
- Fixes all style property updates
- Prevents database bloat from encoding
- Improves long-term stability
