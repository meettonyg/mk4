/**
 * SAVED COMPONENTS DIAGNOSTIC SCRIPT
 * Run this in browser console after page load to diagnose the saved components issue
 */

(function() {
    'use strict';
    
    console.log('%c🔧 SAVED COMPONENTS DIAGNOSTIC STARTING...', 'background: #dc2626; color: white; padding: 4px 8px; border-radius: 4px; font-weight: bold;');
    
    const diagnostics = {
        startTime: Date.now(),
        issues: [],
        findings: [],
        recommendations: []
    };
    
    // Check 1: State Manager
    console.log('%c📊 Checking State Manager...', 'color: #2563eb; font-weight: bold;');
    if (window.enhancedStateManager) {
        const state = window.enhancedStateManager.getState();
        const componentCount = Object.keys(state.components || {}).length;
        const layoutLength = (state.layout || []).length;
        
        console.log('✅ State Manager: Available');
        console.log(`📊 Components in state: ${componentCount}`);
        console.log(`📋 Layout items: ${layoutLength}`);
        console.log('🔍 State details:', state);
        
        if (componentCount > 0) {
            diagnostics.findings.push(`✅ Found ${componentCount} saved components in state`);
            console.log('📝 Component IDs:', Object.keys(state.components));
            console.log('📝 Layout order:', state.layout);
        } else {
            diagnostics.issues.push('❌ No components found in saved state');
        }
    } else {\n        diagnostics.issues.push('❌ Enhanced State Manager not available');\n        console.log('❌ State Manager: NOT AVAILABLE');\n    }\n    \n    // Check 2: Component Renderer\n    console.log('%c🎨 Checking Component Renderer...', 'color: #2563eb; font-weight: bold;');\n    if (window.enhancedComponentRenderer) {\n        console.log('✅ Component Renderer: Available');\n        \n        const rendererStats = window.enhancedComponentRenderer.getStats();\n        console.log('📊 Renderer stats:', rendererStats);\n        \n        if (rendererStats.initialized) {\n            diagnostics.findings.push('✅ Component renderer is initialized');\n        } else {\n            diagnostics.issues.push('❌ Component renderer not initialized');\n            diagnostics.recommendations.push('💡 Try: window.enhancedComponentRenderer.init()');\n        }\n    } else {\n        diagnostics.issues.push('❌ Enhanced Component Renderer not available');\n        console.log('❌ Component Renderer: NOT AVAILABLE');\n        diagnostics.recommendations.push('💡 Component renderer script not loaded - check enqueue.php');\n    }\n    \n    // Check 3: Dynamic Component Loader\n    console.log('%c🔄 Checking Dynamic Component Loader...', 'color: #2563eb; font-weight: bold;');\n    if (window.dynamicComponentLoader) {\n        console.log('✅ Dynamic Component Loader: Available');\n        diagnostics.findings.push('✅ Dynamic component loader available');\n        \n        const loaderStats = window.dynamicComponentLoader.getStats();\n        console.log('📊 Loader stats:', loaderStats);\n    } else {\n        diagnostics.issues.push('❌ Dynamic Component Loader not available');\n        console.log('❌ Dynamic Component Loader: NOT AVAILABLE');\n        diagnostics.recommendations.push('💡 Dynamic loader script not loaded - components will show as placeholders');\n    }\n    \n    // Check 4: Preview Container\n    console.log('%c📺 Checking Preview Container...', 'color: #2563eb; font-weight: bold;');\n    const previewContainer = document.getElementById('media-kit-preview');\n    if (previewContainer) {\n        console.log('✅ Preview Container: Found');\n        const childCount = previewContainer.children.length;\n        console.log(`📊 Preview container children: ${childCount}`);\n        \n        if (childCount > 0) {\n            diagnostics.findings.push(`✅ Preview container has ${childCount} child elements`);\n            console.log('🔍 Preview container contents:');\n            Array.from(previewContainer.children).forEach((child, index) => {\n                console.log(`  ${index + 1}. <${child.tagName.toLowerCase()}> id=\"${child.id}\" class=\"${child.className}\"`);\n                if (child.textContent.includes('Component loading')) {\n                    console.log('    ⚠️ Shows \"Component loading...\" - dynamic loader issue');\n                }\n            });\n        } else {\n            diagnostics.issues.push('❌ Preview container is empty despite saved components');\n        }\n    } else {\n        diagnostics.issues.push('❌ Preview container not found');\n        console.log('❌ Preview Container: NOT FOUND');\n    }\n    \n    // Check 5: Empty State\n    console.log('%c🏳️ Checking Empty State...', 'color: #2563eb; font-weight: bold;');\n    const emptyState = document.getElementById('empty-state');\n    if (emptyState) {\n        const isVisible = emptyState.style.display !== 'none' && \n                         getComputedStyle(emptyState).display !== 'none';\n        console.log(`📊 Empty state visible: ${isVisible}`);\n        \n        if (isVisible) {\n            diagnostics.issues.push('❌ Empty state is visible despite saved components');\n            diagnostics.recommendations.push('💡 Empty state should be hidden when components exist');\n        } else {\n            diagnostics.findings.push('✅ Empty state is properly hidden');\n        }\n    }\n    \n    // Check 6: Manual Render Test\n    console.log('%c🧪 Testing Manual Render...', 'color: #2563eb; font-weight: bold;');\n    if (window.enhancedComponentRenderer && window.enhancedComponentRenderer.render) {\n        try {\n            console.log('🔄 Attempting manual render...');\n            window.enhancedComponentRenderer.render().then(success => {\n                if (success) {\n                    console.log('✅ Manual render succeeded');\n                    diagnostics.findings.push('✅ Manual render test passed');\n                } else {\n                    console.log('❌ Manual render failed');\n                    diagnostics.issues.push('❌ Manual render test failed');\n                }\n            }).catch(error => {\n                console.log('❌ Manual render error:', error);\n                diagnostics.issues.push(`❌ Manual render error: ${error.message}`);\n            });\n        } catch (error) {\n            console.log('❌ Manual render exception:', error);\n            diagnostics.issues.push(`❌ Manual render exception: ${error.message}`);\n        }\n    }\n    \n    // Final Report\n    setTimeout(() => {\n        console.log('%c🔧 SAVED COMPONENTS DIAGNOSTIC COMPLETE', 'background: #059669; color: white; padding: 4px 8px; border-radius: 4px; font-weight: bold;');\n        console.log(`⏱️ Duration: ${Date.now() - diagnostics.startTime}ms`);\n        \n        if (diagnostics.findings.length > 0) {\n            console.log('%c✅ FINDINGS:', 'color: #059669; font-weight: bold;');\n            diagnostics.findings.forEach(finding => console.log(finding));\n        }\n        \n        if (diagnostics.issues.length > 0) {\n            console.log('%c❌ ISSUES:', 'color: #dc2626; font-weight: bold;');\n            diagnostics.issues.forEach(issue => console.log(issue));\n        }\n        \n        if (diagnostics.recommendations.length > 0) {\n            console.log('%c💡 RECOMMENDATIONS:', 'color: #d97706; font-weight: bold;');\n            diagnostics.recommendations.forEach(rec => console.log(rec));\n        }\n        \n        // Root Cause Analysis\n        console.log('%c🎯 ROOT CAUSE ANALYSIS:', 'color: #7c3aed; font-weight: bold;');\n        \n        if (diagnostics.issues.includes('❌ Enhanced Component Renderer not available')) {\n            console.log('🔍 LIKELY CAUSE: Component renderer script not loaded');\n            console.log('🔧 SOLUTION: Add enhanced-component-renderer.js to enqueue.php');\n        } else if (diagnostics.issues.includes('❌ Component renderer not initialized')) {\n            console.log('🔍 LIKELY CAUSE: Renderer loaded but not initialized');\n            console.log('🔧 SOLUTION: Call window.enhancedComponentRenderer.init() in main.js');\n        } else if (diagnostics.issues.includes('❌ Dynamic Component Loader not available')) {\n            console.log('🔍 LIKELY CAUSE: Dynamic loader script not loaded or ES6 import issues');\n            console.log('🔧 SOLUTION: Add dynamic-component-loader.js with module support');\n        } else if (diagnostics.issues.includes('❌ Preview container is empty despite saved components')) {\n            console.log('🔍 LIKELY CAUSE: Renderer not subscribing to state changes');\n            console.log('🔧 SOLUTION: Check state manager subscription in renderer.init()');\n        } else if (diagnostics.issues.length === 0) {\n            console.log('🎉 NO CRITICAL ISSUES FOUND - Components should be displaying');\n        }\n        \n        return {\n            issues: diagnostics.issues,\n            findings: diagnostics.findings,\n            recommendations: diagnostics.recommendations,\n            duration: Date.now() - diagnostics.startTime\n        };\n        \n    }, 1000); // Wait 1 second for manual render test\n    \n})();\n\nconsole.log('🔧 Diagnostic script loaded. Results will appear in 1 second...');