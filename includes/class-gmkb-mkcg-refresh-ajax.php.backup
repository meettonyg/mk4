<?php\n/**\n * GMKB MKCG Data Refresh AJAX Handlers\n * \n * Provides server-side endpoints for Task 5: Data Refresh and Synchronization Controls\n * \n * @package Guestify\n * @version 1.0.0-task5\n */\n\n// Exit if accessed directly.\nif (!defined('ABSPATH')) {\n    exit;\n}\n\n/**\n * GMKB MKCG Data Refresh AJAX Handler Class\n * \n * Handles all AJAX requests for data refresh functionality\n */\nclass GMKB_MKCG_Refresh_Ajax {\n    \n    /**\n     * Singleton instance\n     */\n    private static $instance = null;\n    \n    /**\n     * MKCG Data Integration instance\n     */\n    private $mkcg_integration;\n    \n    /**\n     * Get singleton instance\n     */\n    public static function get_instance() {\n        if (null === self::$instance) {\n            self::$instance = new self();\n        }\n        return self::$instance;\n    }\n    \n    /**\n     * Constructor\n     */\n    private function __construct() {\n        // Initialize MKCG data integration\n        require_once GUESTIFY_PLUGIN_DIR . 'includes/class-gmkb-mkcg-data-integration.php';\n        $this->mkcg_integration = GMKB_MKCG_Data_Integration::get_instance();\n        \n        // Register AJAX handlers\n        $this->register_ajax_handlers();\n    }\n    \n    /**\n     * Register AJAX handlers for refresh functionality\n     */\n    private function register_ajax_handlers() {\n        // Check MKCG data freshness\n        add_action('wp_ajax_gmkb_check_mkcg_freshness', array($this, 'ajax_check_mkcg_freshness'));\n        add_action('wp_ajax_nopriv_gmkb_check_mkcg_freshness', array($this, 'ajax_check_mkcg_freshness'));\n        \n        // Get fresh MKCG data\n        add_action('wp_ajax_gmkb_get_fresh_mkcg_data', array($this, 'ajax_get_fresh_mkcg_data'));\n        add_action('wp_ajax_nopriv_gmkb_get_fresh_mkcg_data', array($this, 'ajax_get_fresh_mkcg_data'));\n        \n        // Get fresh component data\n        add_action('wp_ajax_gmkb_get_fresh_component_data', array($this, 'ajax_get_fresh_component_data'));\n        add_action('wp_ajax_nopriv_gmkb_get_fresh_component_data', array($this, 'ajax_get_fresh_component_data'));\n        \n        // Refresh component\n        add_action('wp_ajax_gmkb_refresh_component', array($this, 'ajax_refresh_component'));\n        add_action('wp_ajax_nopriv_gmkb_refresh_component', array($this, 'ajax_refresh_component'));\n        \n        // Get refresh status\n        add_action('wp_ajax_gmkb_get_refresh_status', array($this, 'ajax_get_refresh_status'));\n        add_action('wp_ajax_nopriv_gmkb_get_refresh_status', array($this, 'ajax_get_refresh_status'));\n    }\n    \n    /**\n     * AJAX: Check MKCG data freshness\n     */\n    public function ajax_check_mkcg_freshness() {\n        try {\n            // Verify nonce for security\n            if (!$this->verify_nonce()) {\n                wp_send_json_error(array(\n                    'message' => 'Security check failed',\n                    'code' => 'invalid_nonce'\n                ));\n                return;\n            }\n            \n            // Get and validate parameters\n            $post_id = intval($_POST['post_id'] ?? 0);\n            $client_timestamp = intval($_POST['client_timestamp'] ?? 0);\n            \n            if ($post_id <= 0) {\n                wp_send_json_error(array(\n                    'message' => 'Invalid post ID',\n                    'code' => 'invalid_post_id'\n                ));\n                return;\n            }\n            \n            if ($client_timestamp <= 0) {\n                wp_send_json_error(array(\n                    'message' => 'Invalid client timestamp',\n                    'code' => 'invalid_timestamp'\n                ));\n                return;\n            }\n            \n            // Check data freshness\n            $freshness_result = $this->mkcg_integration->check_data_freshness($post_id, $client_timestamp);\n            \n            if (!$freshness_result['success']) {\n                wp_send_json_error(array(\n                    'message' => $freshness_result['message'] ?? 'Failed to check data freshness',\n                    'code' => 'freshness_check_failed'\n                ));\n                return;\n            }\n            \n            // Return successful result\n            wp_send_json_success($freshness_result);\n            \n        } catch (Exception $e) {\n            wp_send_json_error(array(\n                'message' => 'Server error: ' . $e->getMessage(),\n                'code' => 'server_error'\n            ));\n        }\n    }\n    \n    /**\n     * AJAX: Get fresh MKCG data\n     */\n    public function ajax_get_fresh_mkcg_data() {\n        try {\n            // Verify nonce for security\n            if (!$this->verify_nonce()) {\n                wp_send_json_error(array(\n                    'message' => 'Security check failed',\n                    'code' => 'invalid_nonce'\n                ));\n                return;\n            }\n            \n            // Get and validate parameters\n            $post_id = intval($_POST['post_id'] ?? 0);\n            \n            if ($post_id <= 0) {\n                wp_send_json_error(array(\n                    'message' => 'Invalid post ID',\n                    'code' => 'invalid_post_id'\n                ));\n                return;\n            }\n            \n            // Get fresh data\n            $fresh_data = $this->mkcg_integration->get_post_data($post_id);\n            \n            if (!$fresh_data) {\n                wp_send_json_error(array(\n                    'message' => 'Failed to retrieve fresh data',\n                    'code' => 'data_retrieval_failed'\n                ));\n                return;\n            }\n            \n            // Return fresh data\n            wp_send_json_success(array(\n                'data' => $fresh_data,\n                'post_id' => $post_id,\n                'server_timestamp' => time(),\n                'extraction_info' => array(\n                    'timestamp' => $fresh_data['meta_info']['extraction_timestamp'] ?? time(),\n                    'version' => $fresh_data['freshness']['version'] ?? '1.0.0-task5'\n                )\n            ));\n            \n        } catch (Exception $e) {\n            wp_send_json_error(array(\n                'message' => 'Server error: ' . $e->getMessage(),\n                'code' => 'server_error'\n            ));\n        }\n    }\n    \n    /**\n     * AJAX: Get fresh component data\n     */\n    public function ajax_get_fresh_component_data() {\n        try {\n            // Verify nonce for security\n            if (!$this->verify_nonce()) {\n                wp_send_json_error(array(\n                    'message' => 'Security check failed',\n                    'code' => 'invalid_nonce'\n                ));\n                return;\n            }\n            \n            // Get and validate parameters\n            $post_id = intval($_POST['post_id'] ?? 0);\n            $component_type = sanitize_text_field($_POST['component_type'] ?? '');\n            \n            if ($post_id <= 0) {\n                wp_send_json_error(array(\n                    'message' => 'Invalid post ID',\n                    'code' => 'invalid_post_id'\n                ));\n                return;\n            }\n            \n            if (empty($component_type)) {\n                wp_send_json_error(array(\n                    'message' => 'Invalid component type',\n                    'code' => 'invalid_component_type'\n                ));\n                return;\n            }\n            \n            // Get fresh component data\n            $component_data = $this->mkcg_integration->get_fresh_component_data($post_id, $component_type);\n            \n            if ($component_data === null) {\n                wp_send_json_error(array(\n                    'message' => 'Component data not found or failed to retrieve',\n                    'code' => 'component_data_not_found'\n                ));\n                return;\n            }\n            \n            // Return component data\n            wp_send_json_success(array(\n                'data' => $component_data,\n                'component_type' => $component_type,\n                'post_id' => $post_id,\n                'server_timestamp' => time()\n            ));\n            \n        } catch (Exception $e) {\n            wp_send_json_error(array(\n                'message' => 'Server error: ' . $e->getMessage(),\n                'code' => 'server_error'\n            ));\n        }\n    }\n    \n    /**\n     * AJAX: Refresh component (placeholder for future enhancement)\n     */\n    public function ajax_refresh_component() {\n        try {\n            // Verify nonce for security\n            if (!$this->verify_nonce()) {\n                wp_send_json_error(array(\n                    'message' => 'Security check failed',\n                    'code' => 'invalid_nonce'\n                ));\n                return;\n            }\n            \n            // Get and validate parameters\n            $post_id = intval($_POST['post_id'] ?? 0);\n            $component_id = sanitize_text_field($_POST['component_id'] ?? '');\n            $component_type = sanitize_text_field($_POST['component_type'] ?? '');\n            \n            if ($post_id <= 0) {\n                wp_send_json_error(array(\n                    'message' => 'Invalid post ID',\n                    'code' => 'invalid_post_id'\n                ));\n                return;\n            }\n            \n            if (empty($component_id)) {\n                wp_send_json_error(array(\n                    'message' => 'Invalid component ID',\n                    'code' => 'invalid_component_id'\n                ));\n                return;\n            }\n            \n            // For now, this is a placeholder that returns success\n            // In a full implementation, this would handle component-specific refresh logic\n            wp_send_json_success(array(\n                'component_id' => $component_id,\n                'component_type' => $component_type,\n                'post_id' => $post_id,\n                'refreshed' => true,\n                'server_timestamp' => time(),\n                'message' => 'Component refresh completed successfully'\n            ));\n            \n        } catch (Exception $e) {\n            wp_send_json_error(array(\n                'message' => 'Server error: ' . $e->getMessage(),\n                'code' => 'server_error'\n            ));\n        }\n    }\n    \n    /**\n     * AJAX: Get refresh status\n     */\n    public function ajax_get_refresh_status() {\n        try {\n            // Verify nonce for security\n            if (!$this->verify_nonce()) {\n                wp_send_json_error(array(\n                    'message' => 'Security check failed',\n                    'code' => 'invalid_nonce'\n                ));\n                return;\n            }\n            \n            // Get and validate parameters\n            $post_id = intval($_POST['post_id'] ?? 0);\n            \n            if ($post_id <= 0) {\n                wp_send_json_error(array(\n                    'message' => 'Invalid post ID',\n                    'code' => 'invalid_post_id'\n                ));\n                return;\n            }\n            \n            // Get data availability\n            $availability = $this->mkcg_integration->get_data_availability($post_id);\n            \n            // Get freshness metadata\n            $fresh_data = $this->mkcg_integration->get_post_data($post_id);\n            $freshness = $fresh_data['freshness'] ?? array();\n            \n            // Return status information\n            wp_send_json_success(array(\n                'post_id' => $post_id,\n                'availability' => $availability,\n                'freshness' => $freshness,\n                'server_timestamp' => time(),\n                'last_check' => time(),\n                'status' => 'ready'\n            ));\n            \n        } catch (Exception $e) {\n            wp_send_json_error(array(\n                'message' => 'Server error: ' . $e->getMessage(),\n                'code' => 'server_error'\n            ));\n        }\n    }\n    \n    /**\n     * Verify nonce for security\n     * \n     * @return bool True if nonce is valid\n     */\n    private function verify_nonce() {\n        // Check if nonce exists\n        $nonce = $_POST['nonce'] ?? $_POST['_wpnonce'] ?? '';\n        \n        if (empty($nonce)) {\n            // For development/testing, allow requests without nonce if in debug mode\n            if (defined('WP_DEBUG') && WP_DEBUG) {\n                return true;\n            }\n            return false;\n        }\n        \n        // Verify nonce\n        return wp_verify_nonce($nonce, 'gmkb_refresh_nonce');\n    }\n    \n    /**\n     * Get MKCG integration instance\n     * \n     * @return GMKB_MKCG_Data_Integration\n     */\n    public function get_mkcg_integration() {\n        return $this->mkcg_integration;\n    }\n    \n    /**\n     * Log refresh activity for debugging\n     * \n     * @param string $action Action performed\n     * @param array $data Action data\n     */\n    private function log_refresh_activity($action, $data = array()) {\n        if (defined('WP_DEBUG') && WP_DEBUG) {\n            error_log('GMKB Refresh Activity: ' . $action . ' - ' . wp_json_encode($data));\n        }\n    }\n    \n    /**\n     * Get refresh statistics\n     * \n     * @return array Refresh statistics\n     */\n    public function get_refresh_stats() {\n        return array(\n            'handlers_registered' => true,\n            'mkcg_integration_available' => !!$this->mkcg_integration,\n            'server_timestamp' => time(),\n            'version' => '1.0.0-task5'\n        );\n    }\n}\n\n// Initialize the AJAX handler\nGMKB_MKCG_Refresh_Ajax::get_instance();\n