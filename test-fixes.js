/**
 * Test Script for Media Kit Builder Fixes
 * 
 * Run in browser console after fixes are applied
 */

console.log('üß™ Starting Media Kit Builder Fix Verification...\n');

const tests = {
  passed: 0,
  failed: 0,
  warnings: 0
};

// Test 1: Check DragDropManager is not handling drops
console.log('Test 1: Verify DragDropManager drop handler is disabled');
try {
  const dragDropMgr = window.gmkbDragDrop;
  if (dragDropMgr) {
    console.log('‚úÖ DragDropManager exists');
    console.log('‚ÑπÔ∏è  Drop handling should be in Vue only');
    tests.passed++;
  } else {
    console.warn('‚ö†Ô∏è DragDropManager not found');
    tests.warnings++;
  }
} catch (e) {
  console.error('‚ùå Test 1 failed:', e);
  tests.failed++;
}

// Test 2: Check store has undo/redo methods
console.log('\nTest 2: Verify undo/redo methods exist');
try {
  const store = window.gmkbStore || window.mediaKitStore;
  if (store && typeof store.undo === 'function' && typeof store.redo === 'function') {
    console.log('‚úÖ Undo/Redo methods exist');
    console.log('‚ÑπÔ∏è  canUndo:', store.canUndo);
    console.log('‚ÑπÔ∏è  canRedo:', store.canRedo);
    tests.passed++;
  } else {
    console.error('‚ùå Store or undo/redo methods not found');
    tests.failed++;
  }
} catch (e) {
  console.error('‚ùå Test 2 failed:', e);
  tests.failed++;
}

// Test 3: Check API service exists
console.log('\nTest 3: Verify APIService is initialized');
try {
  const apiService = window.gmkbAPI;
  if (apiService && typeof apiService.save === 'function') {
    console.log('‚úÖ APIService exists with save method');
    console.log('‚ÑπÔ∏è  Base URL:', apiService.baseUrl);
    tests.passed++;
  } else {
    console.error('‚ùå APIService not found or missing save method');
    tests.failed++;
  }
} catch (e) {
  console.error('‚ùå Test 3 failed:', e);
  tests.failed++;
}

// Test 4: Check for console errors
console.log('\nTest 4: Checking for errors in console');
const hasErrors = console.error.toString().includes('Error');
if (!hasErrors) {
  console.log('‚úÖ No console errors detected');
  tests.passed++;
} else {
  console.warn('‚ö†Ô∏è Console errors may exist, check console');
  tests.warnings++;
}

// Test 5: Verify gmkbData is available
console.log('\nTest 5: Verify gmkbData configuration');
try {
  if (window.gmkbData && window.gmkbData.postId) {
    console.log('‚úÖ gmkbData available');
    console.log('‚ÑπÔ∏è  Post ID:', window.gmkbData.postId);
    console.log('‚ÑπÔ∏è  REST URL:', window.gmkbData.restUrl);
    console.log('‚ÑπÔ∏è  Has REST Nonce:', !!window.gmkbData.restNonce);
    tests.passed++;
  } else {
    console.error('‚ùå gmkbData not properly configured');
    tests.failed++;
  }
} catch (e) {
  console.error('‚ùå Test 5 failed:', e);
  tests.failed++;
}

// Summary
console.log('\n' + '='.repeat(50));
console.log('üìä TEST SUMMARY');
console.log('='.repeat(50));
console.log(`‚úÖ Passed: ${tests.passed}`);
console.log(`‚ùå Failed: ${tests.failed}`);
console.log(`‚ö†Ô∏è  Warnings: ${tests.warnings}`);
console.log('='.repeat(50));

if (tests.failed === 0) {
  console.log('\nüéâ All critical tests passed!');
  console.log('\nNext steps:');
  console.log('1. Test drag/drop a component ‚Üí Should add only once');
  console.log('2. Make changes and save ‚Üí Should work without 403 errors');
  console.log('3. Test undo/redo buttons ‚Üí Should work correctly');
} else {
  console.log('\n‚ö†Ô∏è  Some tests failed. Please review the errors above.');
}

// Export test results
window.GMKB_TEST_RESULTS = {
  timestamp: new Date().toISOString(),
  tests,
  passed: tests.failed === 0
};

console.log('\nüíæ Test results saved to: window.GMKB_TEST_RESULTS');
