/**
 * @file task5-integration.js
 * @description Task 5 Complete Integration - Data Refresh and Synchronization Controls
 * 
 * Phase 2.3 - Task 5: Final Integration Script
 * 
 * This file imports and initializes all Task 5 components:
 * - MKCGDataRefreshManager
 * - DataConflictResolver
 * - Task5SyncIndicatorIntegration
 * 
 * It provides a unified interface for the refresh and synchronization system.
 */

import { structuredLogger } from '../utils/structured-logger.js';
import { eventBus } from './event-bus.js';\n// Import Task 5 components\nimport mkcgDataRefreshManager from './mkcg-data-refresh-manager.js';\nimport { DataConflictResolver } from './data-conflict-resolver.js';\nimport task5SyncIntegration from './task5-sync-indicator-integration.js';\n\n/**\n * Task 5 Integration Manager\n * Coordinates all data refresh and synchronization functionality\n */\nclass Task5Integration {\n    constructor() {\n        this.logger = structuredLogger;\n        this.eventBus = eventBus;\n        \n        // Integration state\n        this.initialized = false;\n        this.components = {\n            refreshManager: {\n                instance: null,\n                available: false,\n                ready: false\n            },\n            conflictResolver: {\n                instance: null,\n                available: false,\n                ready: false\n            },\n            syncIntegration: {\n                instance: null,\n                available: false,\n                ready: false\n            }\n        };\n        \n        // Configuration\n        this.config = {\n            enableAutoRefresh: true,\n            enableConflictResolution: true,\n            enableSyncIndicators: true,\n            debugMode: false\n        };\n        \n        // Statistics\n        this.stats = {\n            refreshOperations: 0,\n            conflictsResolved: 0,\n            syncStatusUpdates: 0,\n            errors: 0,\n            lastOperation: null\n        };\n        \n        this.logger.info('TASK5_INTEGRATION', 'Task 5 Integration Manager created');\n        \n        // Initialize immediately\n        this.initialize();\n    }\n\n    /**\n     * Initialize Task 5 integration\n     */\n    async initialize() {\n        if (this.initialized) {\n            this.logger.warn('TASK5_INTEGRATION', 'Already initialized');\n            return;\n        }\n\n        this.logger.info('TASK5_INTEGRATION', 'Initializing Task 5 Data Refresh and Synchronization Controls');\n\n        try {\n            // Step 1: Initialize MKCG Data Refresh Manager\n            await this.initializeRefreshManager();\n            \n            // Step 2: Initialize Data Conflict Resolver\n            await this.initializeConflictResolver();\n            \n            // Step 3: Initialize Sync Indicator Integration\n            await this.initializeSyncIntegration();\n            \n            // Step 4: Connect components together\n            await this.connectComponents();\n            \n            // Step 5: Set up global interfaces\n            this.setupGlobalInterfaces();\n            \n            // Step 6: Initialize event handlers\n            this.setupEventHandlers();\n            \n            this.initialized = true;\n            \n            this.logger.info('TASK5_INTEGRATION', 'Task 5 integration completed successfully', {\n                refreshManager: this.components.refreshManager.ready,\n                conflictResolver: this.components.conflictResolver.ready,\n                syncIntegration: this.components.syncIntegration.ready\n            });\n            \n            // Emit integration ready event\n            this.eventBus.emit('task5:integration-ready', {\n                timestamp: Date.now(),\n                components: this.getComponentStatus(),\n                config: this.config\n            });\n            \n        } catch (error) {\n            this.logger.error('TASK5_INTEGRATION', 'Failed to initialize Task 5 integration', error);\n            this.stats.errors++;\n            throw error;\n        }\n    }\n\n    /**\n     * Initialize MKCG Data Refresh Manager\n     */\n    async initializeRefreshManager() {\n        try {\n            this.logger.info('TASK5_INTEGRATION', 'Initializing MKCG Data Refresh Manager');\n            \n            // The refresh manager should already be available from import\n            if (mkcgDataRefreshManager) {\n                this.components.refreshManager.instance = mkcgDataRefreshManager;\n                this.components.refreshManager.available = true;\n                \n                // Inject conflict resolver when it's ready\n                if (this.components.conflictResolver.instance) {\n                    mkcgDataRefreshManager.setConflictResolver(this.components.conflictResolver.instance);\n                }\n                \n                this.components.refreshManager.ready = true;\n                this.logger.info('TASK5_INTEGRATION', 'MKCG Data Refresh Manager ready');\n            } else {\n                throw new Error('MKCG Data Refresh Manager not available');\n            }\n            \n        } catch (error) {\n            this.logger.error('TASK5_INTEGRATION', 'Failed to initialize refresh manager', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Initialize Data Conflict Resolver\n     */\n    async initializeConflictResolver() {\n        try {\n            this.logger.info('TASK5_INTEGRATION', 'Initializing Data Conflict Resolver');\n            \n            // Create conflict resolver instance\n            this.components.conflictResolver.instance = new DataConflictResolver();\n            this.components.conflictResolver.available = true;\n            this.components.conflictResolver.ready = true;\n            \n            this.logger.info('TASK5_INTEGRATION', 'Data Conflict Resolver ready');\n            \n        } catch (error) {\n            this.logger.error('TASK5_INTEGRATION', 'Failed to initialize conflict resolver', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Initialize Sync Indicator Integration\n     */\n    async initializeSyncIntegration() {\n        try {\n            this.logger.info('TASK5_INTEGRATION', 'Initializing Sync Indicator Integration');\n            \n            // The sync integration should already be available from import\n            if (task5SyncIntegration) {\n                this.components.syncIntegration.instance = task5SyncIntegration;\n                this.components.syncIntegration.available = true;\n                this.components.syncIntegration.ready = true;\n                \n                this.logger.info('TASK5_INTEGRATION', 'Sync Indicator Integration ready');\n            } else {\n                throw new Error('Sync Indicator Integration not available');\n            }\n            \n        } catch (error) {\n            this.logger.error('TASK5_INTEGRATION', 'Failed to initialize sync integration', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Connect components together\n     */\n    async connectComponents() {\n        try {\n            this.logger.info('TASK5_INTEGRATION', 'Connecting Task 5 components');\n            \n            // Inject conflict resolver into refresh manager\n            if (this.components.refreshManager.instance && this.components.conflictResolver.instance) {\n                this.components.refreshManager.instance.setConflictResolver(\n                    this.components.conflictResolver.instance\n                );\n                this.logger.info('TASK5_INTEGRATION', 'Conflict resolver injected into refresh manager');\n            }\n            \n            // Set up cross-component communication through event bus\n            this.setupCrossComponentCommunication();\n            \n            this.logger.info('TASK5_INTEGRATION', 'Components connected successfully');\n            \n        } catch (error) {\n            this.logger.error('TASK5_INTEGRATION', 'Failed to connect components', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Set up cross-component communication\n     */\n    setupCrossComponentCommunication() {\n        // Listen for refresh events to update sync indicators\n        this.eventBus.on('refresh:start', (data) => {\n            this.stats.refreshOperations++;\n            this.stats.lastOperation = 'refresh_start';\n        });\n\n        this.eventBus.on('refresh:complete', (data) => {\n            this.stats.lastOperation = 'refresh_complete';\n        });\n\n        this.eventBus.on('conflict:resolved', (data) => {\n            this.stats.conflictsResolved++;\n            this.stats.lastOperation = 'conflict_resolved';\n        });\n\n        this.eventBus.on('sync:status-updated', (data) => {\n            this.stats.syncStatusUpdates++;\n            this.stats.lastOperation = 'sync_updated';\n        });\n    }\n\n    /**\n     * Set up global interfaces for Task 5\n     */\n    setupGlobalInterfaces() {\n        // Main Task 5 interface\n        window.task5 = {\n            // Refresh operations\n            refreshAll: (options) => this.refreshAllData(options),\n            refreshComponent: (componentId, options) => this.refreshComponent(componentId, options),\n            checkFresh: (options) => this.checkForFreshData(options),\n            \n            // Component status\n            getComponentStatus: (componentId) => this.getComponentSyncStatus(componentId),\n            getAllComponentStatus: () => this.getAllComponentStatus(),\n            \n            // Conflict resolution\n            resolveConflicts: (conflicts, options) => this.resolveConflicts(conflicts, options),\n            \n            // Integration management\n            getStatus: () => this.getStatus(),\n            getStats: () => this.getStats(),\n            debug: () => this.debug(),\n            help: () => this.help(),\n            \n            // Configuration\n            setConfig: (config) => this.setConfig(config),\n            getConfig: () => this.getConfig()\n        };\n        \n        // Integration status interface\n        window.task5Integration = this;\n        \n        this.logger.info('TASK5_INTEGRATION', 'Global interfaces set up');\n    }\n\n    /**\n     * Set up event handlers\n     */\n    setupEventHandlers() {\n        // Listen for state manager events\n        this.eventBus.on('state:component-add', (data) => {\n            // Initialize sync indicators for new components\n            if (this.components.syncIntegration.instance) {\n                setTimeout(() => {\n                    this.components.syncIntegration.instance.initializeComponentSyncIndicator(data.payload.id);\n                }, 100);\n            }\n        });\n\n        // Listen for MKCG data changes\n        this.eventBus.on('mkcg:data-updated', (data) => {\n            // Trigger refresh checks\n            if (this.config.enableAutoRefresh && this.components.refreshManager.instance) {\n                this.components.refreshManager.instance.checkForFreshDataSilent();\n            }\n        });\n\n        this.logger.info('TASK5_INTEGRATION', 'Event handlers set up');\n    }\n\n    // Public API Methods\n\n    /**\n     * Refresh all MKCG data\n     * @param {Object} options - Refresh options\n     * @returns {Promise<Object>} Refresh result\n     */\n    async refreshAllData(options = {}) {\n        if (!this.components.refreshManager.ready) {\n            throw new Error('Refresh manager not ready');\n        }\n\n        try {\n            const result = await this.components.refreshManager.instance.refreshAllData(options);\n            this.stats.refreshOperations++;\n            return result;\n        } catch (error) {\n            this.stats.errors++;\n            throw error;\n        }\n    }\n\n    /**\n     * Refresh specific component\n     * @param {string} componentId - Component ID\n     * @param {Object} options - Refresh options\n     * @returns {Promise<Object>} Refresh result\n     */\n    async refreshComponent(componentId, options = {}) {\n        if (!this.components.refreshManager.ready) {\n            throw new Error('Refresh manager not ready');\n        }\n\n        try {\n            const result = await this.components.refreshManager.instance.refreshComponent(componentId, options);\n            this.stats.refreshOperations++;\n            return result;\n        } catch (error) {\n            this.stats.errors++;\n            throw error;\n        }\n    }\n\n    /**\n     * Check for fresh data\n     * @param {Object} options - Check options\n     * @returns {Promise<Object>} Check result\n     */\n    async checkForFreshData(options = {}) {\n        if (!this.components.refreshManager.ready) {\n            throw new Error('Refresh manager not ready');\n        }\n\n        try {\n            const result = await this.components.refreshManager.instance.checkForFreshData(options);\n            return result;\n        } catch (error) {\n            this.stats.errors++;\n            throw error;\n        }\n    }\n\n    /**\n     * Resolve conflicts\n     * @param {Array} conflicts - Conflicts to resolve\n     * @param {Object} options - Resolution options\n     * @returns {Promise<Object>} Resolution result\n     */\n    async resolveConflicts(conflicts, options = {}) {\n        if (!this.components.conflictResolver.ready) {\n            throw new Error('Conflict resolver not ready');\n        }\n\n        try {\n            const result = await this.components.conflictResolver.instance.resolveConflicts(conflicts, options);\n            this.stats.conflictsResolved++;\n            return result;\n        } catch (error) {\n            this.stats.errors++;\n            throw error;\n        }\n    }\n\n    /**\n     * Get component sync status\n     * @param {string} componentId - Component ID\n     * @returns {Object} Component status\n     */\n    getComponentSyncStatus(componentId) {\n        if (!this.components.syncIntegration.ready) {\n            return { error: 'Sync integration not ready' };\n        }\n\n        return this.components.syncIntegration.instance.componentSyncStates.get(componentId) || null;\n    }\n\n    /**\n     * Get all component status\n     * @returns {Object} All component statuses\n     */\n    getAllComponentStatus() {\n        if (!this.components.syncIntegration.ready) {\n            return { error: 'Sync integration not ready' };\n        }\n\n        return Object.fromEntries(this.components.syncIntegration.instance.componentSyncStates);\n    }\n\n    /**\n     * Get integration status\n     * @returns {Object} Integration status\n     */\n    getStatus() {\n        return {\n            initialized: this.initialized,\n            components: this.getComponentStatus(),\n            config: this.config,\n            stats: this.stats\n        };\n    }\n\n    /**\n     * Get component status\n     * @returns {Object} Component status\n     */\n    getComponentStatus() {\n        return {\n            refreshManager: {\n                available: this.components.refreshManager.available,\n                ready: this.components.refreshManager.ready,\n                stats: this.components.refreshManager.instance?.getRefreshStats?.()\n            },\n            conflictResolver: {\n                available: this.components.conflictResolver.available,\n                ready: this.components.conflictResolver.ready,\n                stats: this.components.conflictResolver.instance?.getStats?.()\n            },\n            syncIntegration: {\n                available: this.components.syncIntegration.available,\n                ready: this.components.syncIntegration.ready,\n                stats: this.components.syncIntegration.instance?.getStats?.()\n            }\n        };\n    }\n\n    /**\n     * Get integration statistics\n     * @returns {Object} Statistics\n     */\n    getStats() {\n        return {\n            ...this.stats,\n            components: {\n                refreshManager: this.components.refreshManager.instance?.getRefreshStats?.() || {},\n                conflictResolver: this.components.conflictResolver.instance?.getStats?.() || {},\n                syncIntegration: this.components.syncIntegration.instance?.getStats?.() || {}\n            }\n        };\n    }\n\n    /**\n     * Set configuration\n     * @param {Object} config - Configuration updates\n     */\n    setConfig(config) {\n        this.config = { ...this.config, ...config };\n        this.logger.info('TASK5_INTEGRATION', 'Configuration updated', this.config);\n        \n        // Apply configuration to components\n        if (this.components.refreshManager.instance && config.refreshConfig) {\n            Object.assign(this.components.refreshManager.instance.config, config.refreshConfig);\n        }\n    }\n\n    /**\n     * Get current configuration\n     * @returns {Object} Current configuration\n     */\n    getConfig() {\n        return { ...this.config };\n    }\n\n    /**\n     * Debug Task 5 integration\n     */\n    debug() {\n        console.group('🔄 Task 5 Integration Debug');\n        \n        console.log('📊 Integration Status:', this.getStatus());\n        console.log('📈 Statistics:', this.getStats());\n        console.log('⚙️ Configuration:', this.config);\n        \n        if (this.components.refreshManager.ready) {\n            console.log('🔄 Refresh Manager:', this.components.refreshManager.instance.getRefreshStats());\n        }\n        \n        if (this.components.conflictResolver.ready) {\n            console.log('🔀 Conflict Resolver:', this.components.conflictResolver.instance.getStats());\n        }\n        \n        if (this.components.syncIntegration.ready) {\n            console.log('🔗 Sync Integration:', this.components.syncIntegration.instance.getStats());\n        }\n        \n        console.log('🌐 Global Interfaces:', {\n            task5: !!window.task5,\n            task5Integration: !!window.task5Integration,\n            mkcgDataRefreshManager: !!window.mkcgDataRefreshManager,\n            DataConflictResolver: !!window.DataConflictResolver,\n            task5SyncIntegration: !!window.task5SyncIntegration\n        });\n        \n        console.groupEnd();\n    }\n\n    /**\n     * Show Task 5 help\n     */\n    help() {\n        console.log('🔄 Task 5: Data Refresh and Synchronization Controls Help\\n');\n        \n        console.log('📋 Available Commands:');\n        console.log('  task5.refreshAll()              - Refresh all MKCG data');\n        console.log('  task5.refreshComponent(id)      - Refresh specific component');\n        console.log('  task5.checkFresh()              - Check for fresh data');\n        console.log('  task5.getComponentStatus(id)    - Get component sync status');\n        console.log('  task5.getAllComponentStatus()   - Get all component statuses');\n        console.log('  task5.resolveConflicts(conflicts) - Resolve data conflicts');\n        console.log('  task5.getStatus()               - Get integration status');\n        console.log('  task5.getStats()                - Get statistics');\n        console.log('  task5.debug()                   - Show debug information');\n        console.log('  task5.help()                    - Show this help\\n');\n        \n        console.log('⚙️ Configuration:');\n        console.log('  task5.setConfig(config)         - Update configuration');\n        console.log('  task5.getConfig()               - Get current configuration\\n');\n        \n        console.log('🔧 Component Access:');\n        console.log('  window.mkcgDataRefreshManager   - Direct access to refresh manager');\n        console.log('  window.DataConflictResolver     - Conflict resolver class');\n        console.log('  window.task5SyncIntegration     - Sync integration instance\\n');\n        \n        console.log('📊 UI Features:');\n        console.log('  • Real-time sync indicators on components');\n        console.log('  • Automatic fresh data notifications');\n        console.log('  • Interactive conflict resolution modals');\n        console.log('  • Dashboard refresh controls');\n        console.log('  • Component-level refresh context menus\\n');\n        \n        console.log('💡 Usage Examples:');\n        console.log('  // Refresh all data with progress');\n        console.log('  await task5.refreshAll({ showProgress: true });\\n');\n        \n        console.log('  // Check for fresh data without user notification');\n        console.log('  const result = await task5.checkFresh({ notifyUser: false });\\n');\n        \n        console.log('  // Get component sync status');\n        console.log('  const status = task5.getComponentStatus(\"hero-component-1\");\\n');\n    }\n\n    /**\n     * Destroy Task 5 integration\n     */\n    destroy() {\n        // Clean up components\n        if (this.components.refreshManager.instance?.destroy) {\n            this.components.refreshManager.instance.destroy();\n        }\n        \n        if (this.components.syncIntegration.instance?.destroy) {\n            this.components.syncIntegration.instance.destroy();\n        }\n        \n        // Remove global interfaces\n        delete window.task5;\n        delete window.task5Integration;\n        \n        // Clear state\n        this.initialized = false;\n        this.components = {};\n        \n        this.logger.info('TASK5_INTEGRATION', 'Task 5 integration destroyed');\n    }\n}\n\n// Create and export integration instance\nconst task5Integration = new Task5Integration();\n\n// Make available globally\nwindow.task5Integration = task5Integration;\n\n// Log integration availability\nconsole.log('🔄 Task 5: Data Refresh and Synchronization Controls loaded');\nconsole.log('📚 Type task5.help() for available commands');\n\nexport { task5Integration as default, Task5Integration };\n