/**
 * @file core-systems-bundle.js - PHASE 2 BULLETPROOF VERSION
 * @description Enhanced Bulletproof Core Systems Bundle with WordPress Coordination
 * @version 4.0.0 - PHASE 2 BULLETPROOF
 * 
 * PHASE 2 BULLETPROOF ENHANCEMENTS:
 * ‚úÖ WordPress action hook integration for bulletproof coordination
 * ‚úÖ Circuit breaker pattern for graceful error handling
 * ‚úÖ Enhanced system registration with integrity validation
 * ‚úÖ Zero polling - pure WordPress event coordination
 * ‚úÖ Advanced error recovery mechanisms
 * ‚úÖ Bulletproof state management
 */
(function() {
    'use strict';
    
    console.log('üöÄ PHASE 2: Bulletproof Core Systems Bundle loading with WordPress coordination...');

    // PHASE 2: WordPress coordination guarantees GMKB exists with bulletproof protection

    // PHASE 2: Bulletproof Enhanced State Manager System
    function createEnhancedStateManager() {
        return {
            _state: {
                components: {},
                layout: [],
                metadata: {},
                phase2: true,
                bulletproof: true
            },
            
            // PHASE 2: Circuit breaker for state operations
            _circuitBreaker: {
                failures: 0,
                threshold: 3,
                isOpen: false,
                lastFailureTime: 0,
                recoveryTimeout: 2000
            },
            
            init() {
                console.log('üìä PHASE 2: Bulletproof Enhanced State Manager Initialized with WordPress coordination');
                
                try {
                    this.loadStateFromStorage();
                    
                    // PHASE 2: WordPress action hook integration
                    if (window.gmkbWordPressHooks) {
                        this._initWordPressActionHooks();
                    }
                    
                    return this;
                } catch (error) {
                    console.error('‚ùå PHASE 2: State Manager initialization error:', error);
                    this._handleCircuitBreakerFailure('initialization', error);
                    return this;
                }
            },
            
            // PHASE 2: WordPress action hook integration
            _initWordPressActionHooks() {
                window.gmkbWordPressHooks.add('state-restore-request', (data) => {
                    console.log('üíæ PHASE 2: WordPress action - state restore requested');
                    this.loadStateFromStorage();
                });
                
                window.gmkbWordPressHooks.add('state-backup-request', (data) => {
                    console.log('üíæ PHASE 2: WordPress action - state backup requested');
                    this.saveStateToStorage();
                });
            },
            
            // PHASE 2: Circuit breaker failure handler
            _handleCircuitBreakerFailure(operation, error) {
                console.error(`‚ùå PHASE 2: State Manager circuit breaker - ${operation} failed:`, error);
                
                this._circuitBreaker.failures++;
                this._circuitBreaker.lastFailureTime = Date.now();
                
                if (this._circuitBreaker.failures >= this._circuitBreaker.threshold) {
                    this._circuitBreaker.isOpen = true;
                    console.warn(`üö® PHASE 2: State Manager circuit breaker OPEN for ${operation}`);
                    
                    // Attempt recovery
                    setTimeout(() => {
                        this._attemptRecovery(operation);
                    }, this._circuitBreaker.recoveryTimeout);
                }
            },
            
            // PHASE 2: Recovery attempt
            _attemptRecovery(operation) {
                try {
                    console.log(`üîÑ PHASE 2: Attempting State Manager recovery for ${operation}`);
                    
                    // Test basic functionality
                    const testState = this.getState();
                    if (testState && typeof testState === 'object') {
                        this._circuitBreaker.isOpen = false;
                        this._circuitBreaker.failures = 0;
                        console.log('‚úÖ PHASE 2: State Manager recovery successful');
                    }
                } catch (error) {
                    console.error('‚ùå PHASE 2: State Manager recovery failed:', error);
                }
            },
            
            getState() {
                return { ...this._state };
            },
            
            setState(newState) {
                // PHASE 2: Circuit breaker check
                if (this._circuitBreaker.isOpen) {
                    console.warn('‚ö†Ô∏è PHASE 2: State update blocked - circuit breaker is open');
                    return false;
                }
                
                try {
                    const oldState = { ...this._state };
                    this._state = { ...this._state, ...newState, phase2: true, bulletproof: true };
                    
                    console.log('üîÑ PHASE 2: Bulletproof state updated with WordPress coordination');
                    
                    // PHASE 2: Enhanced event dispatch via GMKB
                    if (window.GMKB && window.GMKB.dispatch) {
                        window.GMKB.dispatch('state:changed', {
                            oldState,
                            newState: this._state,
                            timestamp: Date.now(),
                            phase2: true,
                            bulletproof: true
                        });
                    }
                    
                    // PHASE 2: WordPress action hook dispatch
                    if (window.gmkbWordPressHooks) {
                        window.gmkbWordPressHooks.dispatch('state-changed', {
                            oldState,
                            newState: this._state,
                            timestamp: Date.now()
                        });
                    }
                    
                    // Reset circuit breaker on successful operation
                    this._circuitBreaker.failures = 0;
                    return true;
                    
                } catch (error) {
                    console.error('‚ùå PHASE 2: setState error:', error);
                    this._handleCircuitBreakerFailure('setState', error);
                    return false;
                }
            },
            
            addComponent(component) {
                if (!component || !component.id) {
                    console.error('‚ùå GEMINI ARCHITECTURE: Cannot add component without ID');
                    return false;
                }
                
                const newComponents = { ...this._state.components };
                newComponents[component.id] = component;
                
                const newLayout = [...this._state.layout];
                if (!newLayout.includes(component.id)) {
                    newLayout.push(component.id);
                }
                
                this.setState({
                    components: newComponents,
                    layout: newLayout
                });
                
                console.log(`‚úÖ GEMINI ARCHITECTURE: Component added: ${component.id}`);
                return true;
            },
            
            removeComponent(componentId) {
                if (!componentId) return false;
                
                const newComponents = { ...this._state.components };
                delete newComponents[componentId];
                
                const newLayout = this._state.layout.filter(id => id !== componentId);
                
                this.setState({
                    components: newComponents,
                    layout: newLayout
                });
                
                console.log(`‚úÖ GEMINI ARCHITECTURE: Component removed: ${componentId}`);
                return true;
            },
            
            updateComponent(componentId, newProps) {
                if (!componentId || !this._state.components[componentId]) {
                    console.error('‚ùå GEMINI ARCHITECTURE: Cannot update non-existent component:', componentId);
                    return false;
                }
                
                const newComponents = { ...this._state.components };
                newComponents[componentId] = {
                    ...newComponents[componentId],
                    props: { ...newComponents[componentId].props, ...newProps },
                    lastUpdated: Date.now()
                };
                
                this.setState({
                    components: newComponents
                });
                
                console.log(`‚úÖ GEMINI ARCHITECTURE: Component updated: ${componentId}`);
                return true;
            },
            
            getComponent(componentId) {
                return this._state.components[componentId] || null;
            },
            
            moveComponent(componentId, direction) {
                const layout = [...this._state.layout];
                const currentIndex = layout.indexOf(componentId);
                
                if (currentIndex === -1) return false;
                
                let newIndex;
                if (direction === 'up') {
                    newIndex = Math.max(0, currentIndex - 1);
                } else {
                    newIndex = Math.min(layout.length - 1, currentIndex + 1);
                }
                
                if (newIndex !== currentIndex) {
                    [layout[currentIndex], layout[newIndex]] = [layout[newIndex], layout[currentIndex]];
                    
                    this.setState({ layout });
                    console.log(`üîÑ GEMINI ARCHITECTURE: Component moved ${direction}: ${componentId}`);
                    return true;
                }
                
                return false;
            },
            
            startBatchUpdate() {
                this._batchMode = true;
                this._batchChanges = [];
            },
            
            endBatchUpdate() {
                if (this._batchMode && this._batchChanges.length > 0) {
                    const finalState = this._batchChanges.reduce((state, change) => {
                        return { ...state, ...change };
                    }, this._state);
                    
                    this._state = finalState;
                    
                    if (window.GMKB) {
                        window.GMKB.dispatch('state:batch-updated', {
                            state: this._state,
                            changesCount: this._batchChanges.length,
                            timestamp: Date.now()
                        });
                    }
                    
                    console.log(`‚úÖ GEMINI ARCHITECTURE: Batch update completed (${this._batchChanges.length} changes)`);
                }
                
                this._batchMode = false;
                this._batchChanges = [];
            },
            
            loadStateFromStorage() {
                try {
                    const savedState = localStorage.getItem('guestifyMediaKitState');
                    if (savedState) {
                        const parsedState = JSON.parse(savedState);
                        this._state = { ...this._state, ...parsedState };
                        console.log('‚úÖ GEMINI ARCHITECTURE: State loaded from storage');
                        return parsedState;
                    }
                } catch (error) {
                    console.warn('‚ö†Ô∏è GEMINI ARCHITECTURE: Failed to load state from storage:', error);
                }
                return null;
            },
            
            saveStateToStorage() {
                try {
                    localStorage.setItem('guestifyMediaKitState', JSON.stringify(this._state));
                    console.log('‚úÖ GEMINI ARCHITECTURE: State saved to storage');
                    return true;
                } catch (error) {
                    console.warn('‚ö†Ô∏è GEMINI ARCHITECTURE: Failed to save state to storage:', error);
                    return false;
                }
            },
            
            subscribeGlobal(callback) {
                if (window.GMKB) {
                    return window.GMKB.subscribe('state:changed', (event) => {
                        callback(event.data.newState);
                    });
                }
                
                // Fallback to DOM events
                const handleStateChange = (e) => {
                    if (e.detail && e.detail.newState) {
                        callback(e.detail.newState);
                    }
                };
                
                document.addEventListener('stateChanged', handleStateChange);
                return () => {
                    document.removeEventListener('stateChanged', handleStateChange);
                };
            }
        };
    }

    // PHASE 2: Bulletproof Enhanced Renderer System
    function createRenderer() {
        return {
            // PHASE 2: Circuit breaker for rendering operations
            _circuitBreaker: {
                failures: 0,
                threshold: 5, // Higher threshold for renderer
                isOpen: false,
                lastFailureTime: 0,
                recoveryTimeout: 3000
            },
            
            init() {
                try {
                    // PHASE 2: Subscribe to state changes via GMKB with error handling
                    if (window.GMKB && window.GMKB.subscribe) {
                        window.GMKB.subscribe('state:changed', (event) => {
                            this.renderSafely(event.data.newState);
                        });
                    }
                    
                    // PHASE 2: WordPress action hook integration
                    if (window.gmkbWordPressHooks) {
                        this._initWordPressActionHooks();
                    }
                    
                    console.log('üé® PHASE 2: Bulletproof Enhanced Renderer Initialized with WordPress coordination');
                    return this;
                } catch (error) {
                    console.error('‚ùå PHASE 2: Renderer initialization error:', error);
                    this._handleCircuitBreakerFailure('initialization', error);
                    return this;
                }
            },
            
            // PHASE 2: WordPress action hook integration
            _initWordPressActionHooks() {
                window.gmkbWordPressHooks.add('force-render-request', (data) => {
                    console.log('üé® PHASE 2: WordPress action - force render requested');
                    if (data.state) {
                        this.renderSafely(data.state);
                    }
                });
                
                window.gmkbWordPressHooks.add('clear-render-cache', (data) => {
                    console.log('üß© PHASE 2: WordPress action - clear render cache');
                    this._clearRenderCache();
                });
            },
            
            // PHASE 2: Circuit breaker failure handler
            _handleCircuitBreakerFailure(operation, error) {
                console.error(`‚ùå PHASE 2: Renderer circuit breaker - ${operation} failed:`, error);
                
                this._circuitBreaker.failures++;
                this._circuitBreaker.lastFailureTime = Date.now();
                
                if (this._circuitBreaker.failures >= this._circuitBreaker.threshold) {
                    this._circuitBreaker.isOpen = true;
                    console.warn(`üö® PHASE 2: Renderer circuit breaker OPEN for ${operation}`);
                    
                    // Attempt recovery
                    setTimeout(() => {
                        this._attemptRecovery(operation);
                    }, this._circuitBreaker.recoveryTimeout);
                }
            },
            
            // PHASE 2: Recovery attempt
            _attemptRecovery(operation) {
                try {
                    console.log(`üîÑ PHASE 2: Attempting Renderer recovery for ${operation}`);
                    
                    // Test basic functionality
                    const appContainer = document.getElementById('media-kit-preview');
                    if (appContainer) {
                        this._circuitBreaker.isOpen = false;
                        this._circuitBreaker.failures = 0;
                        console.log('‚úÖ PHASE 2: Renderer recovery successful');
                    }
                } catch (error) {
                    console.error('‚ùå PHASE 2: Renderer recovery failed:', error);
                }
            },
            
            // PHASE 2: Safe rendering with circuit breaker
            renderSafely(state) {
                if (this._circuitBreaker.isOpen) {
                    console.warn('‚ö†Ô∏è PHASE 2: Rendering blocked - circuit breaker is open');
                    return false;
                }
                
                try {
                    this.render(state);
                    // Reset circuit breaker on successful operation
                    this._circuitBreaker.failures = 0;
                    return true;
                } catch (error) {
                    console.error('‚ùå PHASE 2: Rendering error:', error);
                    this._handleCircuitBreakerFailure('render', error);
                    return false;
                }
            },
            
            // PHASE 2: Clear render cache
            _clearRenderCache() {
                try {
                    // Clear any cached rendering data
                    console.log('üß© PHASE 2: Render cache cleared');
                } catch (error) {
                    console.error('‚ùå PHASE 2: Error clearing render cache:', error);
                }
            },
            
            render(state) {
                console.log('üñåÔ∏è GEMINI ARCHITECTURE: Rendering components...');
                
                const appContainer = document.getElementById('media-kit-preview');
                const emptyState = document.getElementById('empty-state');

                if (!appContainer) {
                    console.error('‚ùå GEMINI ARCHITECTURE: Main application container not found.');
                    return;
                }

                // Hide/show empty state based on components
                if (emptyState) {
                    const hasComponents = state.components && Object.keys(state.components).length > 0;
                    emptyState.style.display = hasComponents ? 'none' : 'block';
                }

                // Preserve existing component elements
                const existingComponents = new Map();
                const existingElements = appContainer.querySelectorAll('[data-component-id]');
                existingElements.forEach(el => {
                    const componentId = el.getAttribute('data-component-id');
                    if (componentId) {
                        existingComponents.set(componentId, el);
                    }
                });

                // Clear container
                appContainer.innerHTML = '';
                
                if (state.components && typeof state.components === 'object') {
                    const componentOrder = state.layout && state.layout.length > 0 ? 
                                         state.layout : Object.keys(state.components);
                    
                    componentOrder.forEach(componentId => {
                        const componentData = state.components[componentId];
                        if (!componentData) return;
                        
                        let componentEl = existingComponents.get(componentId);
                        
                        if (componentEl) {
                            console.log(`‚ôªÔ∏è GEMINI ARCHITECTURE: Reusing existing component: ${componentId}`);
                            appContainer.appendChild(componentEl);
                        } else {
                            componentEl = this.createComponentElement(componentId, componentData);
                            appContainer.appendChild(componentEl);
                            this.loadComponentHTML(componentId, componentData);
                        }
                    });
                    
                    console.log(`‚úÖ GEMINI ARCHITECTURE: Rendered ${componentOrder.length} components.`);
                }
            },
            
            createComponentElement(componentId, componentData) {
                const componentEl = document.createElement('div');
                componentEl.className = 'media-kit-component mk-component component-loading editable-element';
                componentEl.setAttribute('data-component-id', componentId);
                componentEl.setAttribute('data-component', componentData.type);
                componentEl.id = componentId;
                
                componentEl.innerHTML = `
                    <div class="component-loading-state">
                        <div class="loading-spinner"></div>
                        <div class="loading-text">Loading ${componentData.type}...</div>
                    </div>
                `;
                
                componentEl.style.cssText = `
                    background: white;
                    border: 2px solid #e2e8f0;
                    border-radius: 8px;
                    padding: 16px;
                    margin: 16px 0;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                    position: relative;
                    transition: all 0.2s ease;
                    min-height: 100px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                `;
                
                return componentEl;
            },
            
            loadComponentHTML(componentId, componentData) {
                const ajaxData = window.guestifyData || window.guestifyMediaKit;
                
                if (!ajaxData) {
                    console.error('‚ùå GEMINI ARCHITECTURE: No AJAX data available');
                    return;
                }
                
                const formData = new FormData();
                formData.append('action', 'guestify_render_component');
                formData.append('component', componentData.type);
                formData.append('props', JSON.stringify({
                    componentId: componentId,
                    name: componentData.props?.name || `New ${componentData.type}`,
                    title: componentData.props?.title || 'Professional Title',
                    bio: componentData.props?.bio || 'Add your description here',
                    ...componentData.props,
                    ...componentData.data
                }));
                formData.append('nonce', ajaxData.nonce);
                
                fetch(ajaxData.ajaxUrl, {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.data && data.data.html) {
                        const componentEl = document.getElementById(componentId);
                        if (componentEl) {
                            componentEl.innerHTML = data.data.html;
                            componentEl.classList.remove('component-loading');
                            componentEl.classList.add('component-loaded');
                            
                            this.addComponentInteractions(componentEl);
                            
                            console.log(`‚úÖ GEMINI ARCHITECTURE: Component HTML loaded: ${componentId}`);
                            
                            // Emit component loaded event via GMKB
                            if (window.GMKB) {
                                window.GMKB.dispatch('component:loaded', {
                                    componentId,
                                    componentType: componentData.type,
                                    timestamp: Date.now()
                                });
                            }
                        }
                    } else {
                        console.error('‚ùå GEMINI ARCHITECTURE: Failed to load component HTML:', data);
                        this.showComponentError(componentId, componentData);
                    }
                })
                .catch(error => {
                    console.error('‚ùå GEMINI ARCHITECTURE: AJAX error loading component:', error);
                    this.showComponentError(componentId, componentData);
                });
            },
            
            addComponentInteractions(componentEl) {
                componentEl.addEventListener('mouseenter', () => {
                    componentEl.style.borderColor = '#3b82f6';
                    componentEl.style.boxShadow = '0 4px 12px rgba(59, 130, 246, 0.15)';
                });
                
                componentEl.addEventListener('mouseleave', () => {
                    componentEl.style.borderColor = '#e2e8f0';
                    componentEl.style.boxShadow = '0 2px 4px rgba(0,0,0,0.1)';
                });
            },
            
            showComponentError(componentId, componentData) {
                const componentEl = document.getElementById(componentId);
                if (componentEl) {
                    componentEl.innerHTML = `
                        <div class="component-error">
                            <div class="error-icon">‚ö†Ô∏è</div>
                            <div class="error-text">Failed to load ${componentData.type}</div>
                            <button onclick="window.GMKB?.systems?.EnhancedStateManager?.removeComponent('${componentId}')" class="remove-btn">Remove</button>
                        </div>
                    `;
                    componentEl.classList.remove('component-loading');
                    componentEl.classList.add('component-error');
                }
            }
        };
    }

    // PHASE 2: Bulletproof system registration with WordPress coordination
    function registerCoreSystemsSafely() {
        console.log('üéØ PHASE 2: Starting bulletproof core systems registration with WordPress coordination...');
        
        // PHASE 2: Enhanced GMKB namespace validation
        if (!window.GMKB) {
            console.error('‚ùå PHASE 2: GMKB namespace not available in core-systems-bundle.js');
            console.error('üí° PHASE 2: This indicates WordPress dependency chain failure');
            
            // PHASE 2: Attempt graceful recovery with circuit breaker
            return attemptGracefulRecovery();
        }
        
        // PHASE 2: Validate bulletproof mode
        if (!window.gmkbPhase2Active || !window.gmkbBulletproofMode) {
            console.warn('‚ö†Ô∏è PHASE 2: GMKB not in bulletproof mode - attempting activation');
            
            if (window.GMKB._initializationState) {
                window.GMKB._initializationState.phase2Active = true;
                window.GMKB._initializationState.bulletproofMode = true;
            }
        }
        
        if (!window.GMKB.initializer) {
            console.error('‚ùå ROOT FIX: GMKB.initializer not available');
            console.error('üí° ROOT FIX: System initializer may not have loaded properly');
            
            // ROOT FIX: Wait for system initializer
            return waitForSystemInitializer();
        }
        
        if (typeof window.GMKB.initializer.register !== 'function') {
            console.error('‚ùå ROOT FIX: GMKB.initializer.register is not a function');
            console.error('üí° ROOT FIX: System initializer is incomplete');
            
            return false;
        }
        
        console.log('‚úÖ ROOT FIX: GMKB validation passed - proceeding with registration');
        
        try {
            // PHASE 2: Register Bulletproof Enhanced State Manager
            window.GMKB.initializer.register('EnhancedStateManager', () => {
                console.log('üîß PHASE 2: Creating Bulletproof Enhanced State Manager...');
                const stateManager = createEnhancedStateManager();
                stateManager.init();
                
                // PHASE 2: WordPress action hook notification
                if (window.gmkbWordPressHooks) {
                    window.gmkbWordPressHooks.dispatch('state-manager-registered', {
                        timestamp: Date.now(),
                        bulletproof: true
                    });
                }
                
                return stateManager;
            }, {
                priority: 90, // High priority
                required: true,
                dependencies: [],
                phase2: true,
                bulletproof: true,
                circuitBreaker: true
            });

            // PHASE 2: Register Bulletproof Renderer
            window.GMKB.initializer.register('Renderer', () => {
                console.log('üé® PHASE 2: Creating Bulletproof Renderer...');
                const renderer = createRenderer();
                renderer.init();
                
                // PHASE 2: WordPress action hook notification
                if (window.gmkbWordPressHooks) {
                    window.gmkbWordPressHooks.dispatch('renderer-registered', {
                        timestamp: Date.now(),
                        bulletproof: true
                    });
                }
                
                return renderer;
            }, {
                priority: 70, // Medium priority
                required: true,
                dependencies: ['EnhancedStateManager'],
                phase2: true,
                bulletproof: true,
                circuitBreaker: true
            });

            console.log('‚úÖ PHASE 2: Bulletproof core systems registered successfully with enhanced WordPress coordination');
            return true;
            
        } catch (error) {
            console.error('‚ùå ROOT FIX: Error during system registration:', error);
            return attemptFallbackRegistration();
        }
    }
    
    // ROOT FIX: Graceful recovery for missing GMKB namespace
    function attemptGracefulRecovery() {
        console.log('üîÑ ROOT FIX: Attempting graceful recovery...');
        
        // Wait for GMKB namespace to become available
        let attempts = 0;
        const maxAttempts = 50; // 5 seconds total
        
        const checkForGMKB = () => {
            attempts++;
            
            if (window.GMKB && window.GMKB.initializer) {
                console.log('‚úÖ ROOT FIX: GMKB namespace recovered after ' + attempts + ' attempts');
                return registerCoreSystemsSafely();
            }
            
            if (attempts >= maxAttempts) {
                console.error('‚ùå ROOT FIX: GMKB namespace recovery failed after ' + maxAttempts + ' attempts');
                return attemptFallbackRegistration();
            }
            
            setTimeout(checkForGMKB, 100);
        };
        
        checkForGMKB();
    }
    
    // ROOT FIX: Wait specifically for system initializer
    function waitForSystemInitializer() {
        console.log('‚è≥ ROOT FIX: Waiting for system initializer...');
        
        let attempts = 0;
        const maxAttempts = 30;
        
        const checkForInitializer = () => {
            attempts++;
            
            if (window.GMKB && window.GMKB.initializer && typeof window.GMKB.initializer.register === 'function') {
                console.log('‚úÖ ROOT FIX: System initializer ready after ' + attempts + ' attempts');
                return registerCoreSystemsSafely();
            }
            
            if (attempts >= maxAttempts) {
                console.error('‚ùå ROOT FIX: System initializer wait timeout');
                return attemptFallbackRegistration();
            }
            
            setTimeout(checkForInitializer, 100);
        };
        
        checkForInitializer();
    }
    
    // ROOT FIX: Fallback registration for emergency situations
    function attemptFallbackRegistration() {
        console.warn('‚ö†Ô∏è ROOT FIX: Using fallback registration method');
        
        try {
            // Create systems directly without GMKB coordination
            const stateManager = createEnhancedStateManager();
            stateManager.init();
            
            const renderer = createRenderer();
            renderer.init();
            
            // Expose globally for backward compatibility
            window.stateManager = stateManager;
            window.enhancedStateManager = stateManager;
            window.renderer = renderer;
            
            // Create minimal GMKB structure if it doesn't exist
            if (!window.GMKB) {
                window.GMKB = {
                    systems: {
                        EnhancedStateManager: stateManager,
                        Renderer: renderer
                    }
                };
            } else if (!window.GMKB.systems) {
                window.GMKB.systems = {
                    EnhancedStateManager: stateManager,
                    Renderer: renderer
                };
            } else {
                window.GMKB.systems.EnhancedStateManager = stateManager;
                window.GMKB.systems.Renderer = renderer;
            }
            
            console.log('‚úÖ ROOT FIX: Fallback registration completed successfully');
            
            // Dispatch ready event manually
            setTimeout(() => {
                if (window.GMKB && window.GMKB.dispatch) {
                    window.GMKB.dispatch('core:systems-ready', {
                        fallbackMode: true,
                        timestamp: Date.now()
                    });
                }
            }, 100);
            
            return true;
            
        } catch (error) {
            console.error('‚ùå ROOT FIX: Fallback registration failed:', error);
            return false;
        }
    }
    
    // ROOT FIX: Start the registration process
    registerCoreSystemsSafely();
    
    // PHASE 2: Enhanced global alias setup with WordPress coordination (NO POLLING)
    function setupGlobalAliases() {
        // PHASE 2: WordPress event-driven setup with bulletproof coordination
        if (window.GMKB && window.GMKB.subscribe) {
            window.GMKB.subscribe('core:systems-ready', (event) => {
                console.log('üîó PHASE 2: Setting up global aliases for bulletproof core systems');
                
                const stateManager = window.GMKB.systems?.EnhancedStateManager;
                const renderer = window.GMKB.systems?.Renderer;
                
                if (stateManager) {
                    window.stateManager = stateManager;
                    window.enhancedStateManager = stateManager;
                    console.log('‚úÖ PHASE 2: Bulletproof state manager exposed globally');
                }
                
                if (renderer) {
                    window.renderer = renderer;
                    console.log('‚úÖ PHASE 2: Bulletproof renderer exposed globally');
                }
                
                // PHASE 2: WordPress action hook notification
                if (window.gmkbWordPressHooks) {
                    window.gmkbWordPressHooks.dispatch('global-aliases-ready', {
                        stateManager: !!stateManager,
                        renderer: !!renderer,
                        timestamp: Date.now(),
                        bulletproof: true
                    });
                }
                
                console.log('‚úÖ PHASE 2: All bulletproof core systems exposed globally with WordPress coordination');
            });
        } else {
            // PHASE 2: Immediate setup if systems already exist
            console.warn('‚ö†Ô∏è PHASE 2: GMKB.subscribe not available, attempting immediate bulletproof setup');
            
            if (window.GMKB && window.GMKB.systems) {
                const stateManager = window.GMKB.systems.EnhancedStateManager;
                const renderer = window.GMKB.systems.Renderer;
                
                if (stateManager) {
                    window.stateManager = stateManager;
                    window.enhancedStateManager = stateManager;
                }
                
                if (renderer) {
                    window.renderer = renderer;
                }
                
                console.log('‚úÖ PHASE 2: Immediate bulletproof global setup completed');
            }
        }
    }
    
    // ROOT FIX: Set up global aliases
    setupGlobalAliases();

    // PHASE 2: Enhanced WordPress-native validation and status reporting
    if (window.gmkbCriticalData && (window.gmkbCriticalData.phase2Active || window.gmkbCriticalData.bulletproofMode)) {
        console.log('‚úÖ PHASE 2: Core systems bundle operating in bulletproof WordPress coordination mode');
        console.log('üéØ PHASE 2: Enhanced WordPress event coordination with circuit breakers active');
        console.log('üõ°Ô∏è PHASE 2: Namespace protection and integrity monitoring enabled');
    }
    
    // PHASE 2: Listen for WordPress readiness events with enhanced handling
    document.addEventListener('gmkb:wordpress-ready', (event) => {
        console.log('‚úÖ PHASE 2: Core systems bundle received enhanced WordPress ready event with bulletproof coordination');
        
        // PHASE 2: WordPress action hook dispatch
        if (window.gmkbWordPressHooks) {
            window.gmkbWordPressHooks.dispatch('core-systems-wordpress-ready', {
                timestamp: Date.now(),
                bulletproof: true,
                phase2: true
            });
        }
    });
    
    console.log('üéâ PHASE 2: Bulletproof Core Systems Bundle initialization completed with enhanced WordPress coordination');

})();
