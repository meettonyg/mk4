/**\n * @file test-race-condition-fix.js\n * @description Comprehensive test suite for the startup coordination race condition fix\n * Tests that authority-hook component renders without 'signal is aborted without reason' errors\n */\n\n// Test execution function\nwindow.testRaceConditionFix = function() {\n    console.log('🧪 Testing Race Condition Fix...');\n    \n    const results = {\n        passed: 0,\n        failed: 0,\n        warnings: 0,\n        tests: [],\n        overallStatus: 'UNKNOWN'\n    };\n    \n    function test(name, condition, critical = true) {\n        const status = condition ? 'PASS' : 'FAIL';\n        const icon = condition ? '✅' : '❌';\n        \n        console.log(`${icon} ${name}: ${status}`);\n        \n        const testResult = { name, status, critical, condition };\n        results.tests.push(testResult);\n        \n        if (condition) {\n            results.passed++;\n        } else {\n            if (critical) {\n                results.failed++;\n            } else {\n                results.warnings++;\n            }\n        }\n    }\n    \n    // Test 1: Startup Coordination Manager Available\n    test('Startup Coordination Manager Available', !!window.startupCoordinationManager);\n    test('Startup Coordination Manager has coordinate method', typeof window.startupCoordinationManager?.coordinateStartup === 'function');\n    \n    // Test 2: Coordination Events Integration\n    test('Event Bus Available', !!window.eventBus);\n    test('Enhanced State Manager has event integration', !!window.enhancedStateManager?.eventBus);\n    \n    // Test 3: Enhanced State Manager Coordination\n    test('Enhanced State Manager Available', !!window.enhancedStateManager);\n    test('Enhanced State Manager has initializeAfterSystems', typeof window.enhancedStateManager?.initializeAfterSystems === 'function');\n    test('Enhanced State Manager has hydrateStateWithMKCGData', typeof window.enhancedStateManager?.hydrateStateWithMKCGData === 'function');\n    \n    // Test 4: Dynamic Component Loader Coordination\n    test('Dynamic Component Loader Available', !!window.dynamicComponentLoader);\n    test('Dynamic Component Loader has fetchTemplate', typeof window.dynamicComponentLoader?.fetchTemplate === 'function');\n    \n    // Test 5: Initialization Manager Integration\n    test('Initialization Manager Available', !!window.initManager);\n    test('Initialization Manager has coordinatedStateRestoration', typeof window.initManager?.coordinatedStateRestoration === 'function');\n    \n    // Test 6: Core Systems Ready\n    test('State Manager Available', !!window.stateManager || !!window.enhancedStateManager);\n    test('Component Manager Available', !!window.componentManager || !!window.enhancedComponentManager);\n    test('Renderer Available', !!window.renderer);\n    \n    // Test 7: Template Fetching System\n    test('Template Cache Available', !!window.templateCache);\n    test('Template Preloader Available', !!window.templatePreloader, false);\n    \n    // Test 8: DOM Elements Present\n    test('Media Kit Preview Element', !!document.getElementById('media-kit-preview'));\n    test('Component Library Modal', !!document.getElementById('component-library-overlay'), false);\n    \n    // Test 9: MKCG Data Integration\n    test('MKCG Data Mapper Available', !!window.mkcgDataMapper, false);\n    test('Guestify Data Available', !!window.guestifyData);\n    test('MKCG Data Present', !!window.guestifyData?.mkcgData, false);\n    \n    // Test 10: Coordination Manager Status\n    if (window.startupCoordinationManager) {\n        const status = window.startupCoordinationManager.getStatus();\n        test('Coordination Manager State Valid', ['IDLE', 'COMPLETE'].includes(status.state));\n        test('No Active Operations', status.pendingOperations.template === 0 && status.pendingOperations.state === 0);\n        test('Rendering Not Blocked', !status.renderingBlocked);\n    }\n    \n    // Test 11: Event System Functional\n    if (window.eventBus) {\n        let eventReceived = false;\n        const testHandler = () => { eventReceived = true; };\n        \n        window.eventBus.on('test-event', testHandler);\n        window.eventBus.emit('test-event');\n        \n        test('Event Bus Functional', eventReceived);\n        \n        window.eventBus.off('test-event', testHandler);\n    }\n    \n    // Calculate overall status\n    if (results.failed === 0) {\n        results.overallStatus = results.warnings === 0 ? 'EXCELLENT' : 'GOOD';\n    } else if (results.failed <= 2) {\n        results.overallStatus = 'FAIR';\n    } else {\n        results.overallStatus = 'POOR';\n    }\n    \n    // Summary\n    console.log('\\n📋 Test Summary:');\n    console.log(`  ✅ Passed: ${results.passed}`);\n    console.log(`  ⚠️  Warnings: ${results.warnings}`);\n    console.log(`  ❌ Failed: ${results.failed}`);\n    console.log(`  🎯 Overall Status: ${results.overallStatus}`);\n    \n    if (results.overallStatus === 'EXCELLENT' || results.overallStatus === 'GOOD') {\n        console.log('\\n🎉 Race condition fix appears to be working!');\n        console.log('🔧 Try adding components to test rendering stability.');\n    } else {\n        console.log('\\n⚠️ Some systems may not be fully functional.');\n        console.log('🔍 Check the individual test results above.');\n    }\n    \n    return results;\n};\n\n// Component rendering stress test\nwindow.testComponentRenderingStability = async function(componentType = 'authority-hook', iterations = 5) {\n    console.log(`🧪 Testing Component Rendering Stability: ${componentType}`);\n    \n    const results = {\n        successful: 0,\n        failed: 0,\n        aborted: 0,\n        errors: [],\n        duration: 0\n    };\n    \n    const startTime = performance.now();\n    \n    for (let i = 0; i < iterations; i++) {\n        try {\n            console.log(`  Iteration ${i + 1}/${iterations}`);\n            \n            // Check if we can add components\n            if (!window.enhancedComponentManager || typeof window.enhancedComponentManager.addComponent !== 'function') {\n                throw new Error('Enhanced component manager not available');\n            }\n            \n            // Add component\n            const componentId = window.enhancedComponentManager.addComponent(componentType);\n            \n            if (componentId) {\n                results.successful++;\n                console.log(`    ✅ Component ${componentId} added successfully`);\n                \n                // Small delay to prevent overwhelming the system\n                await new Promise(resolve => setTimeout(resolve, 100));\n                \n                // Remove component to clean up\n                if (window.enhancedComponentManager.removeComponent) {\n                    window.enhancedComponentManager.removeComponent(componentId);\n                }\n            } else {\n                results.failed++;\n                console.log(`    ❌ Component addition returned no ID`);\n            }\n            \n        } catch (error) {\n            if (error.message.includes('aborted')) {\n                results.aborted++;\n                console.log(`    🚫 Component rendering aborted: ${error.message}`);\n            } else {\n                results.failed++;\n                console.log(`    ❌ Component rendering failed: ${error.message}`);\n            }\n            results.errors.push(error.message);\n        }\n    }\n    \n    results.duration = performance.now() - startTime;\n    \n    console.log('\\n📊 Rendering Stability Results:');\n    console.log(`  ✅ Successful: ${results.successful}/${iterations}`);\n    console.log(`  ❌ Failed: ${results.failed}/${iterations}`);\n    console.log(`  🚫 Aborted: ${results.aborted}/${iterations}`);\n    console.log(`  ⏱️ Duration: ${results.duration.toFixed(2)}ms`);\n    \n    if (results.aborted === 0) {\n        console.log('\\n🎉 No abort errors detected - race condition appears fixed!');\n    } else {\n        console.log('\\n⚠️ Abort errors still occurring - race condition may persist');\n    }\n    \n    return results;\n};\n\n// MKCG Data Integration Test\nwindow.testMKCGDataIntegration = function() {\n    console.log('🧪 Testing MKCG Data Integration...');\n    \n    const results = {\n        dataAvailable: false,\n        mapperFunctional: false,\n        autoPopulation: false,\n        qualityAnalysis: false,\n        coordinationEvents: false\n    };\n    \n    // Test data availability\n    if (window.guestifyData?.mkcgData) {\n        results.dataAvailable = true;\n        console.log('✅ MKCG data available');\n    } else {\n        console.log('❌ MKCG data not available');\n    }\n    \n    // Test mapper functionality\n    if (window.mkcgDataMapper && typeof window.mkcgDataMapper.mapDataToComponent === 'function') {\n        results.mapperFunctional = true;\n        console.log('✅ MKCG data mapper functional');\n        \n        try {\n            const mappingResult = window.mkcgDataMapper.mapDataToComponent('authority-hook');\n            if (mappingResult && mappingResult.props) {\n                results.autoPopulation = true;\n                console.log('✅ Auto-population working');\n                \n                if (mappingResult.metadata && mappingResult.metadata.dataQuality) {\n                    results.qualityAnalysis = true;\n                    console.log('✅ Quality analysis working');\n                }\n            }\n        } catch (error) {\n            console.log('❌ Auto-population failed:', error.message);\n        }\n    } else {\n        console.log('❌ MKCG data mapper not functional');\n    }\n    \n    // Test coordination events\n    if (window.eventBus) {\n        let eventsReceived = 0;\n        const testHandler = () => { eventsReceived++; };\n        \n        window.eventBus.on('state:mkcg-hydration-start', testHandler);\n        window.eventBus.on('state:mkcg-hydration-complete', testHandler);\n        \n        // Simulate event emission (coordination manager should emit these)\n        window.eventBus.emit('state:mkcg-hydration-start');\n        window.eventBus.emit('state:mkcg-hydration-complete');\n        \n        if (eventsReceived === 2) {\n            results.coordinationEvents = true;\n            console.log('✅ Coordination events functional');\n        } else {\n            console.log('❌ Coordination events not working');\n        }\n        \n        window.eventBus.off('state:mkcg-hydration-start', testHandler);\n        window.eventBus.off('state:mkcg-hydration-complete', testHandler);\n    }\n    \n    const successCount = Object.values(results).filter(Boolean).length;\n    console.log(`\\n📊 MKCG Integration: ${successCount}/5 features working`);\n    \n    return results;\n};\n\n// Debug commands for troubleshooting\nwindow.debugRaceCondition = {\n    status: () => {\n        console.log('🔍 Race Condition Fix Status:');\n        console.log('  Coordination Manager:', window.startupCoordinationManager?.getStatus());\n        console.log('  State Manager:', window.enhancedStateManager?.getPerformanceStats());\n        console.log('  Component Loader:', window.dynamicComponentLoader?.getStats());\n    },\n    \n    coordinate: async () => {\n        if (window.startupCoordinationManager) {\n            console.log('🚀 Running manual coordination...');\n            const result = await window.startupCoordinationManager.coordinateStartup();\n            console.log('📊 Coordination result:', result);\n            return result;\n        } else {\n            console.log('❌ Coordination manager not available');\n        }\n    },\n    \n    events: () => {\n        if (window.eventBus) {\n            console.log('🎧 Event bus available, testing events...');\n            \n            const events = [\n                'state:operation-start',\n                'state:operation-complete', \n                'template:fetch-start',\n                'template:fetch-complete',\n                'template:fetch-error',\n                'rendering:blocked',\n                'rendering:unblocked'\n            ];\n            \n            events.forEach(event => {\n                const handler = (data) => console.log(`📡 Event received: ${event}`, data);\n                window.eventBus.on(event, handler);\n                \n                setTimeout(() => {\n                    window.eventBus.off(event, handler);\n                }, 5000);\n            });\n            \n            console.log('📡 Listening for coordination events for 5 seconds...');\n        }\n    },\n    \n    help: () => {\n        console.log('🔧 Race Condition Debug Commands:');\n        console.log('  debugRaceCondition.status()    - Show system status');\n        console.log('  debugRaceCondition.coordinate() - Run manual coordination');\n        console.log('  debugRaceCondition.events()    - Monitor coordination events');\n        console.log('  testRaceConditionFix()         - Run full test suite');\n        console.log('  testComponentRenderingStability() - Test component rendering');\n        console.log('  testMKCGDataIntegration()      - Test MKCG integration');\n    }\n};\n\nconsole.log('🧪 Race Condition Fix Test Suite Loaded!');\nconsole.log('📚 Available commands:');\nconsole.log('  testRaceConditionFix()          - Run comprehensive test');\nconsole.log('  testComponentRenderingStability() - Test component rendering');\nconsole.log('  testMKCGDataIntegration()       - Test MKCG data features');\nconsole.log('  debugRaceCondition.help()       - Show debug commands');\n