/**\n * Test script for Global Settings Modal Fix\n * \n * This script validates that the root-level fix properly addresses\n * the global settings modal issues including DOM element detection,\n * initialization, and modal functionality.\n * \n * USAGE:\n * 1. Load this script in browser console\n * 2. Run: testGlobalSettingsModalFix()\n * 3. Or run individual tests: quickGlobalSettingsTest()\n */\n\n/**\n * Comprehensive test suite for global settings modal functionality\n */\nfunction testGlobalSettingsModalFix() {\n    console.log('üß™ Testing Global Settings Modal Fix...\\n');\n    \n    const results = {\n        passed: 0,\n        failed: 0,\n        tests: [],\n        totalTests: 15\n    };\n    \n    function test(name, condition, critical = false) {\n        const status = condition ? 'PASS' : 'FAIL';\n        const icon = condition ? '‚úÖ' : '‚ùå';\n        const criticalMarker = critical ? ' [CRITICAL]' : '';\n        \n        console.log(`${icon} ${name}${criticalMarker}: ${status}`);\n        \n        results.tests.push({ name, status, critical, condition });\n        \n        if (condition) {\n            results.passed++;\n        } else {\n            results.failed++;\n        }\n        \n        return condition;\n    }\n    \n    console.log('üìã Testing Global Settings System...\\n');\n    \n    // Test 1-3: DOM Elements\n    const themeBtn = document.getElementById('global-theme-btn');\n    const globalSettingsModal = document.getElementById('global-settings-modal');\n    const closeBtn = document.getElementById('close-global-settings');\n    \n    test('Theme button exists', !!themeBtn, true);\n    test('Global settings modal exists', !!globalSettingsModal, true);\n    test('Close button exists', !!closeBtn);\n    \n    // Test 4-6: Global Settings System Initialization\n    const globalSettingsSystem = window.globalSettings;\n    const systemInitialized = globalSettingsSystem && globalSettingsSystem.modal;\n    const appInitializer = window.appInitializer;\n    \n    test('Global settings system exists', !!globalSettingsSystem, true);\n    test('Global settings system initialized', systemInitialized, true);\n    test('App initializer available', !!appInitializer);\n    \n    // Test 7-8: Modal Elements Structure\n    let formElements = 0;\n    let paletteOptions = 0;\n    \n    if (globalSettingsModal) {\n        formElements = globalSettingsModal.querySelectorAll('input, select, textarea').length;\n        paletteOptions = globalSettingsModal.querySelectorAll('.palette-option').length;\n    }\n    \n    test('Form elements present', formElements > 0);\n    test('Color palette options present', paletteOptions > 0);\n    \n    // Test 9-10: Event Listeners\n    let themeBtnHasListener = false;\n    let paletteHasListeners = false;\n    \n    if (themeBtn) {\n        const events = getEventListeners(themeBtn);\n        themeBtnHasListener = events && events.click && events.click.length > 0;\n    }\n    \n    if (globalSettingsModal) {\n        const paletteEls = globalSettingsModal.querySelectorAll('.palette-option');\n        if (paletteEls.length > 0) {\n            paletteEls.forEach(el => {\n                const events = getEventListeners(el);\n                if (events && events.click && events.click.length > 0) {\n                    paletteHasListeners = true;\n                }\n            });\n        }\n    }\n    \n    test('Theme button has click listener', themeBtnHasListener, true);\n    test('Palette options have click listeners', paletteHasListeners);\n    \n    // Test 11-12: Modal Show/Hide Functionality\n    let modalShowsTest = false;\n    let modalHidesTest = false;\n    \n    if (themeBtn && globalSettingsModal && systemInitialized) {\n        try {\n            // Test showing global settings modal\n            themeBtn.click();\n            \n            // Check if modal is visible\n            setTimeout(() => {\n                const isVisible = globalSettingsModal.style.display !== 'none' && \n                                !globalSettingsModal.hasAttribute('hidden') &&\n                                (globalSettingsModal.offsetParent !== null || \n                                 globalSettingsModal.classList.contains('modal--open'));\n                modalShowsTest = isVisible;\n                \n                // Test hiding modal\n                if (isVisible && closeBtn) {\n                    closeBtn.click();\n                    setTimeout(() => {\n                        const isHidden = globalSettingsModal.style.display === 'none' || \n                                       globalSettingsModal.hasAttribute('hidden') ||\n                                       globalSettingsModal.offsetParent === null ||\n                                       !globalSettingsModal.classList.contains('modal--open');\n                        modalHidesTest = isHidden;\n                    }, 100);\n                }\n            }, 100);\n            \n        } catch (error) {\n            console.warn('Modal show/hide test error:', error.message);\n        }\n    }\n    \n    test('Global settings modal shows when button clicked', modalShowsTest, true);\n    test('Global settings modal hides when closed', modalHidesTest);\n    \n    // Test 13-15: Settings Functionality\n    let settingsGatherTest = false;\n    let settingsUpdateTest = false;\n    let stateIntegrationTest = false;\n    \n    if (globalSettingsSystem && systemInitialized) {\n        try {\n            // Test settings gathering\n            if (typeof globalSettingsSystem.gatherSettings === 'function') {\n                const settings = globalSettingsSystem.gatherSettings();\n                settingsGatherTest = typeof settings === 'object';\n            }\n            \n            // Test settings update\n            if (typeof globalSettingsSystem.updateGlobalSettings === 'function') {\n                settingsUpdateTest = true;\n            }\n            \n            // Test state manager integration\n            if (window.enhancedStateManager && typeof window.enhancedStateManager.updateGlobalSettings === 'function') {\n                stateIntegrationTest = true;\n            }\n            \n        } catch (error) {\n            console.warn('Settings functionality test error:', error.message);\n        }\n    }\n    \n    test('Settings gathering works', settingsGatherTest);\n    test('Settings update method available', settingsUpdateTest);\n    test('State manager integration working', stateIntegrationTest, true);\n    \n    // Summary\n    console.log('\\nüìä Test Results Summary:');\n    console.log(`‚úÖ Passed: ${results.passed}/${results.totalTests}`);\n    console.log(`‚ùå Failed: ${results.failed}/${results.totalTests}`);\n    \n    const criticalTests = results.tests.filter(t => t.critical);\n    const criticalPassed = criticalTests.filter(t => t.condition).length;\n    const criticalFailed = criticalTests.filter(t => !t.condition).length;\n    \n    console.log(`üö® Critical: ${criticalPassed}/${criticalTests.length} passed`);\n    \n    // Detailed Analysis\n    if (results.failed === 0) {\n        console.log('\\nüéâ ALL TESTS PASSED! Global Settings modal is working correctly.');\n        console.log('‚úÖ Root-level fix was successful.');\n        return true;\n    } else if (criticalFailed === 0) {\n        console.log('\\n‚ö†Ô∏è All critical tests passed, but some non-critical tests failed.');\n        console.log('‚úÖ Root-level fix appears to be working.');\n        \n        // Show what failed\n        const failedTests = results.tests.filter(t => !t.condition && !t.critical);\n        if (failedTests.length > 0) {\n            console.log('\\nüìã Non-critical failures:');\n            failedTests.forEach(t => console.log(`   - ${t.name}`));\n        }\n        return true;\n    } else {\n        console.log('\\n‚ùå Critical tests failed. Root-level fix needs investigation.');\n        console.log('üìã Failed critical tests:');\n        criticalTests.filter(t => !t.condition).forEach(t => {\n            console.log(`   - ${t.name}`);\n        });\n        \n        // Diagnostic information\n        console.log('\\nüîç Diagnostic Information:');\n        console.log(`Global Settings Object:`, globalSettingsSystem);\n        console.log(`Modal Element:`, globalSettingsModal);\n        console.log(`Theme Button:`, themeBtn);\n        \n        return false;\n    }\n}\n\n/**\n * Quick test function for immediate validation\n */\nfunction quickGlobalSettingsTest() {\n    console.log('‚ö° Quick Global Settings Test...\\n');\n    \n    const themeBtn = document.getElementById('global-theme-btn');\n    const globalSettingsModal = document.getElementById('global-settings-modal');\n    const globalSettingsSystem = window.globalSettings;\n    \n    console.log('üìã Quick Status Check:');\n    console.log(`Theme Button: ${themeBtn ? '‚úÖ Found' : '‚ùå Missing'}`);\n    console.log(`Global Settings Modal: ${globalSettingsModal ? '‚úÖ Found' : '‚ùå Missing'}`);\n    console.log(`Global Settings System: ${globalSettingsSystem ? '‚úÖ Found' : '‚ùå Missing'}`);\n    console.log(`System Initialized: ${globalSettingsSystem?.modal ? '‚úÖ Yes' : '‚ùå No'}`);\n    \n    if (themeBtn && globalSettingsModal) {\n        console.log('\\nüñ±Ô∏è Testing Theme Button...');\n        try {\n            themeBtn.click();\n            \n            setTimeout(() => {\n                const modalVisible = globalSettingsModal.offsetParent !== null || \n                                  globalSettingsModal.classList.contains('modal--open');\n                console.log(`Global Settings Modal Opens: ${modalVisible ? '‚úÖ Yes' : '‚ùå No'}`);\n                \n                // Close modal if it opened\n                if (modalVisible) {\n                    const closeBtn = globalSettingsModal.querySelector('.modal__close, #close-global-settings');\n                    if (closeBtn) {\n                        closeBtn.click();\n                        console.log('Global Settings Modal Closed: ‚úÖ Yes');\n                    } else {\n                        // Try ESC key\n                        const escEvent = new KeyboardEvent('keydown', { key: 'Escape', keyCode: 27 });\n                        document.dispatchEvent(escEvent);\n                        console.log('Global Settings Modal Closed via ESC: ‚úÖ Attempted');\n                    }\n                }\n            }, 200);\n            \n        } catch (error) {\n            console.log(`Theme Button Error: ‚ùå ${error.message}`);\n        }\n    }\n    \n    if (globalSettingsSystem) {\n        console.log('\\n‚öôÔ∏è Testing Settings System...');\n        try {\n            if (typeof globalSettingsSystem.gatherSettings === 'function') {\n                const settings = globalSettingsSystem.gatherSettings();\n                console.log(`Settings Gathering: ${typeof settings === 'object' ? '‚úÖ Working' : '‚ùå Failed'}`);\n            }\n            \n            if (typeof globalSettingsSystem.updateGlobalSettings === 'function') {\n                console.log('Settings Update Method: ‚úÖ Available');\n            } else {\n                console.log('Settings Update Method: ‚ùå Missing');\n            }\n            \n        } catch (error) {\n            console.log(`Settings System Error: ‚ùå ${error.message}`);\n        }\n    }\n    \n    console.log('\\n‚ö° Quick test complete!');\n}\n\n/**\n * Test global settings system status and integration\n */\nfunction testGlobalSettingsSystemStatus() {\n    console.log('üîç Checking Global Settings System Status...\\n');\n    \n    const checks = {\n        globalSettingsObject: !!window.globalSettings,\n        systemInitialized: !!window.globalSettings?.modal,\n        enhancedStateManager: !!window.enhancedStateManager,\n        updateGlobalSettingsMethod: typeof window.enhancedStateManager?.updateGlobalSettings === 'function',\n        appInitializer: !!window.appInitializer,\n        initializerStatus: window.appInitializer?.isInitialized\n    };\n    \n    Object.entries(checks).forEach(([key, value]) => {\n        const icon = value ? '‚úÖ' : '‚ùå';\n        console.log(`${icon} ${key}: ${value}`);\n    });\n    \n    if (window.globalSettings) {\n        console.log('\\nüìä Global Settings Object Details:');\n        const system = window.globalSettings;\n        console.log({\n            modal: !!system.modal,\n            openButton: !!system.openButton,\n            closeButton: !!system.closeButton,\n            form: !!system.form,\n            modalId: system.modal?.id,\n            buttonId: system.openButton?.id\n        });\n    }\n    \n    return checks;\n}\n\n/**\n * Get event listeners for an element (Chrome DevTools function)\n * Fallback if function not available\n */\nfunction getEventListeners(element) {\n    if (typeof window.getEventListeners === 'function') {\n        return window.getEventListeners(element);\n    }\n    \n    // Fallback: check for common event listener patterns\n    if (element._eventListeners || element.__eventListeners) {\n        return element._eventListeners || element.__eventListeners;\n    }\n    \n    // Return null if we can't detect listeners\n    return null;\n}\n\n// Auto-run setup\nif (typeof window !== 'undefined' && window.location) {\n    console.log('üì± Global Settings Modal Fix Test Script Loaded');\n    console.log('üß™ Run: testGlobalSettingsModalFix() for comprehensive test');\n    console.log('‚ö° Run: quickGlobalSettingsTest() for quick validation');\n    console.log('üîç Run: testGlobalSettingsSystemStatus() for system status');\n    \n    // Add to global scope for easy access\n    window.testGlobalSettingsModalFix = testGlobalSettingsModalFix;\n    window.quickGlobalSettingsTest = quickGlobalSettingsTest;\n    window.testGlobalSettingsSystemStatus = testGlobalSettingsSystemStatus;\n    \n    // Run quick test automatically if requested\n    if (window.location.search.includes('autotest=global')) {\n        setTimeout(quickGlobalSettingsTest, 1000);\n    }\n}