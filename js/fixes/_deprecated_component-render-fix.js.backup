/**
 * Component Render Fix
 * Addresses issues with component rendering, duplication, and deletion
 * 
 * Root issues being fixed:
 * 1. Components not rendering properly after duplication
 * 2. State/DOM synchronization issues
 * 3. Deletion failures when components exist in state but not DOM
 */

import { enhancedComponentRenderer } from '../core/enhanced-component-renderer.js';
import enhancedStateManager from '../core/enhanced-state-manager.js';

class ComponentRenderFix {
    constructor() {
        this.initialized = false;
        this.renderAttempts = new Map(); // Track render attempts per component
        this.maxRetries = 3;
    }
    
    /**
     * Initialize the fix
     */
    init() {
        if (this.initialized) return;
        
        console.log('ComponentRenderFix: Initializing...');
        
        // Override problematic methods
        this.patchComponentRenderer();
        this.setupRecoveryMechanisms();
        this.setupDiagnostics();
        
        this.initialized = true;
        console.log('ComponentRenderFix: Ready');
    }
    
    /**
     * Patch the component renderer to handle failures better
     */
    patchComponentRenderer() {
        // Store original methods
        const originalAddComponent = enhancedComponentRenderer.addComponent.bind(enhancedComponentRenderer);
        const originalBatchAdd = enhancedComponentRenderer.batchAdd.bind(enhancedComponentRenderer);
        
        // Enhanced addComponent with retry logic
        enhancedComponentRenderer.addComponent = async function(componentId, component) {
            const attempts = this.renderAttempts.get(componentId) || 0;
            
            try {
                const element = await originalAddComponent(componentId, component);
                
                if (!element && attempts < this.maxRetries) {
                    console.warn(`Render failed for ${componentId}, attempt ${attempts + 1}/${this.maxRetries}`);
                    this.renderAttempts.set(componentId, attempts + 1);
                    
                    // Wait before retry
                    await new Promise(resolve => setTimeout(resolve, 100 * (attempts + 1)));
                    
                    // Try with fallback rendering
                    return await this.fallbackRender(componentId, component);
                }
                
                // Success - clear attempts
                this.renderAttempts.delete(componentId);
                return element;
                
            } catch (error) {
                console.error(`Failed to render component ${componentId}:`, error);
                
                if (attempts < this.maxRetries) {
                    this.renderAttempts.set(componentId, attempts + 1);
                    return await this.fallbackRender(componentId, component);
                }
                
                return null;
            }
        }.bind(this);
        
        // Enhanced batchAdd with better error recovery
        enhancedComponentRenderer.batchAdd = async function(addChanges, fragment) {
            const results = [];
            
            // Process components sequentially for better reliability
            for (const change of addChanges) {
                try {
                    const element = await enhancedComponentRenderer.addComponent(change.id, change.component);
                    if (element) {
                        results.push({ element, change });
                    } else {
                        // Try direct DOM insertion as last resort
                        const fallbackElement = await this.createFallbackElement(change.id, change.component);
                        if (fallbackElement) {
                            results.push({ element: fallbackElement, change });
                        }
                    }
                } catch (error) {
                    console.error(`Failed to add component ${change.id}:`, error);
                }
            }
            
            // Sort and add to fragment
            results
                .sort((a, b) => a.change.component.order - b.change.component.order)
                .forEach(({ element }) => {
                    fragment.appendChild(element);
                });
            
            // Update DOM
            if (fragment.childNodes.length > 0) {
                enhancedComponentRenderer.previewContainer.appendChild(fragment);
                
                // Setup interactivity for all added elements
                const addedNodes = Array.from(fragment.childNodes);
                addedNodes.forEach(node => {
                    if (node.nodeType === 1) {
                        enhancedComponentRenderer.setupComponentInteractivity(node);
                        enhancedComponentRenderer.trackContentEditable(node);
                        node.classList.add('component-added');
                    }
                });
            }
            
            return results.length;
        }.bind(this);
    }
    
    /**
     * Fallback render method when server rendering fails
     */
    async fallbackRender(componentId, component) {
        console.log(`Using fallback render for ${componentId}`);
        
        const templates = {
            hero: this.getHeroTemplate,
            biography: this.getBiographyTemplate,
            stats: this.getStatsTemplate,
            'call-to-action': this.getCtaTemplate,
            topics: this.getTopicsTemplate,
            'social-links': this.getSocialTemplate
        };
        
        const templateFn = templates[component.type];
        if (!templateFn) {
            console.error(`No fallback template for component type: ${component.type}`);
            return null;
        }
        
        const html = templateFn(componentId, component.data || {});
        
        // Create element from HTML
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = html;
        const element = tempDiv.firstElementChild;
        
        if (!element) return null;
        
        // Ensure proper attributes
        element.setAttribute('data-component-id', componentId);
        element.setAttribute('data-component-type', component.type);
        element.classList.add('editable-element');
        
        // Setup interactivity
        enhancedComponentRenderer.setupComponentInteractivity(element);
        enhancedComponentRenderer.trackContentEditable(element);
        
        return element;
    }
    
    /**
     * Create a fallback element directly
     */
    async createFallbackElement(componentId, component) {
        const element = await this.fallbackRender(componentId, component);
        if (element) {
            // Find correct position
            const insertPoint = enhancedComponentRenderer.findInsertionPoint(component.order);
            enhancedComponentRenderer.previewContainer.insertBefore(element, insertPoint);
            return element;
        }
        return null;
    }
    
    /**
     * Setup recovery mechanisms
     */
    setupRecoveryMechanisms() {
        // Periodic state/DOM sync check
        setInterval(() => {
            this.syncStateAndDOM();
        }, 5000);
        
        // Handle component action failures
        document.addEventListener('component-action-failed', (e) => {
            this.handleActionFailure(e.detail);
        });
        
        // Recovery command
        window.recoverComponents = () => this.recoverMissingComponents();
    }
    
    /**
     * Sync state and DOM
     */
    syncStateAndDOM() {
        const state = enhancedStateManager.getState();
        const stateIds = new Set(Object.keys(state.components || {}));
        
        // Find components in state but not in DOM
        const missingInDom = [];
        stateIds.forEach(id => {
            if (!document.querySelector(`[data-component-id="${id}"]`)) {
                missingInDom.push(id);
            }
        });
        
        // Find components in DOM but not in state
        const orphanedInDom = [];
        document.querySelectorAll('[data-component-id]').forEach(element => {
            const id = element.getAttribute('data-component-id');
            if (!stateIds.has(id)) {
                orphanedInDom.push(id);
            }
        });
        
        if (missingInDom.length > 0 || orphanedInDom.length > 0) {
            console.warn('State/DOM mismatch detected:', {
                missingInDom,
                orphanedInDom
            });
            
            // Auto-fix if enabled
            if (window.mediaKitFeatures?.AUTO_FIX_SYNC) {
                this.autoFixSync(missingInDom, orphanedInDom);
            }
        }
    }
    
    /**
     * Auto-fix state/DOM sync issues
     */
    autoFixSync(missingInDom, orphanedInDom) {
        // Remove orphaned DOM elements
        orphanedInDom.forEach(id => {
            const element = document.querySelector(`[data-component-id="${id}"]`);
            if (element) {
                console.log(`Removing orphaned DOM element: ${id}`);
                element.remove();
            }
        });
        
        // Try to render missing components
        missingInDom.forEach(async id => {
            const component = enhancedStateManager.getComponent(id);
            if (component) {
                console.log(`Attempting to recover missing component: ${id}`);
                await this.fallbackRender(id, component);
            }
        });
    }
    
    /**
     * Recover missing components
     */
    async recoverMissingComponents() {
        console.log('Starting component recovery...');
        
        const state = enhancedStateManager.getState();
        const components = Object.values(state.components || {});
        let recovered = 0;
        
        for (const component of components) {
            if (!document.querySelector(`[data-component-id="${component.id}"]`)) {
                console.log(`Recovering component: ${component.id}`);
                const element = await this.fallbackRender(component.id, component);
                if (element) {
                    const insertPoint = enhancedComponentRenderer.findInsertionPoint(component.order);
                    enhancedComponentRenderer.previewContainer.insertBefore(element, insertPoint);
                    recovered++;
                }
            }
        }
        
        console.log(`Recovery complete. Recovered ${recovered} components.`);
        return recovered;
    }
    
    /**
     * Handle action failures
     */
    handleActionFailure(detail) {
        const { action, componentId, error } = detail;
        
        console.error(`Action ${action} failed for component ${componentId}:`, error);
        
        // Specific recovery based on action
        switch (action) {
            case 'delete':
                // Force remove from both state and DOM
                this.forceRemoveComponent(componentId);
                break;
                
            case 'duplicate':
                // Clean up any partial duplication
                this.cleanupFailedDuplication(componentId);
                break;
        }
    }
    
    /**
     * Force remove a component
     */
    forceRemoveComponent(componentId) {
        // Remove from DOM
        const element = document.querySelector(`[data-component-id="${componentId}"]`);
        if (element) {
            element.remove();
        }
        
        // Remove from state
        if (enhancedStateManager.getComponent(componentId)) {
            enhancedStateManager.removeComponent(componentId);
        }
        
        console.log(`Force removed component: ${componentId}`);
    }
    
    /**
     * Setup diagnostics
     */
    setupDiagnostics() {
        window.mkDiag = {
            checkSync: () => this.syncStateAndDOM(),
            recover: () => this.recoverMissingComponents(),
            state: () => {
                const state = enhancedStateManager.getState();
                const domCount = document.querySelectorAll('[data-component-id]').length;
                const stateCount = Object.keys(state.components || {}).length;
                
                console.log('Diagnostics:', {
                    componentsInState: stateCount,
                    componentsInDOM: domCount,
                    synced: stateCount === domCount,
                    renderQueue: enhancedComponentRenderer.renderQueue.size,
                    isRendering: enhancedComponentRenderer.isRendering
                });
                
                return stateCount === domCount;
            },
            forceRender: () => {
                enhancedComponentRenderer.forceRender();
            }
        };
        
        console.log('Diagnostics available via window.mkDiag');
    }
    
    // Template methods
    getHeroTemplate(componentId, data) {
        return `
            <div class="hero editable-element" data-element="hero" data-component="hero" data-component-id="${componentId}" data-component-type="hero">
                <div class="element-controls">
                    <button class="control-btn" title="Move Up">↑</button>
                    <button class="control-btn" title="Move Down">↓</button>
                    <button class="control-btn" title="Duplicate">⧉</button>
                    <button class="control-btn" title="Delete">×</button>
                </div>
                <div class="hero__avatar">
                    <img src="${data.image || 'data:image/svg+xml,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 100 100\'%3E%3Ctext y=\'50\' font-size=\'50\' text-anchor=\'middle\' x=\'50\' fill=\'%2364748b\'%3E${(data.name || 'Name').substring(0, 2).toUpperCase()}%3C/text%3E%3C/svg%3E'}" alt="Profile">
                </div>
                <h1 class="hero__name" contenteditable="true" data-setting="name">${data.name || 'Your Name'}</h1>
                <div class="hero__title" contenteditable="true" data-setting="title">${data.title || 'Your Title'}</div>
                <p class="hero__bio" contenteditable="true" data-setting="bio">${data.bio || 'Your bio here...'}</p>
            </div>
        `;
    }
    
    getBiographyTemplate(componentId, data) {
        return `
            <div class="biography editable-element" data-element="biography" data-component="biography" data-component-id="${componentId}" data-component-type="biography">
                <div class="element-controls">
                    <button class="control-btn" title="Move Up">↑</button>
                    <button class="control-btn" title="Move Down">↓</button>
                    <button class="control-btn" title="Duplicate">⧉</button>
                    <button class="control-btn" title="Delete">×</button>
                </div>
                <h2 class="biography__title" contenteditable="true" data-setting="title">${data.title || 'About Me'}</h2>
                <div class="biography__content" contenteditable="true" data-setting="content">${data.content || 'Tell your story...'}</div>
            </div>
        `;
    }
    
    getStatsTemplate(componentId, data) {
        return `
            <div class="stats editable-element" data-element="stats" data-component="stats" data-component-id="${componentId}" data-component-type="stats">
                <div class="element-controls">
                    <button class="control-btn" title="Move Up">↑</button>
                    <button class="control-btn" title="Move Down">↓</button>
                    <button class="control-btn" title="Duplicate">⧉</button>
                    <button class="control-btn" title="Delete">×</button>
                </div>
                <div class="stats__grid">
                    <div class="stats__item">
                        <div class="stats__number" contenteditable="true" data-setting="stat1_value">${data.stat1_value || '100+'}</div>
                        <div class="stats__label" contenteditable="true" data-setting="stat1_label">${data.stat1_label || 'Speaking Events'}</div>
                    </div>
                    <div class="stats__item">
                        <div class="stats__number" contenteditable="true" data-setting="stat2_value">${data.stat2_value || '50K+'}</div>
                        <div class="stats__label" contenteditable="true" data-setting="stat2_label">${data.stat2_label || 'Audience Reached'}</div>
                    </div>
                    <div class="stats__item">
                        <div class="stats__number" contenteditable="true" data-setting="stat3_value">${data.stat3_value || '10+'}</div>
                        <div class="stats__label" contenteditable="true" data-setting="stat3_label">${data.stat3_label || 'Years Experience'}</div>
                    </div>
                </div>
            </div>
        `;
    }
    
    getCtaTemplate(componentId, data) {
        return `
            <div class="call-to-action editable-element" data-element="call-to-action" data-component="call-to-action" data-component-id="${componentId}" data-component-type="call-to-action">
                <div class="element-controls">
                    <button class="control-btn" title="Move Up">↑</button>
                    <button class="control-btn" title="Move Down">↓</button>
                    <button class="control-btn" title="Duplicate">⧉</button>
                    <button class="control-btn" title="Delete">×</button>
                </div>
                <h2 class="call-to-action__title" contenteditable="true" data-setting="title">${data.title || 'Ready to Work Together?'}</h2>
                <p class="call-to-action__description" contenteditable="true" data-setting="description">${data.description || 'Let\'s discuss how I can help your audience.'}</p>
                <a href="${data.buttonUrl || '#'}" class="call-to-action__button">
                    <span contenteditable="true" data-setting="buttonText">${data.buttonText || 'Get in Touch'}</span>
                </a>
            </div>
        `;
    }
    
    getTopicsTemplate(componentId, data) {
        const topics = data.topics || ['Leadership', 'Innovation', 'Technology'];
        return `
            <div class="topics editable-element" data-element="topics" data-component="topics" data-component-id="${componentId}" data-component-type="topics">
                <div class="element-controls">
                    <button class="control-btn" title="Move Up">↑</button>
                    <button class="control-btn" title="Move Down">↓</button>
                    <button class="control-btn" title="Duplicate">⧉</button>
                    <button class="control-btn" title="Delete">×</button>
                </div>
                <h2 class="topics__title" contenteditable="true" data-setting="title">${data.title || 'Speaking Topics'}</h2>
                <div class="topics__list">
                    ${topics.map((topic, i) => `
                        <div class="topics__item" contenteditable="true" data-setting="topic${i + 1}">${topic}</div>
                    `).join('')}
                </div>
            </div>
        `;
    }
    
    getSocialTemplate(componentId, data) {
        return `
            <div class="social-links editable-element" data-element="social-links" data-component="social-links" data-component-id="${componentId}" data-component-type="social-links">
                <div class="element-controls">
                    <button class="control-btn" title="Move Up">↑</button>
                    <button class="control-btn" title="Move Down">↓</button>
                    <button class="control-btn" title="Duplicate">⧉</button>
                    <button class="control-btn" title="Delete">×</button>
                </div>
                <h2 class="social-links__title" contenteditable="true" data-setting="title">${data.title || 'Connect With Me'}</h2>
                <div class="social-links__grid">
                    <a href="${data.twitter || '#'}" class="social-links__item">Twitter</a>
                    <a href="${data.linkedin || '#'}" class="social-links__item">LinkedIn</a>
                    <a href="${data.website || '#'}" class="social-links__item">Website</a>
                </div>
            </div>
        `;
    }
}

// Create and initialize the fix
export const componentRenderFix = new ComponentRenderFix();

// Auto-initialize when module loads
componentRenderFix.init();

// Make it globally available for debugging
window.componentRenderFix = componentRenderFix;
