/**
 * @file component-controls-manager.js
 * @description ROOT FIX: Dynamic Component Controls Manager
 * @version 1.0.0
 * 
 * ARCHITECTURAL SOLUTION:
 * ‚úÖ Separates control generation from component rendering
 * ‚úÖ Uses createElement API instead of innerHTML manipulation
 * ‚úÖ Implements event-driven control lifecycle management
 * ‚úÖ Prevents duplicate controls with proper state tracking
 * ‚úÖ Follows project checklist for separation of concerns
 */

(function() {
    'use strict';

    /**
     * ComponentControlsManager - Dynamic control generation without HTML strings
     * Addresses root cause: eliminates innerHTML control injection
     */
    class ComponentControlsManager {
        constructor() {
            this.controlsRegistry = new Map(); // Track attached controls
            this.controlsConfig = this.getControlsConfiguration();
            this.eventListeners = new Map(); // Track event listeners for cleanup
            
            console.log('üéÆ ComponentControlsManager: Initialized with dynamic control generation');
        }

        /**
         * ROOT FIX: Get controls configuration (no HTML strings)
         * @returns {Array} Control configuration objects
         */
        getControlsConfiguration() {
            return [
                {
                    id: 'edit',
                    action: 'edit',
                    title: 'Edit Component',
                    icon: this.createEditIcon(),
                    className: 'component-control component-control--edit',
                    priority: 1
                },
                {
                    id: 'move-up',
                    action: 'move-up',
                    title: 'Move Up',
                    icon: this.createMoveUpIcon(),
                    className: 'component-control component-control--move-up',
                    priority: 2
                },
                {
                    id: 'move-down',
                    action: 'move-down',
                    title: 'Move Down',
                    icon: this.createMoveDownIcon(),
                    className: 'component-control component-control--move-down',
                    priority: 3
                },
                {
                    id: 'duplicate',
                    action: 'duplicate',
                    title: 'Duplicate Component',
                    icon: this.createDuplicateIcon(),
                    className: 'component-control component-control--duplicate',
                    priority: 4
                },
                {
                    id: 'delete',
                    action: 'delete',
                    title: 'Delete Component',
                    icon: this.createDeleteIcon(),
                    className: 'component-control component-control--delete',
                    priority: 5
                }
            ];
        }

        /**
         * ROOT FIX: Create SVG icons using createElement (no innerHTML)
         */
        createEditIcon() {
            const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
            svg.setAttribute('width', '14');
            svg.setAttribute('height', '14');
            svg.setAttribute('viewBox', '0 0 24 24');
            svg.setAttribute('fill', 'none');
            svg.setAttribute('stroke', 'currentColor');
            svg.setAttribute('stroke-width', '2');

            const path1 = document.createElementNS('http://www.w3.org/2000/svg', 'path');
            path1.setAttribute('d', 'M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7');
            svg.appendChild(path1);

            const path2 = document.createElementNS('http://www.w3.org/2000/svg', 'path');
            path2.setAttribute('d', 'm18.5 2.5 3 3L12 15l-4 1 1-4 9.5-9.5z');
            svg.appendChild(path2);

            return svg;
        }

        createMoveUpIcon() {
            const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
            svg.setAttribute('width', '12');
            svg.setAttribute('height', '12');
            svg.setAttribute('viewBox', '0 0 24 24');
            svg.setAttribute('fill', 'none');
            svg.setAttribute('stroke', 'currentColor');
            svg.setAttribute('stroke-width', '2');

            const polyline = document.createElementNS('http://www.w3.org/2000/svg', 'polyline');
            polyline.setAttribute('points', '18,15 12,9 6,15');
            svg.appendChild(polyline);

            return svg;
        }

        createMoveDownIcon() {
            const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
            svg.setAttribute('width', '12');
            svg.setAttribute('height', '12');
            svg.setAttribute('viewBox', '0 0 24 24');
            svg.setAttribute('fill', 'none');
            svg.setAttribute('stroke', 'currentColor');
            svg.setAttribute('stroke-width', '2');

            const polyline = document.createElementNS('http://www.w3.org/2000/svg', 'polyline');
            polyline.setAttribute('points', '6,9 12,15 18,9');
            svg.appendChild(polyline);

            return svg;
        }

        createDuplicateIcon() {
            const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
            svg.setAttribute('width', '14');
            svg.setAttribute('height', '14');
            svg.setAttribute('viewBox', '0 0 24 24');
            svg.setAttribute('fill', 'none');
            svg.setAttribute('stroke', 'currentColor');
            svg.setAttribute('stroke-width', '2');

            const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
            rect.setAttribute('x', '9');
            rect.setAttribute('y', '9');
            rect.setAttribute('width', '13');
            rect.setAttribute('height', '13');
            rect.setAttribute('rx', '2');
            rect.setAttribute('ry', '2');
            svg.appendChild(rect);

            const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
            path.setAttribute('d', 'M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1');
            svg.appendChild(path);

            return svg;
        }

        createDeleteIcon() {
            const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
            svg.setAttribute('width', '14');
            svg.setAttribute('height', '14');
            svg.setAttribute('viewBox', '0 0 24 24');
            svg.setAttribute('fill', 'none');
            svg.setAttribute('stroke', 'currentColor');
            svg.setAttribute('stroke-width', '2');

            const polyline = document.createElementNS('http://www.w3.org/2000/svg', 'polyline');
            polyline.setAttribute('points', '3,6 5,6 21,6');
            svg.appendChild(polyline);

            const path1 = document.createElementNS('http://www.w3.org/2000/svg', 'path');
            path1.setAttribute('d', 'm19,6v14a2,2 0 0,1 -2,2H7a2,2 0 0,1 -2,-2V6m3,0V4a2,2 0 0,1 2,-2h4a2,2 0 0,1 2,2v2');
            svg.appendChild(path1);

            const line1 = document.createElementNS('http://www.w3.org/2000/svg', 'line');
            line1.setAttribute('x1', '10');
            line1.setAttribute('y1', '11');
            line1.setAttribute('x2', '10');
            line1.setAttribute('y2', '17');
            svg.appendChild(line1);

            const line2 = document.createElementNS('http://www.w3.org/2000/svg', 'line');
            line2.setAttribute('x1', '14');
            line2.setAttribute('y1', '11');
            line2.setAttribute('x2', '14');
            line2.setAttribute('y2', '17');
            svg.appendChild(line2);

            return svg;
        }

        /**
         * ROOT FIX: Main method to attach controls dynamically (replaces innerHTML approach)
         * @param {HTMLElement} componentElement - Component DOM element
         * @param {string} componentId - Component ID
         * @returns {boolean} Success status
         */
        attachControlsToComponent(componentElement, componentId) {
            // ROOT FIX: Prevent duplicate control attachment
            if (this.hasControlsAttached(componentElement, componentId)) {
                console.log(`‚ÑπÔ∏è ComponentControlsManager: Controls already attached to ${componentId}, skipping`);
                return false;
            }

            try {
                // ROOT FIX: Create controls container using createElement
                const controlsOverlay = this.createControlsContainer();
                
                // ROOT FIX: Create individual control buttons dynamically
                const toolbar = this.createControlsToolbar(componentId);
                controlsOverlay.appendChild(toolbar);

                // ROOT FIX: Insert controls at beginning of component (no innerHTML)
                componentElement.insertBefore(controlsOverlay, componentElement.firstChild);

                // ROOT FIX: Attach event listeners with proper cleanup tracking
                this.attachControlEventListeners(controlsOverlay, componentId);

                // ROOT FIX: Attach hover behavior for control visibility
                this.attachHoverBehavior(componentElement, controlsOverlay);

                // ROOT FIX: Register controls for tracking and cleanup
                this.registerControls(componentElement, componentId, controlsOverlay);

                console.log(`‚úÖ ComponentControlsManager: Dynamic controls attached to ${componentId}`);
                return true;

            } catch (error) {
                console.error(`‚ùå ComponentControlsManager: Error attaching controls to ${componentId}:`, error);
                return false;
            }
        }

        /**
         * ROOT FIX: Check if controls are already attached (prevents duplicates)
         * @param {HTMLElement} componentElement - Component DOM element
         * @param {string} componentId - Component ID
         * @returns {boolean} Whether controls are already attached
         */
        hasControlsAttached(componentElement, componentId) {
            // Check registry
            if (this.controlsRegistry.has(componentId)) {
                return true;
            }

            // Check data attribute
            if (componentElement.hasAttribute('data-controls-attached')) {
                return true;
            }

            // Check for existing controls in DOM
            const existingControls = componentElement.querySelector('.component-controls');
            if (existingControls) {
                return true;
            }

            return false;
        }

        /**
         * ROOT FIX: Create controls container using createElement (no innerHTML)
         * @returns {HTMLElement} Controls overlay element
         */
        createControlsContainer() {
            const controlsOverlay = document.createElement('div');
            controlsOverlay.className = 'component-controls';
            controlsOverlay.setAttribute('data-dynamic-controls', 'true');
            
            // Add CSS for positioning and visibility
            controlsOverlay.style.cssText = `
                position: absolute;
                top: 8px;
                right: 8px;
                z-index: 100;
                opacity: 0;
                visibility: hidden;
                transition: opacity 0.2s ease, visibility 0.2s ease;
                pointer-events: none;
            `;

            return controlsOverlay;
        }

        /**
         * ROOT FIX: Create controls toolbar with dynamic button generation
         * @param {string} componentId - Component ID
         * @returns {HTMLElement} Toolbar element
         */
        createControlsToolbar(componentId) {
            const toolbar = document.createElement('div');
            toolbar.className = 'component-controls__toolbar';
            toolbar.style.cssText = `
                display: flex;
                align-items: center;
                gap: 4px;
                background: rgba(255, 255, 255, 0.95);
                border: 1px solid rgba(0, 0, 0, 0.1);
                border-radius: 6px;
                padding: 4px;
                box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
                backdrop-filter: blur(8px);
            `;

            // ROOT FIX: Create control buttons dynamically
            const editButton = this.createControlButton(this.controlsConfig[0], componentId);
            toolbar.appendChild(editButton);

            // Move controls group
            const moveGroup = this.createMoveControlsGroup(componentId);
            toolbar.appendChild(moveGroup);

            // Other controls
            const duplicateButton = this.createControlButton(this.controlsConfig[3], componentId);
            const deleteButton = this.createControlButton(this.controlsConfig[4], componentId);
            
            toolbar.appendChild(duplicateButton);
            toolbar.appendChild(deleteButton);

            return toolbar;
        }

        /**
         * ROOT FIX: Create move controls group
         * @param {string} componentId - Component ID
         * @returns {HTMLElement} Move controls group
         */
        createMoveControlsGroup(componentId) {
            const group = document.createElement('div');
            group.className = 'component-control-group';
            group.style.cssText = `
                display: flex;
                flex-direction: column;
                gap: 2px;
            `;

            const moveUpButton = this.createControlButton(this.controlsConfig[1], componentId);
            const moveDownButton = this.createControlButton(this.controlsConfig[2], componentId);

            // Smaller buttons for move controls
            moveUpButton.style.padding = '2px';
            moveDownButton.style.padding = '2px';

            group.appendChild(moveUpButton);
            group.appendChild(moveDownButton);

            return group;
        }

        /**
         * ROOT FIX: Create individual control button using createElement
         * @param {Object} config - Button configuration
         * @param {string} componentId - Component ID
         * @returns {HTMLElement} Button element
         */
        createControlButton(config, componentId) {
            const button = document.createElement('button');
            button.type = 'button';
            button.className = config.className;
            button.title = config.title;
            button.setAttribute('data-action', config.action);
            button.setAttribute('data-component-id', componentId);
            
            // Button styling
            button.style.cssText = `
                display: flex;
                align-items: center;
                justify-content: center;
                width: 24px;
                height: 24px;
                padding: 4px;
                background: transparent;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                color: #6b7280;
                transition: all 0.15s ease;
                pointer-events: all;
            `;

            // Add icon (no innerHTML)
            button.appendChild(config.icon);

            // Hover styles via event listeners (no CSS-in-JS)
            button.addEventListener('mouseenter', () => {
                button.style.background = '#f3f4f6';
                button.style.color = '#374151';
            });

            button.addEventListener('mouseleave', () => {
                button.style.background = 'transparent';
                button.style.color = '#6b7280';
            });

            return button;
        }

        /**
         * ROOT FIX: Attach control event listeners with proper tracking
         * @param {HTMLElement} controlsOverlay - Controls container
         * @param {string} componentId - Component ID
         */
        attachControlEventListeners(controlsOverlay, componentId) {
            const clickHandler = (e) => {
                e.stopPropagation();
                e.preventDefault();

                const button = e.target.closest('[data-action]');
                if (!button) return;

                const action = button.dataset.action;
                
                // Disable button temporarily to prevent double-clicks
                button.disabled = true;
                setTimeout(() => {
                    button.disabled = false;
                }, 500);

                // ROOT FIX: Dispatch control action via event system
                this.dispatchControlAction(componentId, action, e);
            };

            // Attach event listener
            controlsOverlay.addEventListener('click', clickHandler);

            // ROOT FIX: Track event listener for cleanup
            if (!this.eventListeners.has(componentId)) {
                this.eventListeners.set(componentId, []);
            }
            this.eventListeners.get(componentId).push({
                element: controlsOverlay,
                event: 'click',
                handler: clickHandler
            });
        }

        /**
         * ROOT FIX: Attach hover behavior for control visibility
         * @param {HTMLElement} componentElement - Component element
         * @param {HTMLElement} controlsOverlay - Controls overlay
         */
        attachHoverBehavior(componentElement, controlsOverlay) {
            const showControls = () => {
                controlsOverlay.style.opacity = '1';
                controlsOverlay.style.visibility = 'visible';
            };

            const hideControls = () => {
                controlsOverlay.style.opacity = '0';
                controlsOverlay.style.visibility = 'hidden';
            };

            componentElement.addEventListener('mouseenter', showControls);
            componentElement.addEventListener('mouseleave', hideControls);

            // ROOT FIX: Track hover event listeners for cleanup
            const componentId = componentElement.getAttribute('data-component-id');
            if (!this.eventListeners.has(componentId)) {
                this.eventListeners.set(componentId, []);
            }
            
            this.eventListeners.get(componentId).push(
                { element: componentElement, event: 'mouseenter', handler: showControls },
                { element: componentElement, event: 'mouseleave', handler: hideControls }
            );
        }

        /**
         * ROOT FIX: Register controls for tracking and cleanup
         * @param {HTMLElement} componentElement - Component element
         * @param {string} componentId - Component ID
         * @param {HTMLElement} controlsOverlay - Controls overlay
         */
        registerControls(componentElement, componentId, controlsOverlay) {
            // Mark component as having controls attached
            componentElement.setAttribute('data-controls-attached', 'true');
            componentElement.setAttribute('data-controls-manager', 'dynamic');

            // Register in tracking map
            this.controlsRegistry.set(componentId, {
                componentElement,
                controlsOverlay,
                attachedAt: Date.now(),
                controlsCount: this.controlsConfig.length
            });

            console.log(`üìã ComponentControlsManager: Registered controls for ${componentId}`);
        }

        /**
         * ROOT FIX: Dispatch control action via event system (no direct component manager calls)
         * @param {string} componentId - Component ID
         * @param {string} action - Control action
         * @param {Event} originalEvent - Original click event
         */
        dispatchControlAction(componentId, action, originalEvent) {
            console.log(`üéÆ ComponentControlsManager: Dispatching ${action} for ${componentId}`);

            // ROOT FIX: Use GMKB event system for loose coupling
            if (window.GMKB && typeof window.GMKB.dispatch === 'function') {
                window.GMKB.dispatch('gmkb:component-control-action', {
                    componentId,
                    action,
                    timestamp: Date.now(),
                    source: 'dynamic-controls',
                    originalEvent
                });
            }

            // ROOT FIX: Fallback to direct method calls if GMKB not available
            if (window.ComponentManager) {
                switch (action) {
                    case 'edit':
                        if (typeof window.ComponentManager.editComponent === 'function') {
                            window.ComponentManager.editComponent(componentId);
                        }
                        break;
                    case 'move-up':
                        if (typeof window.ComponentManager.moveComponentUp === 'function') {
                            window.ComponentManager.moveComponentUp(componentId);
                        }
                        break;
                    case 'move-down':
                        if (typeof window.ComponentManager.moveComponentDown === 'function') {
                            window.ComponentManager.moveComponentDown(componentId);
                        }
                        break;
                    case 'duplicate':
                        if (typeof window.ComponentManager.duplicateComponent === 'function') {
                            window.ComponentManager.duplicateComponent(componentId);
                        }
                        break;
                    case 'delete':
                        if (typeof window.ComponentManager.deleteComponent === 'function') {
                            window.ComponentManager.deleteComponent(componentId);
                        }
                        break;
                }
            }
        }

        /**
         * ROOT FIX: Remove controls from component (cleanup)
         * @param {string} componentId - Component ID
         * @returns {boolean} Success status
         */
        removeControlsFromComponent(componentId) {
            const registration = this.controlsRegistry.get(componentId);
            if (!registration) {
                console.log(`‚ÑπÔ∏è ComponentControlsManager: No controls found for ${componentId}`);
                return false;
            }

            try {
                // Remove controls from DOM
                if (registration.controlsOverlay && registration.controlsOverlay.parentNode) {
                    registration.controlsOverlay.remove();
                }

                // Clean up event listeners
                if (this.eventListeners.has(componentId)) {
                    const listeners = this.eventListeners.get(componentId);
                    listeners.forEach(({ element, event, handler }) => {
                        element.removeEventListener(event, handler);
                    });
                    this.eventListeners.delete(componentId);
                }

                // Remove attributes
                if (registration.componentElement) {
                    registration.componentElement.removeAttribute('data-controls-attached');
                    registration.componentElement.removeAttribute('data-controls-manager');
                }

                // Remove from registry
                this.controlsRegistry.delete(componentId);

                console.log(`‚úÖ ComponentControlsManager: Removed controls from ${componentId}`);
                return true;

            } catch (error) {
                console.error(`‚ùå ComponentControlsManager: Error removing controls from ${componentId}:`, error);
                return false;
            }
        }

        /**
         * ROOT FIX: Update controls for component (refresh)
         * @param {string} componentId - Component ID
         * @returns {boolean} Success status
         */
        updateControlsForComponent(componentId) {
            const registration = this.controlsRegistry.get(componentId);
            if (!registration) {
                console.log(`‚ÑπÔ∏è ComponentControlsManager: No controls to update for ${componentId}`);
                return false;
            }

            // Remove and re-attach controls
            this.removeControlsFromComponent(componentId);
            return this.attachControlsToComponent(registration.componentElement, componentId);
        }

        /**
         * ROOT FIX: Get controls manager statistics
         * @returns {Object} Statistics object
         */
        getStats() {
            return {
                componentsWithControls: this.controlsRegistry.size,
                totalEventListeners: Array.from(this.eventListeners.values()).reduce((total, listeners) => total + listeners.length, 0),
                controlsConfig: this.controlsConfig.length,
                architecture: 'dynamic-createElement-based'
            };
        }

        /**
         * ROOT FIX: Debug controls manager state
         */
        debug() {
            console.group('%cüéÆ ComponentControlsManager Debug', 'font-size: 14px; font-weight: bold; color: #8b5cf6');
            
            console.log('Controls Registry:', Array.from(this.controlsRegistry.entries()).map(([id, registration]) => ({
                componentId: id,
                hasControlsOverlay: !!registration.controlsOverlay,
                hasComponentElement: !!registration.componentElement,
                attachedAt: new Date(registration.attachedAt).toISOString(),
                controlsCount: registration.controlsCount
            })));

            console.log('Event Listeners:', Array.from(this.eventListeners.entries()).map(([id, listeners]) => ({
                componentId: id,
                listenerCount: listeners.length
            })));

            console.log('Statistics:', this.getStats());
            
            console.groupEnd();
        }

        /**
         * ROOT FIX: Cleanup all controls (for shutdown)
         */
        cleanup() {
            console.log('üßπ ComponentControlsManager: Cleaning up all controls...');

            // Remove all controls
            const componentIds = Array.from(this.controlsRegistry.keys());
            componentIds.forEach(componentId => {
                this.removeControlsFromComponent(componentId);
            });

            // Clear registries
            this.controlsRegistry.clear();
            this.eventListeners.clear();

            console.log('‚úÖ ComponentControlsManager: Cleanup complete');
        }
    }

    // ROOT FIX: Create and expose global instance
    const componentControlsManager = new ComponentControlsManager();

    // ROOT FIX: Expose globally for component manager integration
    window.ComponentControlsManager = ComponentControlsManager;
    window.componentControlsManager = componentControlsManager;

    // ROOT FIX: Expose debug functions
    window.debugComponentControls = () => componentControlsManager.debug();
    window.getControlsStats = () => componentControlsManager.getStats();

    console.log('‚úÖ ROOT FIX: ComponentControlsManager initialized with dynamic control generation');

})();