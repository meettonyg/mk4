/**\n * @file component-interactions.js\n * @description Handles component item clicks and interactions in the sidebar\n * ROOT FIX: WordPress-compatible global namespace approach, no ES6 modules\n */\n\n/**\n * ROOT FIX: Setup component interaction functionality\n */\nfunction setupComponentInteractions() {\n    console.log('üß© COMPONENTS: Setting up component interactions...');\n    \n    // Wait for DOM to be ready\n    const initializeComponentInteractions = () => {\n        // Setup component item click handlers\n        setupComponentClickHandlers();\n        \n        // Setup drag and drop functionality\n        setupComponentDragAndDrop();\n        \n        // Setup \"Add Component\" button\n        setupAddComponentButton();\n        \n        console.log('‚úÖ COMPONENTS: Component interactions setup complete');\n    };\n    \n    // ROOT FIX: Delayed initialization to ensure DOM is ready\n    if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', initializeComponentInteractions);\n    } else {\n        // DOM already ready, wait a tick for dynamic content\n        setTimeout(initializeComponentInteractions, 100);\n    }\n}\n\n/**\n * ROOT FIX: Setup click handlers for component items\n */\nfunction setupComponentClickHandlers() {\n    console.log('üñ±Ô∏è COMPONENTS: Setting up component click handlers...');\n    \n    const componentItems = document.querySelectorAll('.component-item');\n    \n    if (componentItems.length === 0) {\n        console.warn('‚ö†Ô∏è COMPONENTS: No component items found');\n        return;\n    }\n    \n    console.log(`üîç COMPONENTS: Found ${componentItems.length} component items`);\n    \n    componentItems.forEach(item => {\n        // Remove any existing click handlers to prevent duplicates\n        const newItem = item.cloneNode(true);\n        item.parentNode.replaceChild(newItem, item);\n        \n        const componentType = newItem.getAttribute('data-component');\n        \n        if (!componentType) {\n            console.warn('‚ö†Ô∏è COMPONENTS: Component item missing data-component attribute');\n            return;\n        }\n        \n        newItem.addEventListener('click', function(e) {\n            e.preventDefault();\n            e.stopPropagation();\n            \n            console.log(`üß© COMPONENTS: Component clicked: ${componentType}`);\n            \n            // Add visual feedback\n            addClickFeedback(newItem);\n            \n            // Add component to preview\n            addComponentToPreview(componentType);\n        });\n        \n        // Add hover effects\n        newItem.addEventListener('mouseenter', function() {\n            newItem.style.transform = 'translateY(-2px)';\n            newItem.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.15)';\n        });\n        \n        newItem.addEventListener('mouseleave', function() {\n            newItem.style.transform = '';\n            newItem.style.boxShadow = '';\n        });\n        \n        console.log(`‚úÖ COMPONENTS: Click handler attached for ${componentType}`);\n    });\n    \n    console.log('‚úÖ COMPONENTS: Component click handlers setup complete');\n}\n\n/**\n * ROOT FIX: Add visual feedback when component is clicked\n */\nfunction addClickFeedback(item) {\n    // Add clicked class for animation\n    item.classList.add('component-clicked');\n    \n    // Remove the class after animation\n    setTimeout(() => {\n        item.classList.remove('component-clicked');\n    }, 300);\n    \n    // Create a temporary success indicator\n    const indicator = document.createElement('div');\n    indicator.className = 'component-added-indicator';\n    indicator.textContent = '‚úì';\n    indicator.style.cssText = `\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        background: #10b981;\n        color: white;\n        width: 24px;\n        height: 24px;\n        border-radius: 50%;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        font-weight: bold;\n        font-size: 14px;\n        z-index: 100;\n        animation: fadeInOut 1s ease;\n    `;\n    \n    // Position relative for absolute positioning\n    const originalPosition = item.style.position;\n    item.style.position = 'relative';\n    \n    item.appendChild(indicator);\n    \n    setTimeout(() => {\n        if (indicator.parentNode) {\n            indicator.parentNode.removeChild(indicator);\n        }\n        item.style.position = originalPosition;\n    }, 1000);\n}\n\n/**\n * ROOT FIX: Add component to preview area\n */\nfunction addComponentToPreview(componentType) {\n    console.log(`üéØ COMPONENTS: Adding ${componentType} component to preview`);\n    \n    try {\n        // ROOT FIX: Use enhanced component manager if available\n        if (window.enhancedComponentManager && window.enhancedComponentManager.addComponent) {\n            const componentData = {\n                type: componentType,\n                id: 'component-' + Date.now(),\n                props: getDefaultPropsForComponent(componentType)\n            };\n            \n            window.enhancedComponentManager.addComponent(componentData.type, componentData.props);\n            console.log(`‚úÖ COMPONENTS: ${componentType} added via enhanced component manager`);\n            return;\n        }\n        \n        // ROOT FIX: Fallback to manual component addition\n        addComponentManually(componentType);\n        \n    } catch (error) {\n        console.error('‚ùå COMPONENTS: Failed to add component:', error);\n        \n        // Show user-friendly error\n        showComponentError(`Failed to add ${componentType} component. Please try again.`);\n    }\n}\n\n/**\n * ROOT FIX: Get default props for a component type\n */\nfunction getDefaultPropsForComponent(componentType) {\n    const defaultProps = {\n        hero: {\n            title: 'Welcome to My Media Kit',\n            subtitle: 'Professional content creator and industry expert',\n            backgroundImage: ''\n        },\n        biography: {\n            name: 'Your Name',\n            title: 'Your Title',\n            bio: 'Write your professional biography here...',\n            image: ''\n        },\n        topics: {\n            title: 'Topics I Cover',\n            topics: ['Technology', 'Business', 'Innovation']\n        },\n        social: {\n            title: 'Connect With Me',\n            platforms: [\n                { name: 'LinkedIn', url: '', icon: 'linkedin' },\n                { name: 'Twitter', url: '', icon: 'twitter' },\n                { name: 'Instagram', url: '', icon: 'instagram' }\n            ]\n        },\n        stats: {\n            title: 'By the Numbers',\n            stats: [\n                { label: 'Followers', value: '10K+' },\n                { label: 'Engagements', value: '500K+' },\n                { label: 'Years Experience', value: '5+' }\n            ]\n        },\n        'call-to-action': {\n            title: 'Ready to Collaborate?',\n            description: 'Let\\'s work together on your next project',\n            buttonText: 'Get in Touch',\n            buttonUrl: ''\n        },\n        'logo-grid': {\n            title: 'Featured In',\n            logos: []\n        },\n        testimonials: {\n            title: 'What People Say',\n            testimonials: [\n                {\n                    text: 'Exceptional work and professionalism.',\n                    author: 'Client Name',\n                    company: 'Company Name'\n                }\n            ]\n        },\n        contact: {\n            title: 'Get in Touch',\n            email: 'hello@example.com',\n            phone: '',\n            address: ''\n        },\n        questions: {\n            title: 'Frequently Asked Questions',\n            questions: [\n                {\n                    question: 'What services do you offer?',\n                    answer: 'I offer a range of professional services...'\n                }\n            ]\n        }\n    };\n    \n    return defaultProps[componentType] || {};\n}\n\n/**\n * ROOT FIX: Manual component addition as fallback\n */\nfunction addComponentManually(componentType) {\n    console.log(`üîß COMPONENTS: Adding ${componentType} manually to preview`);\n    \n    const previewContainer = document.getElementById('media-kit-preview');\n    if (!previewContainer) {\n        console.error('‚ùå COMPONENTS: Preview container not found');\n        return;\n    }\n    \n    // Hide empty state if it exists\n    const emptyState = document.getElementById('empty-state');\n    if (emptyState) {\n        emptyState.style.display = 'none';\n    }\n    \n    // Create component element\n    const componentElement = createComponentElement(componentType);\n    \n    // Add to preview\n    previewContainer.appendChild(componentElement);\n    \n    // Add component class to preview container\n    previewContainer.classList.add('has-components');\n    \n    console.log(`‚úÖ COMPONENTS: ${componentType} added manually to preview`);\n    \n    // Emit event for other systems\n    document.dispatchEvent(new CustomEvent('gmkb:component-added', {\n        detail: {\n            componentType: componentType,\n            timestamp: Date.now(),\n            method: 'manual'\n        }\n    }));\n}\n\n/**\n * ROOT FIX: Create a simple component element\n */\nfunction createComponentElement(componentType) {\n    const componentId = 'component-' + Date.now();\n    const props = getDefaultPropsForComponent(componentType);\n    \n    const element = document.createElement('div');\n    element.className = 'media-kit-component';\n    element.setAttribute('data-component-type', componentType);\n    element.setAttribute('data-component-id', componentId);\n    \n    // Simple component templates\n    const templates = {\n        hero: `\n            <div class=\"hero-component\">\n                <h1>${props.title}</h1>\n                <p>${props.subtitle}</p>\n            </div>\n        `,\n        biography: `\n            <div class=\"biography-component\">\n                <h2>${props.name}</h2>\n                <h3>${props.title}</h3>\n                <p>${props.bio}</p>\n            </div>\n        `,\n        topics: `\n            <div class=\"topics-component\">\n                <h3>${props.title}</h3>\n                <ul>\n                    ${props.topics.map(topic => `<li>${topic}</li>`).join('')}\n                </ul>\n            </div>\n        `,\n        social: `\n            <div class=\"social-component\">\n                <h3>${props.title}</h3>\n                <div class=\"social-links\">\n                    ${props.platforms.map(platform => `\n                        <a href=\"${platform.url}\" class=\"social-link\">\n                            <span class=\"social-icon\">${platform.icon}</span>\n                            <span class=\"social-name\">${platform.name}</span>\n                        </a>\n                    `).join('')}\n                </div>\n            </div>\n        `\n    };\n    \n    // Use template or fallback\n    element.innerHTML = templates[componentType] || `\n        <div class=\"${componentType}-component\">\n            <h3>${componentType.replace('-', ' ').replace(/\\b\\w/g, l => l.toUpperCase())} Component</h3>\n            <p>This is a ${componentType} component. Configure it in the design panel.</p>\n        </div>\n    `;\n    \n    // Add basic styling\n    element.style.cssText = `\n        padding: 20px;\n        margin: 10px 0;\n        border: 1px solid #e2e8f0;\n        border-radius: 8px;\n        background: white;\n        position: relative;\n        transition: all 0.2s ease;\n    `;\n    \n    return element;\n}\n\n/**\n * ROOT FIX: Setup drag and drop functionality\n */\nfunction setupComponentDragAndDrop() {\n    console.log('üéØ COMPONENTS: Setting up drag and drop...');\n    \n    const componentItems = document.querySelectorAll('.component-item[draggable=\"true\"]');\n    const previewContainer = document.getElementById('media-kit-preview');\n    \n    if (!previewContainer) {\n        console.warn('‚ö†Ô∏è COMPONENTS: Preview container not found for drag and drop');\n        return;\n    }\n    \n    // Setup drag start for component items\n    componentItems.forEach(item => {\n        item.addEventListener('dragstart', function(e) {\n            const componentType = item.getAttribute('data-component');\n            e.dataTransfer.setData('text/plain', componentType);\n            e.dataTransfer.effectAllowed = 'copy';\n            \n            item.classList.add('dragging');\n            console.log(`üéØ COMPONENTS: Started dragging ${componentType}`);\n        });\n        \n        item.addEventListener('dragend', function(e) {\n            item.classList.remove('dragging');\n        });\n    });\n    \n    // Setup drop zone\n    previewContainer.addEventListener('dragover', function(e) {\n        e.preventDefault();\n        e.dataTransfer.dropEffect = 'copy';\n        previewContainer.classList.add('drag-over');\n    });\n    \n    previewContainer.addEventListener('dragleave', function(e) {\n        previewContainer.classList.remove('drag-over');\n    });\n    \n    previewContainer.addEventListener('drop', function(e) {\n        e.preventDefault();\n        previewContainer.classList.remove('drag-over');\n        \n        const componentType = e.dataTransfer.getData('text/plain');\n        if (componentType) {\n            console.log(`üéØ COMPONENTS: Dropped ${componentType} into preview`);\n            addComponentToPreview(componentType);\n        }\n    });\n    \n    console.log('‚úÖ COMPONENTS: Drag and drop setup complete');\n}\n\n/**\n * ROOT FIX: Setup \"Add Component\" button\n */\nfunction setupAddComponentButton() {\n    const addBtn = document.getElementById('add-component-btn');\n    if (addBtn) {\n        addBtn.addEventListener('click', function(e) {\n            e.preventDefault();\n            console.log('‚ûï COMPONENTS: Add Component button clicked');\n            \n            // Try to open component library modal\n            const componentLibrary = document.getElementById('component-library-overlay');\n            if (componentLibrary) {\n                componentLibrary.style.display = 'flex';\n                componentLibrary.classList.add('modal--open');\n                console.log('‚úÖ COMPONENTS: Component library modal opened');\n                \n                // Setup close handlers for the modal\n                if (window.setupModalCloseHandlers) {\n                    window.setupModalCloseHandlers(componentLibrary);\n                }\n            } else {\n                console.warn('‚ö†Ô∏è COMPONENTS: Component library modal not found');\n            }\n        });\n        console.log('‚úÖ COMPONENTS: Add Component button handler attached');\n    }\n}\n\n/**\n * ROOT FIX: Show component error message\n */\nfunction showComponentError(message) {\n    console.error('‚ùå COMPONENTS:', message);\n    \n    // Create error toast\n    const toast = document.createElement('div');\n    toast.className = 'component-error-toast';\n    toast.textContent = message;\n    toast.style.cssText = `\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: #fee2e2;\n        color: #dc2626;\n        padding: 12px 16px;\n        border-radius: 6px;\n        border: 1px solid #fecaca;\n        z-index: 10000;\n        font-size: 14px;\n        max-width: 300px;\n        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);\n    `;\n    \n    document.body.appendChild(toast);\n    \n    // Remove after 5 seconds\n    setTimeout(() => {\n        if (toast.parentNode) {\n            toast.parentNode.removeChild(toast);\n        }\n    }, 5000);\n}\n\n// ROOT FIX: Make component interactions available globally\nwindow.setupComponentInteractions = setupComponentInteractions;\nwindow.addComponentToPreview = addComponentToPreview;\nwindow.setupComponentClickHandlers = setupComponentClickHandlers;\n\n// ROOT FIX: Global component API for other scripts\nwindow.GMKBComponents = {\n    setupComponentInteractions: setupComponentInteractions,\n    addComponentToPreview: addComponentToPreview,\n    setupComponentClickHandlers: setupComponentClickHandlers,\n    setupComponentDragAndDrop: setupComponentDragAndDrop,\n    getDefaultPropsForComponent: getDefaultPropsForComponent\n};\n\nconsole.log('‚úÖ Component Interactions System: Available globally and ready');\n