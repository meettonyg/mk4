/**
 * @file main.js - WordPress-Native Media Kit Builder
 * @description Single, clean JavaScript bundle following Gemini's recommendations
 * @version 2.1.0-vanilla-js-final
 * 
 * ARCHITECTURE:
 * ✅ Single initialization flow - NO competing systems
 * ✅ Browser's native CustomEvent system - NO custom event buses
 * ✅ $(document).ready() only - NO setTimeout anywhere
 * ✅ Object.freeze() namespace protection
 * ✅ WordPress wp_localize_script data integration
 * ✅ Simple, clean, and protected scope
 */

// IMMEDIATE DEBUG LOG - Should appear first
console.log('%c🚀 GMKB main.js LOADING...', 'font-weight: bold; color: #2563eb; background: #eff6ff; padding: 2px 6px; border-radius: 3px;');
console.log('📜 Script URL:', document.currentScript?.src || 'unknown');
console.log('📜 Load time:', new Date().toISOString());
console.log('🔧 RACE CONDITION FIX: Template path resolved, clean architecture active');
console.log('✅ NO INLINE SCRIPTS: All functionality properly externalized');

// Use strict-mode, self-executing function to protect scope
(function() {
    'use strict';

    console.log('🚀 GMKB: WordPress-native initialization starting (NO JQUERY)...');
    console.log('📊 WordPress data available:', !!window.gmkbData);
    console.log('✅ VANILLA JS: Zero external dependencies');

    /**
     * 1. The Global Namespace
     * Simple, clean, and protected from modification after setup
     */
    const GMKB = {
        systems: {},
        
        // Use the browser's native event system - reliable and debuggable
        dispatch(eventName, detail) {
            const event = new CustomEvent(eventName, { detail });
            document.dispatchEvent(event);
            console.debug(`📢 GMKB: Dispatched '${eventName}'`, detail);
        },
        
        subscribe(eventName, callback) {
            document.addEventListener(eventName, callback);
            console.debug(`📡 GMKB: Subscribed to '${eventName}'`);
        },
        
        // Simple debugging helper
        getStatus() {
            return {
                systems: Object.keys(this.systems),
                wordPressData: !!window.gmkbData,
                architecture: 'wordpress-native-simplified',
                timestamp: Date.now()
            };
        }
    };

    /**
     * 2. Core Systems
     * Simple objects or classes - NO complex initializers
     */
    const StateManager = {
        state: {
            components: {},
            layout: [],
            globalSettings: {}
        },
        
        init() {
            console.log('📋 StateManager: Initialized');
            
            // Load initial state from WordPress data if available
            if (window.gmkbData && window.gmkbData.initialState) {
                this.state = { ...this.state, ...window.gmkbData.initialState };
            }
            
            // Try to restore from localStorage as fallback
            this.loadFromStorage();
        },
        
        getState() {
            return this.state;
        },
        
        setState(newState) {
            this.state = { ...this.state, ...newState };
            this.saveToStorage();
            GMKB.dispatch('gmkb:state-changed', { state: this.state });
        },
        
        addComponent(component) {
            const id = component.id || 'component-' + Date.now();
            this.state.components[id] = { ...component, id };
            
            if (!this.state.layout.includes(id)) {
                this.state.layout.push(id);
            }
            
            this.saveToStorage();
            GMKB.dispatch('gmkb:component-added', { id, component: this.state.components[id] });
            GMKB.dispatch('gmkb:state-changed', { state: this.state });
            
            return id;
        },
        
        removeComponent(id) {
            if (this.state.components[id]) {
                delete this.state.components[id];
                this.state.layout = this.state.layout.filter(cid => cid !== id);
                
                this.saveToStorage();
                GMKB.dispatch('gmkb:component-removed', { id });
                GMKB.dispatch('gmkb:state-changed', { state: this.state });
                
                return true;
            }
            return false;
        },
        
        updateComponent(id, updates) {
            if (this.state.components[id]) {
                this.state.components[id] = { ...this.state.components[id], ...updates };
                
                this.saveToStorage();
                GMKB.dispatch('gmkb:component-updated', { id, component: this.state.components[id] });
                GMKB.dispatch('gmkb:state-changed', { state: this.state });
                
                return true;
            }
            return false;
        },
        
        saveToStorage() {
            try {
                localStorage.setItem('gmkb-state', JSON.stringify(this.state));
                return true;
            } catch (error) {
                console.warn('💾 StateManager: Failed to save to localStorage:', error);
                return false;
            }
        },
        
        loadFromStorage() {
            try {
                const saved = localStorage.getItem('gmkb-state');
                if (saved) {
                    const data = JSON.parse(saved);
                    this.state = { ...this.state, ...data };
                    console.log('💾 StateManager: Loaded state from localStorage');
                    return true;
                }
            } catch (error) {
                console.warn('💾 StateManager: Failed to load from localStorage:', error);
            }
            return false;
        }
    };

    const ComponentManager = {
        init() {
            console.log('🧩 ComponentManager: Initialized');
        },
        
        addComponent(type, data = {}) {
            const component = {
                id: 'component-' + Date.now(),
                type,
                data,
                timestamp: Date.now()
            };
            
            const id = StateManager.addComponent(component);
            this.renderComponent(id);
            
            console.log(`🧩 ComponentManager: Added component '${type}' with ID: ${id}`);
            return id;
        },
        
        removeComponent(id) {
            // Remove from DOM
            const element = document.getElementById(id);
            if (element) {
                element.remove();
            }
            
            // Remove from state
            const success = StateManager.removeComponent(id);
            
            if (success) {
                console.log(`🧩 ComponentManager: Removed component with ID: ${id}`);
            }
            
            return success;
        },
        
        updateComponent(id, updates) {
            const success = StateManager.updateComponent(id, updates);
            
            if (success) {
                this.renderComponent(id);
                console.log(`🧩 ComponentManager: Updated component with ID: ${id}`);
            }
            
            return success;
        },
        
        renderComponent(id) {
            const component = StateManager.getState().components[id];
            if (!component) {
                console.warn(`🧩 ComponentManager: Cannot render - component ${id} not found`);
                return false;
            }
            
            const previewContainer = document.getElementById('media-kit-preview');
            if (!previewContainer) {
                console.warn('🧩 ComponentManager: Preview container not found');
                return false;
            }
            
            // Hide empty state if this is the first component
            const emptyState = document.getElementById('empty-state');
            if (emptyState && Object.keys(StateManager.getState().components).length === 1) {
                emptyState.style.display = 'none';
            }
            
            // Create or update component element
            let componentElement = document.getElementById(id);
            if (!componentElement) {
                componentElement = document.createElement('div');
                componentElement.id = id;
                componentElement.className = 'media-kit-component mk-component';
                componentElement.setAttribute('data-component-type', component.type);
                previewContainer.appendChild(componentElement);
            }
            
            // Render component content
            componentElement.innerHTML = this.getComponentHTML(component);
            
            console.log(`🧩 ComponentManager: Rendered component ${id} (${component.type})`);
            return true;
        },
        
        getComponentHTML(component) {
            const { id, type, data } = component;
            
            // Simple component templates - can be enhanced later
            const templates = {
                hero: `
                    <div class="component-hero" data-component-id="${id}">
                        <div class="component-header">
                            <h3>Hero Section</h3>
                            <div class="component-controls">
                                <button onclick="window.GMKB.systems.ComponentManager.removeComponent('${id}')" class="remove-btn">×</button>
                            </div>
                        </div>
                        <div class="component-content">
                            <h1>${data.title || 'Your Name'}</h1>
                            <p>${data.subtitle || 'Your Title/Expertise'}</p>
                        </div>
                    </div>
                `,
                biography: `
                    <div class="component-biography" data-component-id="${id}">
                        <div class="component-header">
                            <h3>Biography</h3>
                            <div class="component-controls">
                                <button onclick="window.GMKB.systems.ComponentManager.removeComponent('${id}')" class="remove-btn">×</button>
                            </div>
                        </div>
                        <div class="component-content">
                            <p>${data.content || 'Your professional biography...'}</p>
                        </div>
                    </div>
                `,
                topics: `
                    <div class="component-topics" data-component-id="${id}">
                        <div class="component-header">
                            <h3>Speaking Topics</h3>
                            <div class="component-controls">
                                <button onclick="window.GMKB.systems.ComponentManager.removeComponent('${id}')" class="remove-btn">×</button>
                            </div>
                        </div>
                        <div class="component-content">
                            <ul>
                                ${(data.topics || ['Topic 1', 'Topic 2', 'Topic 3']).map(topic => `<li>${topic}</li>`).join('')}
                            </ul>
                        </div>
                    </div>
                `
            };
            
            return templates[type] || `
                <div class="component-generic" data-component-id="${id}">
                    <div class="component-header">
                        <h3>${type.charAt(0).toUpperCase() + type.slice(1)} Component</h3>
                        <div class="component-controls">
                            <button onclick="window.GMKB.systems.ComponentManager.removeComponent('${id}')" class="remove-btn">×</button>
                        </div>
                    </div>
                    <div class="component-content">
                        <p>Component: ${id}</p>
                        <p>Type: ${type}</p>
                        <p><em>WordPress-native simplified mode</em></p>
                    </div>
                </div>
            `;
        }
    };

    const Renderer = {
        init() {
            console.log('🎨 Renderer: Initialized');
            
            // Listen for state changes and re-render
            GMKB.subscribe('gmkb:state-changed', (event) => {
                this.renderAll();
            });
        },
        
        renderAll() {
            const state = StateManager.getState();
            const previewContainer = document.getElementById('media-kit-preview');
            
            if (!previewContainer) {
                console.warn('🎨 Renderer: Preview container not found');
                return;
            }
            
            // Show empty state if no components
            const emptyState = document.getElementById('empty-state');
            if (Object.keys(state.components).length === 0) {
                if (emptyState) {
                    emptyState.style.display = 'block';
                }
            } else {
                if (emptyState) {
                    emptyState.style.display = 'none';
                }
                
                // Render components in layout order
                state.layout.forEach(componentId => {
                    ComponentManager.renderComponent(componentId);
                });
            }
        }
    };

    const UIManager = {
        init() {
            console.log('🎛️ UIManager: Initialized');
            this.initializeButtons();
            this.initializeModals();
        },
        
        initializeButtons() {
            // Save button
            const saveBtn = document.getElementById('save-btn');
            if (saveBtn && !saveBtn.dataset.gmkbInitialized) {
                saveBtn.addEventListener('click', () => {
                    const success = StateManager.saveToStorage();
                    console.log(success ? '💾 Save successful' : '❌ Save failed');
                    
                    // Show user feedback - NO setTimeout, use event-driven approach
                    const originalText = saveBtn.textContent;
                    saveBtn.textContent = success ? 'Saved!' : 'Save Failed';
                    
                    // Use transitionend event instead of setTimeout
                    const resetText = () => {
                        saveBtn.textContent = originalText;
                        saveBtn.removeEventListener('transitionend', resetText);
                    };
                    
                    // Trigger a CSS transition and listen for its end
                    saveBtn.style.transition = 'background-color 2s';
                    saveBtn.style.backgroundColor = success ? '#10b981' : '#ef4444';
                    saveBtn.addEventListener('transitionend', resetText);
                    
                    // Reset styles immediately to start transition
                    requestAnimationFrame(() => {
                        saveBtn.style.backgroundColor = '';
                    });
                });
                saveBtn.dataset.gmkbInitialized = 'true';
            }
            
            // Component library button
            const addComponentBtn = document.getElementById('add-component-btn');
            if (addComponentBtn && !addComponentBtn.dataset.gmkbInitialized) {
                addComponentBtn.addEventListener('click', () => {
                    this.showComponentLibrary();
                });
                addComponentBtn.dataset.gmkbInitialized = 'true';
            }
            
            // Undo/Redo buttons (basic functionality)
            const undoBtn = document.getElementById('undo-btn');
            const redoBtn = document.getElementById('redo-btn');
            
            if (undoBtn && !undoBtn.dataset.gmkbInitialized) {
                undoBtn.addEventListener('click', () => {
                    console.log('↩️ Undo clicked (simplified mode)');
                });
                undoBtn.dataset.gmkbInitialized = 'true';
            }
            
            if (redoBtn && !redoBtn.dataset.gmkbInitialized) {
                redoBtn.addEventListener('click', () => {
                    console.log('↪️ Redo clicked (simplified mode)');
                });
                redoBtn.dataset.gmkbInitialized = 'true';
            }
        },
        
        initializeModals() {
            // Component library modal close functionality
            const modal = document.getElementById('component-library-overlay');
            if (modal) {
                // Close button
                const closeBtn = modal.querySelector('.close-modal');
                if (closeBtn) {
                    closeBtn.addEventListener('click', () => {
                        modal.style.display = 'none';
                    });
                }
                
                // Backdrop click
                modal.addEventListener('click', (e) => {
                    if (e.target === modal) {
                        modal.style.display = 'none';
                    }
                });
                
                // ESC key
                document.addEventListener('keydown', (e) => {
                    if (e.key === 'Escape' && modal.style.display === 'flex') {
                        modal.style.display = 'none';
                    }
                });
            }
            
            // Component selection handlers
            const componentButtons = document.querySelectorAll('.component-item');
            componentButtons.forEach(button => {
                if (!button.dataset.gmkbInitialized) {
                    button.addEventListener('click', () => {
                        const componentType = button.dataset.componentType || 'generic';
                        ComponentManager.addComponent(componentType);
                        
                        // Close modal
                        if (modal) {
                            modal.style.display = 'none';
                        }
                    });
                    button.dataset.gmkbInitialized = 'true';
                }
            });
        },
        
        showComponentLibrary() {
            const modal = document.getElementById('component-library-overlay');
            if (modal) {
                modal.style.display = 'flex';
            } else {
                console.warn('🎛️ UIManager: Component library modal not found');
            }
        }
    };

    /**
     * 3. Main Application Logic
     */
    function initializeApplication() {
        console.log('🚀 GMKB: Application initializing...');
        
        // Validate WordPress data is available
        if (!window.gmkbData) {
            console.error('❌ GMKB: WordPress data (gmkbData) not available - check enqueue.php');
            showInitializationError('WordPress data not available');
            return false;
        }
        
        console.log('✅ GMKB: WordPress data validated:', {
            ajaxUrl: !!window.gmkbData.ajaxUrl,
            nonce: !!window.gmkbData.nonce,
            postId: window.gmkbData.postId,
            architecture: window.gmkbData.architecture,
            isBuilderPage: window.gmkbData.isBuilderPage,
            templateFixed: window.gmkbData.templateFixed
        });

        try {
            // Initialize core systems
            GMKB.systems.StateManager = StateManager;
            GMKB.systems.ComponentManager = ComponentManager;
            GMKB.systems.Renderer = Renderer;
            GMKB.systems.UIManager = UIManager;
            
            // Initialize each system
            StateManager.init();
            ComponentManager.init();
            Renderer.init();
            UIManager.init();

            // Attach to global scope and protect it
            window.GMKB = GMKB;
            Object.freeze(window.GMKB);
            
            console.log('🔒 GMKB: Namespace protected with Object.freeze()');

            // All systems are ready - announce it
            GMKB.dispatch('gmkb:ready', {
                timestamp: Date.now(),
                architecture: 'wordpress-native-simplified',
                systems: Object.keys(GMKB.systems)
            });
            
            // Update body class to indicate readiness
            document.body.classList.add('gmkb-ready');
            document.body.classList.remove('gmkb-initializing');
            
            console.log('🎉 GMKB: Application ready!');
            console.log('📊 Status:', GMKB.getStatus());
            
            return true;
            
        } catch (error) {
            console.error('❌ GMKB: Initialization error:', error);
            showInitializationError(error.message);
            return false;
        }
    }
    
    /**
     * Show user-friendly initialization error
     */
    function showInitializationError(message) {
        const previewContainer = document.getElementById('media-kit-preview');
        if (previewContainer) {
            previewContainer.innerHTML = `
                <div class="initialization-error" style="
                    padding: 40px;
                    text-align: center;
                    background: #fee;
                    border: 2px solid #f88;
                    border-radius: 8px;
                    margin: 20px;
                    color: #d44;
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
                ">
                    <h2>⚠️ Initialization Error</h2>
                    <p><strong>The Media Kit Builder failed to start properly.</strong></p>
                    <p>Error: ${message}</p>
                    <div style="margin: 20px 0; padding: 15px; background: #f9f9f9; border-radius: 4px; text-align: left;">
                        <strong>🔧 Diagnostics:</strong><br>
                        WordPress Data: ${!!window.gmkbData ? '✅' : '❌'}<br>
                        Template Fixed: ${window.gmkbData?.templateFixed ? '✅' : '❌'}<br>
                        Architecture: ${window.gmkbData?.architecture || 'Unknown'}<br>
                        Builder Page: ${window.gmkbData?.isBuilderPage ? '✅' : '❌'}<br>
                        jQuery: ${!!window.jQuery ? '✅' : '❌'}
                    </div>
                    <button onclick="location.reload()" style="
                        background: #d44;
                        color: white;
                        border: none;
                        padding: 10px 20px;
                        border-radius: 4px;
                        cursor: pointer;
                        font-size: 14px;
                    ">Reload Builder</button>
                </div>
            `;
        }
    }

    /**
     * 4. Entry Point
     * Wait for DOM to be fully loaded - ZERO polling, ZERO setTimeout, NO JQUERY
     */
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', function() {
            console.log('📄 DOM ready - starting GMKB initialization (VANILLA JS)...');
            initializeApplication();
        });
    } else {
        // DOM already loaded
        console.log('📄 DOM already ready - starting GMKB initialization immediately...');
        initializeApplication();
    }
    
    // Also listen for WordPress readiness event from enqueue.php
    document.addEventListener('gmkb:wordpress-ready', function(event) {
        console.log('✅ WordPress readiness event received:', event.detail);
    });

    // Expose utility functions for debugging and testing
    window.gmkbUtils = {
        addTestComponent: function(type = 'hero') {
            if (window.GMKB && window.GMKB.systems.ComponentManager) {
                return window.GMKB.systems.ComponentManager.addComponent(type, {
                    title: 'Test Component',
                    content: 'This is a test component added via gmkbUtils.addTestComponent()'
                });
            }
            console.warn('⚠️ GMKB not ready - cannot add test component');
            return null;
        },
        
        saveState: function() {
            if (window.GMKB && window.GMKB.systems.StateManager) {
                return window.GMKB.systems.StateManager.saveToStorage();
            }
            return false;
        },
        
        loadState: function() {
            if (window.GMKB && window.GMKB.systems.StateManager) {
                return window.GMKB.systems.StateManager.loadFromStorage();
            }
            return false;
        },
        
        getStatus: function() {
            return {
                gmkbReady: !!window.GMKB,
                wordPressData: !!window.gmkbData,
                systems: window.GMKB ? Object.keys(window.GMKB.systems) : [],
                architecture: 'wordpress-native-simplified',
                timestamp: Date.now()
            };
        },
        
        clearState: function() {
            try {
                localStorage.removeItem('gmkb-state');
                location.reload();
                return true;
            } catch (error) {
                console.error('Failed to clear state:', error);
                return false;
            }
        }
    };

    console.log('✅ GMKB: WordPress-native main.js loaded successfully');
    console.log('🛠️ Debug commands available:');
    console.log('  gmkbUtils.addTestComponent() - Add test component');
    console.log('  gmkbUtils.saveState() - Save current state');
    console.log('  gmkbUtils.loadState() - Load saved state');
    console.log('  gmkbUtils.getStatus() - Get system status');
    console.log('  gmkbUtils.clearState() - Clear saved state and reload');

})(); // NO JQUERY - Pure vanilla JavaScript
