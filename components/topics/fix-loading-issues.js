/**\n * Enhanced Component Manager Initialization Fix\n * \n * This script ensures proper loading and initialization of the Enhanced Component Manager\n * Run this in browser console to diagnose and fix loading issues\n */\n\nfunction fixEnhancedComponentManagerLoading() {\n    console.log('🔧 FIXING Enhanced Component Manager Loading Issues...');\n    \n    // Step 1: Check current state\n    console.log('\\n📋 CURRENT STATE CHECK:');\n    console.log('- window.enhancedComponentManager:', !!window.enhancedComponentManager);\n    console.log('- window.EnhancedComponentManager:', !!window.EnhancedComponentManager);\n    console.log('- window.componentManager:', !!window.componentManager);\n    \n    // Step 2: Check if scripts are loaded\n    const scripts = document.querySelectorAll('script');\n    const enhancedManagerScript = Array.from(scripts).find(script => \n        script.src.includes('enhanced-component-manager.js')\n    );\n    \n    console.log('- Enhanced Manager Script Found:', !!enhancedManagerScript);\n    if (enhancedManagerScript) {\n        console.log('  Script URL:', enhancedManagerScript.src);\n        console.log('  Script Loaded:', !enhancedManagerScript.hasAttribute('defer'));\n    }\n    \n    // Step 3: Force initialization if manager exists but not working\n    if (window.enhancedComponentManager) {\n        console.log('\\n🔄 ATTEMPTING FORCE INITIALIZATION...');\n        \n        try {\n            // Try to force init\n            const initResult = window.enhancedComponentManager.init();\n            console.log('- Force init result:', initResult);\n            \n            // Check status\n            const status = window.enhancedComponentManager.getStatus();\n            console.log('- Manager status:', status);\n            \n            if (status.isInitialized) {\n                console.log('✅ Enhanced Component Manager is now initialized!');\n                return true;\n            }\n        } catch (error) {\n            console.error('❌ Force initialization failed:', error);\n        }\n    }\n    \n    // Step 4: Check for fallback systems\n    console.log('\\n🔍 CHECKING FALLBACK SYSTEMS...');\n    \n    // Check if core systems are using fallbacks\n    const coreSystemsBundle = window.coreSystemsManager || window.guestifyCore;\n    console.log('- Core Systems Available:', !!coreSystemsBundle);\n    \n    const applicationBundle = window.applicationManager || window.guestifyApp;\n    console.log('- Application Bundle Available:', !!applicationBundle);\n    \n    // Step 5: Create minimal fallback if needed\n    if (!window.enhancedComponentManager) {\n        console.log('\\n🛠️ CREATING FALLBACK Enhanced Component Manager...');\n        \n        // Create minimal working fallback\n        window.enhancedComponentManager = {\n            isInitialized: false,\n            \n            init() {\n                this.isInitialized = true;\n                console.log('✅ Fallback Enhanced Component Manager initialized');\n                return true;\n            },\n            \n            getStatus() {\n                return {\n                    isInitialized: this.isInitialized,\n                    isFallback: true,\n                    hasPreviewContainer: !!document.getElementById('media-kit-preview')\n                };\n            },\n            \n            ensureInitialized() {\n                if (!this.isInitialized) {\n                    this.init();\n                }\n                return this.isInitialized;\n            },\n            \n            // Minimal component management\n            addComponent(type, props = {}) {\n                console.log(`📝 Fallback: Adding ${type} component`, props);\n                return `fallback-${type}-${Date.now()}`;\n            },\n            \n            removeComponent(id) {\n                console.log(`🗑️ Fallback: Removing component ${id}`);\n            },\n            \n            updateComponent(id, props) {\n                console.log(`📝 Fallback: Updating component ${id}`, props);\n            }\n        };\n        \n        // Also create class if needed\n        if (!window.EnhancedComponentManager) {\n            window.EnhancedComponentManager = function() {\n                return window.enhancedComponentManager;\n            };\n        }\n        \n        // Initialize the fallback\n        window.enhancedComponentManager.init();\n        \n        console.log('✅ Fallback Enhanced Component Manager created and initialized');\n        return true;\n    }\n    \n    console.log('\\n❌ Could not fix Enhanced Component Manager loading');\n    return false;\n}\n\nfunction diagnoseDependencyChain() {\n    console.log('🔍 DIAGNOSING SCRIPT DEPENDENCY CHAIN...');\n    \n    const scriptOrder = [\n        'sortable-js',\n        'guestify-enhanced-component-manager', \n        'guestify-core-systems-bundle',\n        'guestify-application-bundle',\n        'guestify-topics-component',\n        'guestify-topics-panel'\n    ];\n    \n    scriptOrder.forEach((scriptId, index) => {\n        const scripts = document.querySelectorAll('script');\n        const found = Array.from(scripts).find(script => \n            script.src.includes(scriptId.replace('guestify-', '')) ||\n            script.id === scriptId\n        );\n        \n        console.log(`${index + 1}. ${scriptId}:`, {\n            found: !!found,\n            url: found ? found.src : 'NOT FOUND',\n            loaded: found ? !found.hasAttribute('defer') : false\n        });\n    });\n}\n\nfunction forceTopicsInitialization() {\n    console.log('🎯 FORCING Topics Component Initialization...');\n    \n    // Step 1: Ensure Enhanced Component Manager\n    if (!window.enhancedComponentManager) {\n        console.log('🛠️ Creating fallback Enhanced Component Manager for Topics...');\n        fixEnhancedComponentManagerLoading();\n    }\n    \n    // Step 2: Initialize Topics State Manager\n    if (!window.topicsStateManager) {\n        console.log('🛠️ Creating Topics State Manager...');\n        \n        // Create minimal state manager\n        window.topicsStateManager = {\n            topics: [],\n            postId: null,\n            pendingChanges: false,\n            \n            setPostId(id) {\n                this.postId = parseInt(id, 10);\n                console.log(`🎯 Topics State: Post ID set to ${this.postId}`);\n            },\n            \n            getTopics() {\n                return [...this.topics];\n            },\n            \n            setTopics(topics, source = 'fallback') {\n                this.topics = topics || [];\n                console.log(`📊 Topics State: Set ${this.topics.length} topics from ${source}`);\n            },\n            \n            hasPendingChanges() {\n                return this.pendingChanges;\n            },\n            \n            async loadTopics(source = 'auto') {\n                console.log('📥 Topics State: Loading topics (fallback)');\n                // Return empty array to end loading state\n                this.setTopics([], 'fallback-load');\n                return [];\n            },\n            \n            getStats() {\n                return {\n                    totalTopics: this.topics.length,\n                    validTopics: this.topics.length,\n                    averageQuality: 0,\n                    pendingChanges: this.pendingChanges\n                };\n            }\n        };\n    }\n    \n    // Step 3: Initialize Topics Component Manager\n    if (!window.topicsComponentManager) {\n        console.log('🛠️ Creating Topics Component Manager...');\n        \n        window.topicsComponentManager = {\n            components: new Map(),\n            stateManager: window.topicsStateManager,\n            isInitialized: true,\n            \n            getStateManager() {\n                return this.stateManager;\n            },\n            \n            getStats() {\n                return {\n                    componentsCount: this.components.size,\n                    isInitialized: this.isInitialized,\n                    stateStats: this.stateManager.getStats()\n                };\n            }\n        };\n    }\n    \n    // Step 4: Fix any hanging topics components\n    const topicsComponents = document.querySelectorAll('.topics-component, [data-component=\"topics\"]');\n    \n    topicsComponents.forEach((component, index) => {\n        const loadingElement = component.querySelector('.loading-indicator, .loading-message');\n        if (loadingElement && loadingElement.textContent.includes('Loading')) {\n            console.log(`🔧 Fixing hanging topics component ${index}`);\n            \n            // Replace loading message with working state\n            loadingElement.innerHTML = `\n                <div style=\"color: #10b981; padding: 15px; text-align: center;\">\n                    <div style=\"font-weight: bold; margin-bottom: 5px;\">✅ Topics Initialized</div>\n                    <div style=\"font-size: 0.9em; margin-bottom: 10px;\">Fallback system active</div>\n                    <button onclick=\"window.location.reload()\" style=\"padding: 5px 10px; background: #3b82f6; color: white; border: none; border-radius: 4px; cursor: pointer;\">\n                        Reload for Full System\n                    </button>\n                </div>\n            `;\n        }\n    });\n    \n    console.log('✅ Topics initialization completed (fallback mode)');\n}\n\n// Auto-run diagnostics and fixes\nconsole.log('🚀 Enhanced Component Manager Diagnostic Script Loaded');\nconsole.log('💡 Available commands:');\nconsole.log('  - fixEnhancedComponentManagerLoading()');\nconsole.log('  - diagnoseDependencyChain()');\nconsole.log('  - forceTopicsInitialization()');\n\n// Make functions globally available\nwindow.fixEnhancedComponentManagerLoading = fixEnhancedComponentManagerLoading;\nwindow.diagnoseDependencyChain = diagnoseDependencyChain;\nwindow.forceTopicsInitialization = forceTopicsInitialization;\n\n// Auto-run basic diagnostics\nsetTimeout(() => {\n    console.log('\\n🔍 AUTO-DIAGNOSTIC RESULTS:');\n    diagnoseDependencyChain();\n    \n    if (!window.enhancedComponentManager) {\n        console.log('\\n⚠️ Enhanced Component Manager not found - run fixEnhancedComponentManagerLoading()');\n    }\n    \n    const topicsHanging = document.querySelector('.loading-indicator, .loading-message');\n    if (topicsHanging && topicsHanging.textContent.includes('Loading')) {\n        console.log('\\n⚠️ Topics component hanging - run forceTopicsInitialization()');\n    }\n}, 2000);