/**\n * STAGE 2 TEST: JSON Schemas & Component Options UI\n * \n * Tests JSON schema loading, component options UI, and configuration interface\n * \n * @version 2.0.0-stage2-test\n */\n\n(function() {\n    'use strict';\n    \n    // Wait for systems to be ready\n    document.addEventListener('gmkb:core-systems-ready', () => {\n        setTimeout(() => {\n            runStage2Tests();\n        }, 1500); // Allow more time for Phase 2 systems\n    });\n    \n    function runStage2Tests() {\n        console.log('🧪 STAGE 2 TEST: Starting JSON Schemas & Component Options UI Tests');\n        \n        const results = {\n            jsonSchemas: testJSONSchemas(),\n            optionsUI: testOptionsUI(),\n            selectionManager: testSelectionManager(),\n            realTimeConfiguration: testRealTimeConfiguration(),\n            presetSystem: testPresetSystem()\n        };\n        \n        // Display results\n        displayTestResults(results);\n        \n        // Demonstrate functionality if tests pass\n        if (allTestsPass(results)) {\n            demonstrateStage2Functionality();\n        }\n        \n        return results;\n    }\n    \n    function testJSONSchemas() {\n        console.log('📋 Testing JSON Schema Loading...');\n        \n        const tests = {};\n        \n        try {\n            // Test if schemas are available in JavaScript\n            const hasGlobalSchemas = !!(window.gmkbData && window.gmkbData.componentSchemas);\n            tests.globalSchemasAvailable = hasGlobalSchemas;\n            \n            if (hasGlobalSchemas) {\n                const schemas = window.gmkbData.componentSchemas;\n                tests.schemaTypes = Object.keys(schemas);\n                tests.heroSchemaLoaded = !!schemas.hero;\n                tests.topicsSchemaLoaded = !!schemas.topics;\n                tests.contactSchemaLoaded = !!schemas.contact;\n                tests.biographySchemaLoaded = !!schemas.biography;\n                \n                // Test schema structure\n                if (schemas.hero) {\n                    const heroSchema = schemas.hero;\n                    tests.heroHasDataBindings = !!heroSchema.dataBindings;\n                    tests.heroHasOptions = !!heroSchema.componentOptions;\n                    tests.heroHasPresets = !!heroSchema.presets;\n                    tests.heroOptionsCount = heroSchema.componentOptions ? Object.keys(heroSchema.componentOptions).length : 0;\n                }\n                \n                if (schemas.topics) {\n                    const topicsSchema = schemas.topics;\n                    tests.topicsHasLayoutOptions = !!(topicsSchema.componentOptions && topicsSchema.componentOptions.layout);\n                    tests.topicsHasColumnsOption = !!(topicsSchema.componentOptions && topicsSchema.componentOptions.columnsDesktop);\n                }\n            } else {\n                tests.error = 'Global schemas not available in window.gmkbData';\n            }\n            \n        } catch (error) {\n            tests.error = error.message;\n        }\n        \n        console.log('JSON Schemas Tests:', tests);\n        return tests;\n    }\n    \n    function testOptionsUI() {\n        console.log('🎛️ Testing Component Options UI...');\n        \n        const tests = {};\n        \n        try {\n            // Test if ComponentOptionsUI is available\n            tests.optionsUIClassAvailable = !!window.ComponentOptionsUI;\n            tests.optionsUIInstanceAvailable = !!window.componentOptionsUI;\n            \n            if (window.componentOptionsUI) {\n                const ui = window.componentOptionsUI;\n                tests.uiHasLogger = !!ui.logger;\n                tests.uiHasConfigManager = !!ui.configManager;\n                tests.uiHasStateManager = !!ui.stateManager;\n            }\n            \n            // Test if options panel was created in DOM\n            const optionsPanel = document.getElementById('component-options-panel');\n            tests.optionsPanelInDOM = !!optionsPanel;\n            \n            if (optionsPanel) {\n                tests.panelHasHeader = !!optionsPanel.querySelector('.options-panel__header');\n                tests.panelHasContent = !!optionsPanel.querySelector('.options-panel__content');\n                tests.panelHasNoSelection = !!optionsPanel.querySelector('.options-panel__no-selection');\n                tests.panelHasForm = !!optionsPanel.querySelector('.options-panel__form');\n                tests.panelHasActions = !!optionsPanel.querySelector('.options-panel__actions');\n            }\n            \n        } catch (error) {\n            tests.error = error.message;\n        }\n        \n        console.log('Options UI Tests:', tests);\n        return tests;\n    }\n    \n    function testSelectionManager() {\n        console.log('🎯 Testing Component Selection Manager...');\n        \n        const tests = {};\n        \n        try {\n            // Test if ComponentSelectionManager is available\n            tests.selectionManagerClassAvailable = !!window.ComponentSelectionManager;\n            tests.selectionManagerInstanceAvailable = !!window.componentSelectionManager;\n            \n            if (window.componentSelectionManager) {\n                const manager = window.componentSelectionManager;\n                tests.managerHasLogger = !!manager.logger;\n                tests.initiallyNoSelection = !manager.selectedComponentId;\n                \n                // Test debug info availability\n                const debugInfo = manager.getDebugInfo();\n                tests.debugInfoAvailable = !!debugInfo;\n                tests.debugInfoStructure = !!(\n                    debugInfo && \n                    'selectedComponentId' in debugInfo && \n                    'hasSelection' in debugInfo\n                );\n            }\n            \n        } catch (error) {\n            tests.error = error.message;\n        }\n        \n        console.log('Selection Manager Tests:', tests);\n        return tests;\n    }\n    \n    function testRealTimeConfiguration() {\n        console.log('⚡ Testing Real-Time Configuration...');\n        \n        const tests = {};\n        \n        try {\n            // Test if configuration manager can handle updates\n            if (window.componentConfigurationManager) {\n                const configManager = window.componentConfigurationManager;\n                \n                // Create test configuration\n                const testConfig = configManager.registerConfiguration('test_realtime', 'hero');\n                tests.testConfigCreated = !!testConfig;\n                \n                if (testConfig) {\n                    // Test updating configuration\n                    const updatedConfig = configManager.updateComponentConfiguration('test_realtime', {\n                        componentOptions: {\n                            layout: 'center_aligned',\n                            backgroundColor: '#f0f0f0'\n                        }\n                    });\n                    \n                    tests.configurationUpdated = !!updatedConfig;\n                    tests.configurationHasUpdates = !!(updatedConfig && \n                        updatedConfig.componentOptions && \n                        updatedConfig.componentOptions.layout === 'center_aligned'\n                    );\n                    \n                    // Clean up test configuration\n                    configManager.removeConfiguration('test_realtime');\n                }\n            } else {\n                tests.error = 'ComponentConfigurationManager not available';\n            }\n            \n        } catch (error) {\n            tests.error = error.message;\n        }\n        \n        console.log('Real-Time Configuration Tests:', tests);\n        return tests;\n    }\n    \n    function testPresetSystem() {\n        console.log('🎨 Testing Preset System...');\n        \n        const tests = {};\n        \n        try {\n            // Test if presets are loaded from JSON schemas\n            if (window.gmkbData && window.gmkbData.componentSchemas) {\n                const schemas = window.gmkbData.componentSchemas;\n                \n                tests.heroPresetsAvailable = !!(schemas.hero && schemas.hero.presets);\n                tests.topicsPresetsAvailable = !!(schemas.topics && schemas.topics.presets);\n                tests.contactPresetsAvailable = !!(schemas.contact && schemas.contact.presets);\n                \n                if (schemas.hero && schemas.hero.presets) {\n                    const heroPresets = schemas.hero.presets;\n                    tests.heroPresetCount = Object.keys(heroPresets).length;\n                    tests.heroHasProfessionalPreset = !!heroPresets.professional;\n                    tests.heroHasCreativePreset = !!heroPresets.creative;\n                    \n                    // Test preset structure\n                    if (heroPresets.professional) {\n                        const professionalPreset = heroPresets.professional;\n                        tests.presetHasName = !!professionalPreset.name;\n                        tests.presetHasOptions = !!professionalPreset.options;\n                    }\n                }\n            } else {\n                tests.error = 'Component schemas not available for preset testing';\n            }\n            \n        } catch (error) {\n            tests.error = error.message;\n        }\n        \n        console.log('Preset System Tests:', tests);\n        return tests;\n    }\n    \n    function displayTestResults(results) {\n        console.log('\\n📊 STAGE 2 TEST RESULTS:');\n        console.log('=' + '='.repeat(60));\n        \n        Object.keys(results).forEach(testSuite => {\n            const result = results[testSuite];\n            const passed = !result.error && Object.values(result).every(val => \n                val !== false && val !== null && val !== undefined\n            );\n            \n            console.log(`${passed ? '✅' : '❌'} ${testSuite.toUpperCase()}: ${passed ? 'PASS' : 'FAIL'}`);\n            \n            if (result.error) {\n                console.log(`   Error: ${result.error}`);\n            } else {\n                Object.keys(result).forEach(test => {\n                    const value = result[test];\n                    const status = value ? '✓' : '✗';\n                    console.log(`   ${status} ${test}: ${JSON.stringify(value)}`);\n                });\n            }\n            console.log('');\n        });\n        \n        console.log('=' + '='.repeat(60));\n        \n        const overallPass = allTestsPass(results);\n        console.log(`🎯 OVERALL STAGE 2 RESULT: ${overallPass ? '✅ PASS' : '❌ FAIL'}`);\n        \n        if (overallPass) {\n            console.log('🚀 Stage 2 Implementation is working correctly!');\n            console.log('✅ JSON schemas loaded and available');\n            console.log('✅ Component Options UI created and functional');\n            console.log('✅ Component Selection Manager active');\n            console.log('✅ Real-time configuration updates working');\n            console.log('✅ Preset system available with multiple presets');\n            console.log('✅ Ready for Stage 3 testing!');\n        } else {\n            console.log('⚠️ Some tests failed. Check the errors above.');\n        }\n    }\n    \n    function allTestsPass(results) {\n        return Object.values(results).every(result => \n            !result.error && Object.values(result).every(val => \n                val !== false && val !== null && val !== undefined\n            )\n        );\n    }\n    \n    function demonstrateStage2Functionality() {\n        console.log('🎭 STAGE 2 DEMO: Demonstrating Component Configuration Interface...');\n        \n        if (!window.enhancedComponentManager || !window.componentSelectionManager) {\n            console.log('❌ Required managers not available for demo');\n            return;\n        }\n        \n        // Add a hero component for configuration demo\n        setTimeout(() => {\n            console.log('1️⃣ Adding hero component for configuration demo...');\n            \n            window.enhancedComponentManager.addComponent('hero', {\n                id: 'stage2_demo_hero',\n                data: {\n                    full_name: 'Configuration Demo User',\n                    guest_title: 'Phase 2 Expert',\n                    biography: 'This hero component demonstrates the Phase 2 configuration system. Click on it to see the options panel!',\n                    guest_headshot: 'https://via.placeholder.com/300x300/295cff/white?text=CLICK+ME'\n                }\n            });\n            \n        }, 500);\n        \n        // Show instructions after component is added\n        setTimeout(() => {\n            console.log('');\n            console.log('🎯 STAGE 2 DEMO INSTRUCTIONS:');\n            console.log('=' + '='.repeat(50));\n            console.log('1️⃣ CLICK on the hero component in the preview');\n            console.log('2️⃣ OBSERVE the options panel appears in Design sidebar');\n            console.log('3️⃣ CHANGE layout from \"Left Aligned\" to \"Center Aligned\"');\n            console.log('4️⃣ MODIFY background color using color picker');\n            console.log('5️⃣ TRY different image styles (rounded/circle/square)');\n            console.log('6️⃣ CLICK \"Apply Preset\" to try different preset styles');\n            console.log('7️⃣ WATCH real-time preview updates as you change options');\n            console.log('');\n            console.log('💡 TIP: Look for [PHASE 2 CONFIGURED] badge on the component');\n            console.log('💡 TIP: Selected components show blue outline and selection badge');\n            console.log('');\n            console.log('📝 Manual test commands:');\n            console.log('   - runStage2Tests() - Run all tests again');\n            console.log('   - window.componentOptionsUI.getDebugInfo() - Check UI state');\n            console.log('   - window.componentSelectionManager.getDebugInfo() - Check selection');\n            console.log('=' + '='.repeat(50));\n            \n        }, 1000);\n        \n        // Add a topics component for additional testing\n        setTimeout(() => {\n            console.log('2️⃣ Adding topics component for layout testing...');\n            \n            window.enhancedComponentManager.addComponent('topics', {\n                id: 'stage2_demo_topics',\n                data: {\n                    topics: [\n                        {\n                            topic_title: 'Phase 2 Configuration',\n                            topic_description: 'Advanced component configuration systems'\n                        },\n                        {\n                            topic_title: 'JSON Schema Design',\n                            topic_description: 'Flexible schema-driven component architecture'\n                        },\n                        {\n                            topic_title: 'Real-Time Preview',\n                            topic_description: 'Instant visual feedback for configuration changes'\n                        },\n                        {\n                            topic_title: 'Preset Management',\n                            topic_description: 'Pre-configured component styling options'\n                        }\n                    ]\n                }\n            });\n            \n            console.log('✅ Topics component added - try selecting and changing layout to \"tags\"!');\n            \n        }, 1500);\n        \n        console.log('🎉 Stage 2 demo components will appear shortly!');\n        console.log('💡 Click on any component to open the configuration panel!');\n    }\n    \n    // Make test function available globally for manual testing\n    window.runStage2Tests = runStage2Tests;\n    \n    // Additional debug functions\n    window.testComponentSelection = function(componentId) {\n        if (window.componentSelectionManager) {\n            window.componentSelectionManager.selectComponentById(componentId);\n            console.log(`🎯 Selected component: ${componentId}`);\n        } else {\n            console.log('❌ ComponentSelectionManager not available');\n        }\n    };\n    \n    window.testPresetApplication = function(componentId, presetKey) {\n        if (window.componentOptionsUI && window.componentSelectionManager) {\n            window.componentSelectionManager.selectComponentById(componentId);\n            setTimeout(() => {\n                window.componentOptionsUI.applyPreset(presetKey);\n                console.log(`🎨 Applied preset ${presetKey} to ${componentId}`);\n            }, 100);\n        } else {\n            console.log('❌ Required UI components not available');\n        }\n    };\n    \n    window.inspectComponentConfiguration = function(componentId) {\n        if (window.componentConfigurationManager) {\n            const config = window.componentConfigurationManager.getComponentConfiguration(componentId);\n            console.log(`🔍 Configuration for ${componentId}:`, config);\n            return config;\n        } else {\n            console.log('❌ ComponentConfigurationManager not available');\n            return null;\n        }\n    };\n    \n    console.log('🧪 STAGE 2 TEST: Loaded. Tests will run automatically when systems are ready.');\n    console.log('💡 TIP: Run manually with: runStage2Tests()');\n    console.log('💡 TIP: Test selection with: testComponentSelection(\"componentId\")');\n    console.log('💡 TIP: Test presets with: testPresetApplication(\"componentId\", \"professional\")');\n    \n})();