// ===========================================================================\n// STANDALONE RACE CONDITION TEST - Copy and paste this into browser console\n// ===========================================================================\n\n(function() {\n    console.log('🧪 Standalone Race Condition Test Starting...');\n    console.log('📍 This test runs independently of initialization systems');\n    \n    // Test function\n    function testRaceConditionNow() {\n        const results = {\n            timestamp: new Date().toISOString(),\n            systemsAvailable: {},\n            testsPassed: 0,\n            testsTotal: 0,\n            raceConditionFixed: false,\n            errors: []\n        };\n        \n        // Check system availability\n        results.systemsAvailable = {\n            enhancedComponentManager: !!window.enhancedComponentManager,\n            componentManagerInit: !!window.enhancedComponentManager?.isInitialized,\n            addComponentMethod: typeof window.enhancedComponentManager?.addComponent === 'function',\n            removeComponentMethod: typeof window.enhancedComponentManager?.removeComponent === 'function',\n            renderer: !!window.renderer,\n            rendererInit: !!window.renderer?.initialized,\n            stateManager: !!window.enhancedStateManager,\n            coordinationManager: !!window.startupCoordinationManager,\n            eventBus: !!window.eventBus,\n            guestifyData: !!window.guestifyData,\n            mediaKitPreview: !!document.getElementById('media-kit-preview')\n        };\n        \n        console.log('📊 System Availability:', results.systemsAvailable);\n        \n        // Test 1: Component Manager Availability\n        results.testsTotal++;\n        if (results.systemsAvailable.enhancedComponentManager && results.systemsAvailable.addComponentMethod) {\n            results.testsPassed++;\n            console.log('✅ Test 1: Component manager available');\n        } else {\n            console.log('❌ Test 1: Component manager not available');\n            results.errors.push('Component manager not available or missing addComponent method');\n        }\n        \n        // Test 2: Authority-Hook Component Addition (Main Race Condition Test)\n        results.testsTotal++;\n        if (results.systemsAvailable.enhancedComponentManager && results.systemsAvailable.addComponentMethod) {\n            try {\n                console.log('🧪 Test 2: Adding authority-hook component...');\n                \n                // Capture any console errors during component addition\n                const originalConsoleError = console.error;\n                const capturedErrors = [];\n                console.error = function(...args) {\n                    capturedErrors.push(args.join(' '));\n                    originalConsoleError.apply(console, args);\n                };\n                \n                // Attempt to add authority-hook component\n                const componentId = window.enhancedComponentManager.addComponent('authority-hook');\n                \n                // Restore original console.error\n                console.error = originalConsoleError;\n                \n                if (componentId) {\n                    results.testsPassed++;\n                    console.log(`✅ Test 2: Authority-hook component added successfully (ID: ${componentId})`);\n                    \n                    // Check for race condition indicators\n                    const abortErrors = capturedErrors.filter(error => \n                        error.includes('aborted') || \n                        error.includes('signal is aborted') ||\n                        error.includes('fetch abort')\n                    );\n                    \n                    const renderingErrors = capturedErrors.filter(error =>\n                        error.includes('Error rendering component') ||\n                        error.includes('authority-hook')\n                    );\n                    \n                    if (abortErrors.length === 0 && renderingErrors.length === 0) {\n                        results.raceConditionFixed = true;\n                        console.log('🎉 NO RACE CONDITION ERRORS DETECTED!');\n                        console.log('✅ Authority-hook component renders cleanly without abort errors');\n                    } else {\n                        console.log('❌ Race condition errors detected:');\n                        [...abortErrors, ...renderingErrors].forEach(error => console.log(`  - ${error}`));\n                        results.errors.push('Race condition errors detected during component rendering');\n                    }\n                    \n                    // Clean up the test component\n                    try {\n                        if (window.enhancedComponentManager.removeComponent) {\n                            window.enhancedComponentManager.removeComponent(componentId);\n                            console.log('🧹 Test component cleaned up');\n                        }\n                    } catch (cleanupError) {\n                        console.log('⚠️ Cleanup error (non-critical):', cleanupError.message);\n                    }\n                    \n                } else {\n                    console.log('❌ Test 2: Component addition failed - no ID returned');\n                    results.errors.push('Component addition returned no ID');\n                }\n                \n            } catch (error) {\n                console.log('❌ Test 2: Component addition threw error:', error.message);\n                results.errors.push(`Component addition error: ${error.message}`);\n                \n                if (error.message.includes('aborted') || error.message.includes('signal')) {\n                    console.log('🚫 RACE CONDITION DETECTED: Template fetch was aborted');\n                    results.errors.push('Race condition detected - template fetch aborted');\n                }\n            }\n        } else {\n            console.log('❌ Test 2: Skipped - component manager not available');\n        }\n        \n        // Test 3: Coordination Manager Status\n        results.testsTotal++;\n        if (results.systemsAvailable.coordinationManager) {\n            try {\n                const status = window.startupCoordinationManager.getStatus();\n                if (status.state === 'COMPLETE' && !status.renderingBlocked) {\n                    results.testsPassed++;\n                    console.log('✅ Test 3: Coordination manager working properly');\n                } else {\n                    console.log('⚠️ Test 3: Coordination manager status:', status.state, 'Blocked:', status.renderingBlocked);\n                }\n            } catch (error) {\n                console.log('❌ Test 3: Coordination manager error:', error.message);\n            }\n        } else {\n            console.log('⚠️ Test 3: Coordination manager not available');\n        }\n        \n        // Summary\n        console.log('\\n📋 STANDALONE TEST RESULTS:');\n        console.log(`  📊 Tests Passed: ${results.testsPassed}/${results.testsTotal}`);\n        console.log(`  🎯 Race Condition Fixed: ${results.raceConditionFixed ? 'YES ✅' : 'NO ❌'}`);\n        \n        if (results.raceConditionFixed) {\n            console.log('\\n🎉 SUCCESS: Race condition appears to be FIXED!');\n            console.log('✅ Authority-hook component renders without \"signal is aborted\" errors');\n            console.log('✅ No component rendering failures detected');\n        } else if (results.testsPassed === 0) {\n            console.log('\\n❌ SYSTEM NOT READY: Core systems are not available');\n            console.log('💡 The page may still be loading or there are initialization issues');\n        } else {\n            console.log('\\n⚠️ MIXED RESULTS: Some tests passed but race condition may persist');\n        }\n        \n        if (results.errors.length > 0) {\n            console.log('\\n❌ Errors detected:');\n            results.errors.forEach(error => console.log(`  - ${error}`));\n        }\n        \n        console.log('\\n🔧 Available Commands:');\n        console.log('  testRaceConditionNow()  - Run this test again');\n        console.log('  window.quickDiagnostic?.() - System diagnostic (if available)');\n        console.log('  window.testAuthorityHook?.() - Simple component test (if available)');\n        \n        return results;\n    }\n    \n    // Make the test function globally available\n    window.testRaceConditionNow = testRaceConditionNow;\n    \n    // Run the test immediately\n    console.log('🚀 Running standalone test now...');\n    const results = testRaceConditionNow();\n    \n    // Give guidance based on results\n    if (results.raceConditionFixed) {\n        console.log('\\n🎯 NEXT STEPS: Race condition fix is working!');\n        console.log('  1. Try adding more components to verify stability');\n        console.log('  2. Test with different component types');\n        console.log('  3. Monitor for any remaining issues');\n    } else if (results.testsPassed === 0) {\n        console.log('\\n🎯 NEXT STEPS: System not ready');\n        console.log('  1. Wait for page to finish loading');\n        console.log('  2. Try refreshing the page');\n        console.log('  3. Run testRaceConditionNow() again in a few seconds');\n    } else {\n        console.log('\\n🎯 NEXT STEPS: Issues detected');\n        console.log('  1. Run window.quickDiagnostic?.emergencyBypass?.() if available');\n        console.log('  2. Check browser console for additional error messages');\n        console.log('  3. Try refreshing the page');\n    }\n    \n})();\n\nconsole.log('\\n📚 STANDALONE TEST LOADED');\nconsole.log('🔄 To run again: testRaceConditionNow()');\n