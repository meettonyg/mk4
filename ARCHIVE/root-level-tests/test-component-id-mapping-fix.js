/**\n * Test Script: Component ID Mapping Fix Validation\n * \n * This script validates that the root cause fix for component ID mapping is working correctly.\n * It checks that DOM elements and state components use consistent IDs.\n */\n\n(function() {\n    'use strict';\n    \n    console.group('%c\ud83d\udd27 COMPONENT ID MAPPING FIX VALIDATION', 'font-size: 16px; font-weight: bold; color: #10b981; background: #ecfdf5; padding: 4px 8px; border-radius: 4px;');\n    \n    /**\n     * Test 1: Validate consistent ID format\n     */\n    function testIdFormat() {\n        console.log('\\n1\ufe0f\u20e3 TESTING: Component ID Format Consistency');\n        console.log('\u2550'.repeat(60));\n        \n        const stateManager = window.GMKB?.systems?.StateManager || window.StateManager;\n        if (!stateManager) {\n            console.warn('\u274c StateManager not found');\n            return false;\n        }\n        \n        const state = stateManager.getState();\n        const stateComponentIds = Object.keys(state.components || {});\n        \n        console.log('\ud83d\udcca State Component IDs:', stateComponentIds);\n        \n        // Check if all state IDs follow the 'component-{timestamp}' format\n        const validStateIds = stateComponentIds.filter(id => \n            id.match(/^component-\\d+$/)\n        );\n        \n        console.log('\u2705 Valid State ID Format:', validStateIds.length + '/' + stateComponentIds.length);\n        \n        // Check DOM elements\n        const domComponents = Array.from(document.querySelectorAll('[data-component-id]'));\n        const domComponentIds = domComponents.map(el => el.getAttribute('data-component-id'));\n        \n        console.log('\ud83d\udcca DOM Component IDs:', domComponentIds);\n        \n        // Check if DOM IDs match state IDs or use consistent format\n        const matchingIds = domComponentIds.filter(domId => \n            stateComponentIds.includes(domId) || domId.match(/^component-\\d+$/)\n        );\n        \n        console.log('\u2705 DOM IDs with Consistent Format:', matchingIds.length + '/' + domComponentIds.length);\n        \n        const formatConsistent = validStateIds.length === stateComponentIds.length && \n                                matchingIds.length === domComponentIds.length;\n        \n        if (formatConsistent) {\n            console.log('\u2705 ID FORMAT: CONSISTENT');\n        } else {\n            console.log('\u274c ID FORMAT: INCONSISTENT');\n            console.log('  - Invalid state IDs:', stateComponentIds.filter(id => !id.match(/^component-\\d+$/)));\n            console.log('  - Invalid DOM IDs:', domComponentIds.filter(id => !id.match(/^component-\\d+$/)));\n        }\n        \n        return formatConsistent;\n    }\n    \n    /**\n     * Test 2: Validate DOM to State mapping\n     */\n    function testDomStateMapping() {\n        console.log('\\n2\ufe0f\u20e3 TESTING: DOM to State Component Mapping');\n        console.log('\u2550'.repeat(60));\n        \n        const stateManager = window.GMKB?.systems?.StateManager || window.StateManager;\n        if (!stateManager) {\n            console.warn('\u274c StateManager not found');\n            return false;\n        }\n        \n        const state = stateManager.getState();\n        const stateComponentIds = Object.keys(state.components || {});\n        \n        const domComponents = Array.from(document.querySelectorAll('[data-component-id]'));\n        let mappingSuccessful = true;\n        let mappingResults = [];\n        \n        domComponents.forEach(domElement => {\n            const domId = domElement.getAttribute('data-component-id');\n            const wrapper = domElement.closest('[id^=\"component-\"]');\n            const wrapperId = wrapper ? wrapper.id : null;\n            \n            let mappedStateId = null;\n            let mappingMethod = 'none';\n            \n            // Direct mapping\n            if (state.components[domId]) {\n                mappedStateId = domId;\n                mappingMethod = 'direct';\n            }\n            // Wrapper mapping\n            else if (wrapperId && state.components[wrapperId]) {\n                mappedStateId = wrapperId;\n                mappingMethod = 'wrapper';\n            }\n            // Partial match\n            else {\n                mappedStateId = stateComponentIds.find(stateId => \n                    stateId.includes(domId) || domId.includes(stateId)\n                );\n                if (mappedStateId) {\n                    mappingMethod = 'partial';\n                }\n            }\n            \n            const result = {\n                domId,\n                wrapperId,\n                mappedStateId,\n                mappingMethod,\n                success: !!mappedStateId\n            };\n            \n            mappingResults.push(result);\n            \n            if (!mappedStateId) {\n                mappingSuccessful = false;\n            }\n            \n            console.log(`${result.success ? '\u2705' : '\u274c'} DOM ID: ${domId} \u2192 State ID: ${mappedStateId || 'NOT FOUND'} (${mappingMethod})`);\n        });\n        \n        const successRate = mappingResults.filter(r => r.success).length / mappingResults.length;\n        console.log(`\ud83d\udcca Mapping Success Rate: ${Math.round(successRate * 100)}% (${mappingResults.filter(r => r.success).length}/${mappingResults.length})`);\n        \n        if (mappingSuccessful) {\n            console.log('\u2705 DOM-STATE MAPPING: ALL SUCCESSFUL');\n        } else {\n            console.log('\u274c DOM-STATE MAPPING: SOME FAILURES');\n        }\n        \n        return mappingSuccessful;\n    }\n    \n    /**\n     * Test 3: Validate edit functionality\n     */\n    function testEditFunctionality() {\n        console.log('\\n3\ufe0f\u20e3 TESTING: Edit Functionality');\n        console.log('\u2550'.repeat(60));\n        \n        const domComponents = Array.from(document.querySelectorAll('[data-component-id]'));\n        if (domComponents.length === 0) {\n            console.log('\u2139\ufe0f No DOM components found to test edit functionality');\n            return true;\n        }\n        \n        let editTestSuccessful = true;\n        \n        domComponents.forEach((domElement, index) => {\n            const domId = domElement.getAttribute('data-component-id');\n            \n            try {\n                // Mock the edit request to see if it would work\n                console.log(`\ud83e\uddea Testing edit for DOM ID: ${domId}`);\n                \n                // Check if the enhanced ID resolution would work\n                const stateManager = window.GMKB?.systems?.StateManager || window.StateManager;\n                const state = stateManager.getState();\n                const stateComponentIds = Object.keys(state.components || {});\n                \n                let foundId = null;\n                \n                // Try direct match\n                if (state.components[domId]) {\n                    foundId = domId;\n                }\n                // Try wrapper match\n                else {\n                    const wrapper = domElement.closest('[id^=\"component-\"]');\n                    if (wrapper && wrapper.id && state.components[wrapper.id]) {\n                        foundId = wrapper.id;\n                    }\n                }\n                // Try partial match\n                if (!foundId) {\n                    foundId = stateComponentIds.find(stateId => \n                        stateId.includes(domId) || domId.includes(stateId)\n                    );\n                }\n                // Try type matching\n                if (!foundId) {\n                    const componentType = domElement.className.match(/(\\w+)-component/)?.[1];\n                    if (componentType) {\n                        foundId = stateComponentIds.find(stateId => \n                            state.components[stateId]?.type === componentType\n                        );\n                    }\n                }\n                \n                if (foundId) {\n                    console.log(`\u2705 Edit resolution: ${domId} \u2192 ${foundId}`);\n                } else {\n                    console.log(`\u274c Edit resolution failed for: ${domId}`);\n                    editTestSuccessful = false;\n                }\n                \n            } catch (error) {\n                console.log(`\u274c Edit test error for ${domId}:`, error.message);\n                editTestSuccessful = false;\n            }\n        });\n        \n        if (editTestSuccessful) {\n            console.log('\u2705 EDIT FUNCTIONALITY: ALL RESOLUTIONS SUCCESSFUL');\n        } else {\n            console.log('\u274c EDIT FUNCTIONALITY: SOME RESOLUTION FAILURES');\n        }\n        \n        return editTestSuccessful;\n    }\n    \n    /**\n     * Test 4: Validate component controls attachment\n     */\n    function testControlsAttachment() {\n        console.log('\\n4\ufe0f\u20e3 TESTING: Component Controls Attachment');\n        console.log('\u2550'.repeat(60));\n        \n        const domComponents = Array.from(document.querySelectorAll('[data-component-id]'));\n        if (domComponents.length === 0) {\n            console.log('\u2139\ufe0f No DOM components found to test controls attachment');\n            return true;\n        }\n        \n        let controlsTestSuccessful = true;\n        \n        domComponents.forEach((domElement, index) => {\n            const domId = domElement.getAttribute('data-component-id');\n            const hasControls = domElement.querySelector('.component-controls') !== null;\n            const hasControlsAttachedAttr = domElement.hasAttribute('data-controls-attached');\n            \n            console.log(`${hasControls ? '\u2705' : '\u26a0\ufe0f'} Component ${domId}: Controls present: ${hasControls}, Marked as attached: ${hasControlsAttachedAttr}`);\n            \n            if (!hasControls && domComponents.length <= 5) { // Only expect controls on small numbers of components\n                controlsTestSuccessful = false;\n            }\n        });\n        \n        if (controlsTestSuccessful) {\n            console.log('\u2705 CONTROLS ATTACHMENT: SUCCESSFUL');\n        } else {\n            console.log('\u26a0\ufe0f CONTROLS ATTACHMENT: SOME COMPONENTS MISSING CONTROLS');\n        }\n        \n        return controlsTestSuccessful;\n    }\n    \n    /**\n     * Run all tests\n     */\n    function runAllTests() {\n        const results = {\n            idFormat: testIdFormat(),\n            domStateMapping: testDomStateMapping(),\n            editFunctionality: testEditFunctionality(),\n            controlsAttachment: testControlsAttachment()\n        };\n        \n        console.log('\\n\ud83c\udfc1 FINAL RESULTS');\n        console.log('\u2550'.repeat(60));\n        \n        const allPassed = Object.values(results).every(result => result);\n        const passedCount = Object.values(results).filter(result => result).length;\n        const totalCount = Object.keys(results).length;\n        \n        Object.entries(results).forEach(([testName, passed]) => {\n            console.log(`${passed ? '\u2705' : '\u274c'} ${testName}: ${passed ? 'PASSED' : 'FAILED'}`);\n        });\n        \n        console.log(`\\n\ud83d\udcca Overall Score: ${passedCount}/${totalCount} (${Math.round((passedCount/totalCount) * 100)}%)`);\n        \n        if (allPassed) {\n            console.log('\\n\ud83c\udf89 ALL TESTS PASSED! Component ID mapping fix is working correctly.');\n        } else {\n            console.log('\\n\u26a0\ufe0f Some tests failed. Component ID mapping may need additional fixes.');\n        }\n        \n        return results;\n    }\n    \n    // Export test functions to global scope for manual testing\n    window.testComponentIdMappingFix = {\n        runAllTests,\n        testIdFormat,\n        testDomStateMapping,\n        testEditFunctionality,\n        testControlsAttachment\n    };\n    \n    // Auto-run tests after a short delay to ensure everything is loaded\n    setTimeout(() => {\n        console.log('\\n\u23f0 Auto-running Component ID Mapping Fix validation in 3 seconds...');\n        setTimeout(runAllTests, 3000);\n    }, 1000);\n    \n    console.log('\\n\ud83d\udca1 Manual Commands Available:');\n    console.log('   testComponentIdMappingFix.runAllTests() - Run all tests');\n    console.log('   testComponentIdMappingFix.testIdFormat() - Test ID format consistency');\n    console.log('   testComponentIdMappingFix.testDomStateMapping() - Test DOM to state mapping');\n    console.log('   testComponentIdMappingFix.testEditFunctionality() - Test edit functionality');\n    console.log('   testComponentIdMappingFix.testControlsAttachment() - Test controls attachment');\n    \n    console.groupEnd();\n    \n})();\n\n/**\n * Quick fix commands for debugging\n */\nwindow.debugComponentIdMapping = function() {\n    const stateManager = window.GMKB?.systems?.StateManager || window.StateManager;\n    const state = stateManager?.getState() || {};\n    const stateIds = Object.keys(state.components || {});\n    const domElements = Array.from(document.querySelectorAll('[data-component-id]'));\n    const domIds = domElements.map(el => el.getAttribute('data-component-id'));\n    \n    console.group('\ud83d\udd0d Component ID Mapping Debug');\n    console.log('State Component IDs:', stateIds);\n    console.log('DOM Component IDs:', domIds);\n    console.log('State Components:', state.components);\n    console.log('DOM Elements:', domElements);\n    console.groupEnd();\n};\n\nwindow.fixComponentIdMapping = function() {\n    console.log('\ud83d\udd27 Attempting to fix component ID mapping...');\n    \n    const stateManager = window.GMKB?.systems?.StateManager || window.StateManager;\n    const state = stateManager?.getState() || {};\n    const domElements = Array.from(document.querySelectorAll('[data-component-id]'));\n    \n    domElements.forEach(domElement => {\n        const domId = domElement.getAttribute('data-component-id');\n        const wrapper = domElement.closest('[id]');\n        \n        if (wrapper && wrapper.id.startsWith('component-') && state.components[wrapper.id]) {\n            console.log(`\ud83d\udd27 Updating DOM element ID from ${domId} to ${wrapper.id}`);\n            domElement.setAttribute('data-component-id', wrapper.id);\n        }\n    });\n    \n    console.log('\u2705 Component ID mapping fix attempt complete');\n};