/**
 * Phase 1 Configuration Bridge
 * Makes configuration available as gmkbConfig for the Vue bundle
 */

(function() {
    console.log('🔧 Phase 1 Configuration Bridge Loading...');
    
    // Check what's available
    const availableConfigs = {
        gmkbData: typeof window.gmkbData !== 'undefined',
        gmkbConfig: typeof window.gmkbConfig !== 'undefined',
        gmkbVueData: typeof window.gmkbVueData !== 'undefined'
    };
    
    console.log('Available configurations:', availableConfigs);
    
    // Find the actual configuration
    let config = null;
    if (window.gmkbData) {
        config = window.gmkbData;
        console.log('Using gmkbData as configuration source');
    } else if (window.gmkbVueData) {
        config = window.gmkbVueData;
        console.log('Using gmkbVueData as configuration source');
    }
    
    if (config) {
        // Create gmkbConfig if it doesn't exist
        if (!window.gmkbConfig) {
            // Transform the configuration to Phase 1 format
            window.gmkbConfig = {
                // API Configuration
                api: config.restUrl ? config.restUrl.replace(/\/$/, '') + '/gmkb/v1/' : '/wp-json/gmkb/v1/',
                nonce: config.restNonce || config.nonce,
                ajaxUrl: config.ajaxUrl,
                ajaxNonce: config.nonce,
                
                // Post Data
                postId: config.postId || config.post_id,
                postType: config.postType || 'mkcg',
                
                // Plugin Configuration
                pluginUrl: config.pluginUrl,
                version: config.pluginVersion || '1.0.0',
                debugMode: config.debugMode,
                
                // Component Discovery
                components: config.components || [],
                categories: config.categories || [],
                componentTypes: config.componentTypes || [],
                
                // Initial State
                savedState: config.saved_state || config.savedState || {
                    components: {},
                    sections: [],
                    theme: 'professional_clean'
                },
                podsData: config.pods_data || config.podsData || {},
                
                // Feature Flags
                features: {
                    pureVueMode: true,
                    apiVersion: '1.0',
                    autoSave: config.autoSaveEnabled !== false,
                    autoSaveInterval: 30000
                }
            };
            
            console.log('✅ Created gmkbConfig from', config === window.gmkbData ? 'gmkbData' : 'gmkbVueData');
            console.log('Configuration:', window.gmkbConfig);
            
            // Make testPhase1 function available
            window.testPhase1 = function() {
                const cfg = window.gmkbConfig;
                console.log('🧪 Testing Phase 1 API...');
                console.log('API URL:', cfg.api);
                console.log('Post ID:', cfg.postId);
                console.log('Nonce:', cfg.nonce);
                
                // Test the API
                fetch(`${cfg.api}mediakit/${cfg.postId}`, {
                    headers: { 'X-WP-Nonce': cfg.nonce }
                })
                .then(response => {
                    console.log('Response status:', response.status);
                    return response.json();
                })
                .then(data => {
                    console.log('✅ API Response:', data);
                    console.log('Components:', data.components);
                    console.log('Pods Data:', data.podsData);
                })
                .catch(error => {
                    console.error('❌ API Error:', error);
                });
            };
            
            console.log('💡 Run testPhase1() to test the API');
        } else {
            console.log('✅ gmkbConfig already exists');
        }
    } else {
        console.error('❌ No configuration found! Looking for gmkbData or gmkbVueData');
        console.log('Available window objects:', Object.keys(window).filter(k => k.includes('gmkb')));
    }
})();
