/**\n * @file debug-component-controls-and-drag-drop.js\n * @description Debug script to test both component controls and drag-drop functionality\n * Tests the complete integration after root-level fixes\n */\n\nconsole.log('%c🧪 COMPONENT CONTROLS & DRAG-DROP DEBUG TEST', 'font-size: 16px; font-weight: bold; color: #16a085; background: #ecf0f1; padding: 8px; border-radius: 4px;');\n\n// Test Configuration\nconst DEBUG_CONFIG = {\n    testComponentId: 'component-1752852006516', // Use existing component from console logs\n    testDuration: 10000, // 10 seconds\n    checkInterval: 1000   // Check every second\n};\n\n/**\n * ROOT FIX: Comprehensive debug test for controls and drag-drop\n */\nfunction runComprehensiveDebugTest() {\n    console.group('🔧 ROOT FIX: Comprehensive Debug Test');\n    \n    try {\n        // Step 1: Test ComponentControlsManager availability\n        console.log('🔍 Step 1: Testing ComponentControlsManager...');\n        testComponentControlsManager();\n        \n        // Step 2: Test existing component controls\n        console.log('🔍 Step 2: Testing existing component controls...');\n        testExistingComponentControls();\n        \n        // Step 3: Test drag and drop system\n        console.log('🔍 Step 3: Testing drag and drop system...');\n        testDragDropSystem();\n        \n        // Step 4: Test component addition manually\n        console.log('🔍 Step 4: Testing manual component addition...');\n        testManualComponentAddition();\n        \n        // Step 5: Test event system\n        console.log('🔍 Step 5: Testing event system...');\n        testEventSystem();\n        \n    } catch (error) {\n        console.error('❌ DEBUG TEST ERROR:', error);\n    }\n    \n    console.groupEnd();\n}\n\n/**\n * Test ComponentControlsManager availability and functionality\n */\nfunction testComponentControlsManager() {\n    console.log('🎛️ Testing ComponentControlsManager...');\n    \n    // Check if ComponentControlsManager is available\n    if (window.componentControlsManager) {\n        console.log('✅ ComponentControlsManager is available');\n        \n        // Get status\n        try {\n            const status = window.componentControlsManager.getStatus();\n            console.log('📊 ComponentControlsManager Status:', status);\n            \n            if (status.isInitialized) {\n                console.log('✅ ComponentControlsManager is initialized');\n            } else {\n                console.warn('⚠️ ComponentControlsManager is NOT initialized');\n            }\n            \n            console.log(`📝 Controls attached to ${status.attachedControls} components`);\n            \n        } catch (error) {\n            console.error('❌ Error getting ComponentControlsManager status:', error);\n        }\n        \n    } else {\n        console.error('❌ ComponentControlsManager is NOT available');\n        \n        // Check if it might be loading\n        console.log('🔍 Checking for ComponentControlsManager in 2 seconds...');\n        setTimeout(() => {\n            if (window.componentControlsManager) {\n                console.log('✅ ComponentControlsManager loaded after delay');\n            } else {\n                console.error('❌ ComponentControlsManager still not available after delay');\n            }\n        }, 2000);\n    }\n}\n\n/**\n * Test controls on existing components\n */\nfunction testExistingComponentControls() {\n    console.log('🧩 Testing existing component controls...');\n    \n    // Find existing components\n    const components = document.querySelectorAll('.media-kit-component');\n    console.log(`📋 Found ${components.length} existing components`);\n    \n    if (components.length === 0) {\n        console.warn('⚠️ No existing components found to test controls on');\n        return;\n    }\n    \n    // Test controls on each component\n    components.forEach((component, index) => {\n        const componentId = component.id;\n        console.log(`🔍 Testing component ${index + 1}: ${componentId}`);\n        \n        // Check if controls are attached\n        const hasControlsAttached = component.hasAttribute('data-handlers-attached');\n        const controlsElement = component.querySelector('.component-controls');\n        \n        console.log(`  - Controls handlers attached: ${hasControlsAttached}`);\n        console.log(`  - Controls element present: ${!!controlsElement}`);\n        \n        if (controlsElement) {\n            const buttons = controlsElement.querySelectorAll('.component-control');\n            console.log(`  - Control buttons found: ${buttons.length}`);\n            \n            buttons.forEach((button, btnIndex) => {\n                const action = button.getAttribute('data-action');\n                console.log(`    Button ${btnIndex + 1}: ${action}`);\n            });\n        } else {\n            console.warn(`  ⚠️ No controls element found for ${componentId}`);\n            \n            // Try to manually attach controls\n            if (window.componentControlsManager) {\n                console.log(`  🔧 Attempting to manually attach controls to ${componentId}...`);\n                const success = window.componentControlsManager.attachControls(component, componentId);\n                console.log(`  📝 Manual attachment result: ${success}`);\n            }\n        }\n    });\n}\n\n/**\n * Test drag and drop system\n */\nfunction testDragDropSystem() {\n    console.log('🎯 Testing drag and drop system...');\n    \n    // Check if DragDropManager is available\n    if (window.DragDropManager) {\n        console.log('✅ DragDropManager is available');\n        \n        try {\n            const status = window.DragDropManager.getStatus();\n            console.log('📊 DragDropManager Status:', status);\n            \n        } catch (error) {\n            console.error('❌ Error getting DragDropManager status:', error);\n        }\n        \n    } else {\n        console.error('❌ DragDropManager is NOT available');\n    }\n    \n    // Check for draggable components in library\n    const componentLibrary = document.getElementById('component-grid');\n    if (componentLibrary) {\n        const draggableComponents = componentLibrary.querySelectorAll('[draggable=\"true\"]');\n        console.log(`📋 Found ${draggableComponents.length} draggable components in library`);\n        \n        if (draggableComponents.length === 0) {\n            console.warn('⚠️ No draggable components found in component library');\n        }\n    } else {\n        console.error('❌ Component library not found');\n    }\n    \n    // Check for drop zones\n    const dropZones = document.querySelectorAll('.drop-zone');\n    const previewContainer = document.getElementById('media-kit-preview');\n    \n    console.log(`📋 Found ${dropZones.length} drop zones`);\n    console.log(`📋 Preview container found: ${!!previewContainer}`);\n}\n\n/**\n * Test manual component addition\n */\nfunction testManualComponentAddition() {\n    console.log('🧪 Testing manual component addition...');\n    \n    // Check if ComponentManager is available\n    if (window.GMKB && window.GMKB.systems && window.GMKB.systems.ComponentManager) {\n        console.log('✅ ComponentManager is available');\n        \n        // Try to add a test component\n        console.log('🔧 Attempting to add a test hero component...');\n        \n        try {\n            const componentId = window.GMKB.systems.ComponentManager.addComponent('hero', {\n                title: 'Debug Test Component',\n                debugTest: true,\n                timestamp: Date.now()\n            });\n            \n            console.log(`✅ Test component addition initiated with ID: ${componentId}`);\n            \n            // Check if component appears in DOM after a delay\n            setTimeout(() => {\n                const addedComponent = document.getElementById(componentId);\n                if (addedComponent) {\n                    console.log('✅ Test component successfully added to DOM');\n                    \n                    // Test controls on new component\n                    const hasControls = addedComponent.querySelector('.component-controls');\n                    console.log(`📝 Test component has controls: ${!!hasControls}`);\n                } else {\n                    console.error('❌ Test component not found in DOM after addition');\n                }\n            }, 2000);\n            \n        } catch (error) {\n            console.error('❌ Error adding test component:', error);\n        }\n        \n    } else {\n        console.error('❌ ComponentManager is NOT available');\n    }\n}\n\n/**\n * Test event system\n */\nfunction testEventSystem() {\n    console.log('📡 Testing event system...');\n    \n    // Test ComponentControlsManager ready event\n    let controlsManagerEventReceived = false;\n    \n    const testEventListener = (event) => {\n        controlsManagerEventReceived = true;\n        console.log('✅ ComponentControlsManager ready event received:', event.detail);\n    };\n    \n    document.addEventListener('gmkb:component-controls-manager-ready', testEventListener);\n    \n    // Also test GMKB events\n    if (window.GMKB && window.GMKB.dispatch) {\n        console.log('✅ GMKB event system is available');\n        \n        // Test custom event\n        const testEventData = {\n            test: true,\n            timestamp: Date.now(),\n            source: 'debug-test'\n        };\n        \n        // Listen for test event\n        const testGMKBEventListener = (event) => {\n            console.log('✅ GMKB test event received:', event.detail);\n        };\n        \n        window.GMKB.subscribe('gmkb:debug-test', testGMKBEventListener);\n        \n        // Dispatch test event\n        window.GMKB.dispatch('gmkb:debug-test', testEventData);\n        \n    } else {\n        console.error('❌ GMKB event system is NOT available');\n    }\n    \n    // Check if ComponentControlsManager ready event was already fired\n    setTimeout(() => {\n        if (!controlsManagerEventReceived) {\n            console.warn('⚠️ ComponentControlsManager ready event not received - may have fired before test');\n            \n            // Try to manually trigger the event\n            if (window.componentControlsManager) {\n                console.log('🔧 Manually triggering ComponentControlsManager ready event...');\n                document.dispatchEvent(new CustomEvent('gmkb:component-controls-manager-ready', {\n                    detail: {\n                        timestamp: Date.now(),\n                        manager: window.componentControlsManager,\n                        architecture: 'event-driven',\n                        manualTrigger: true\n                    }\n                }));\n            }\n        }\n        \n        // Clean up event listener\n        document.removeEventListener('gmkb:component-controls-manager-ready', testEventListener);\n    }, 1000);\n}\n\n/**\n * Debug component controls for specific component\n */\nfunction debugSpecificComponent(componentId) {\n    console.group(`🔍 Debugging specific component: ${componentId}`);\n    \n    const component = document.getElementById(componentId);\n    if (!component) {\n        console.error(`❌ Component ${componentId} not found in DOM`);\n        console.groupEnd();\n        return;\n    }\n    \n    console.log('✅ Component found in DOM');\n    \n    // Check component attributes\n    const hasHandlersAttached = component.hasAttribute('data-handlers-attached');\n    const hasControlsManager = component.hasAttribute('data-controls-manager');\n    const componentType = component.getAttribute('data-component-type');\n    \n    console.log('📝 Component Details:');\n    console.log(`  - Type: ${componentType}`);\n    console.log(`  - Handlers attached: ${hasHandlersAttached}`);\n    console.log(`  - Controls manager: ${hasControlsManager}`);\n    \n    // Check for controls element\n    const controlsElement = component.querySelector('.component-controls');\n    console.log(`  - Controls element: ${!!controlsElement}`);\n    \n    if (controlsElement) {\n        const buttons = controlsElement.querySelectorAll('.component-control');\n        console.log(`  - Control buttons: ${buttons.length}`);\n        \n        buttons.forEach((button, index) => {\n            const action = button.getAttribute('data-action');\n            const title = button.getAttribute('title');\n            console.log(`    ${index + 1}. ${action} (${title})`);\n        });\n    } else {\n        console.warn('⚠️ No controls element found');\n        \n        // Try to attach controls manually\n        if (window.componentControlsManager) {\n            console.log('🔧 Attempting manual control attachment...');\n            const success = window.componentControlsManager.attachControls(component, componentId);\n            console.log(`📝 Manual attachment result: ${success}`);\n        }\n    }\n    \n    console.groupEnd();\n}\n\n// Auto-run comprehensive test\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => {\n        setTimeout(runComprehensiveDebugTest, 2000);\n    });\n} else {\n    setTimeout(runComprehensiveDebugTest, 2000);\n}\n\n// Export debug functions\nwindow.runComprehensiveDebugTest = runComprehensiveDebugTest;\nwindow.debugSpecificComponent = debugSpecificComponent;\nwindow.testComponentControlsManager = testComponentControlsManager;\nwindow.testDragDropSystem = testDragDropSystem;\nwindow.testManualComponentAddition = testManualComponentAddition;\n\nconsole.log('🧪 Debug script loaded - comprehensive test will run automatically');\nconsole.log('💡 Manual commands available:');\nconsole.log('  - runComprehensiveDebugTest()');\nconsole.log('  - debugSpecificComponent(\"component-id\")');\nconsole.log('  - testManualComponentAddition()');\n