/**
 * Toolbar Initialization Fix
 * Ensures toolbar buttons are properly initialized after page load
 */
(function() {
  'use strict';
  
  console.log('ðŸ”§ Initializing toolbar button fix...');
  
  // Function to setup all toolbar handlers
  function setupToolbarHandlers() {
    console.log('Setting up toolbar handlers...');
    
    // Device preview buttons - Use more specific selector
    const desktopBtn = document.querySelector('.toolbar__preview-btn[data-preview="desktop"]');
    const tabletBtn = document.querySelector('.toolbar__preview-btn[data-preview="tablet"]');
    const mobileBtn = document.querySelector('.toolbar__preview-btn[data-preview="mobile"]');
    
    if (desktopBtn && !desktopBtn.hasAttribute('data-initialized')) {
      desktopBtn.addEventListener('click', () => setDevicePreview('desktop'));
      desktopBtn.setAttribute('data-initialized', 'true');
      console.log('âœ… Desktop button initialized');
    }
    
    if (tabletBtn && !tabletBtn.hasAttribute('data-initialized')) {
      tabletBtn.addEventListener('click', () => setDevicePreview('tablet'));
      tabletBtn.setAttribute('data-initialized', 'true');
      console.log('âœ… Tablet button initialized');
    }
    
    if (mobileBtn && !mobileBtn.hasAttribute('data-initialized')) {
      mobileBtn.addEventListener('click', () => setDevicePreview('mobile'));
      mobileBtn.setAttribute('data-initialized', 'true');
      console.log('âœ… Mobile button initialized');
    }
    
    // Other toolbar buttons
    const buttons = {
      'global-theme-btn': () => showToast('Theme customizer coming soon', 'info'),
      'export-btn': exportMediaKit,
      'share-btn': () => showToast('Share functionality coming soon', 'info'),
      'undo-btn': () => showToast('Undo functionality coming soon', 'info'),
      'redo-btn': () => showToast('Redo functionality coming soon', 'info'),
      'save-btn': saveMediaKit
    };
    
    Object.entries(buttons).forEach(([id, handler]) => {
      const btn = document.getElementById(id);
      if (btn && !btn.hasAttribute('data-initialized')) {
        btn.addEventListener('click', handler);
        btn.setAttribute('data-initialized', 'true');
        console.log(`âœ… ${id} initialized`);
      }
    });
  }
  
  // Device preview function
  function setDevicePreview(device) {
    console.log(`Setting device preview: ${device}`);
    
    // Update button states
    document.querySelectorAll('.toolbar__preview-btn').forEach(btn => {
      btn.classList.remove('toolbar__preview-btn--active');
    });
    
    const activeBtn = document.querySelector(`.toolbar__preview-btn[data-preview="${device}"]`);
    if (activeBtn) {
      activeBtn.classList.add('toolbar__preview-btn--active');
    }
    
    // Update preview container
    const preview = document.getElementById('media-kit-preview') || 
                   document.getElementById('gmkb-preview-area') ||
                   document.querySelector('.preview__container');
                   
    if (preview) {
      // Remove all device classes
      preview.classList.remove('device-desktop', 'device-tablet', 'device-mobile');
      // Add new device class
      preview.classList.add(`device-${device}`);
      console.log(`Preview set to ${device} mode`);
    }
  }
  
  // Export function
  function exportMediaKit() {
    if (window.GMKB && window.GMKB.stateManager) {
      const state = window.GMKB.stateManager.getState();
      const dataStr = JSON.stringify(state, null, 2);
      const dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr);
      
      const exportFileDefaultName = `media-kit-${Date.now()}.json`;
      
      const linkElement = document.createElement('a');
      linkElement.setAttribute('href', dataUri);
      linkElement.setAttribute('download', exportFileDefaultName);
      linkElement.click();
      
      showToast('Media kit exported', 'success');
    } else {
      showToast('Export not ready yet', 'error');
    }
  }
  
  // Save function
  async function saveMediaKit() {
    const saveBtn = document.getElementById('save-btn');
    if (window.GMKB && window.GMKB.save) {
      if (saveBtn) {
        saveBtn.disabled = true;
        saveBtn.textContent = 'Saving...';
      }
      
      try {
        await window.GMKB.save();
        showToast('Saved successfully', 'success');
      } catch (error) {
        showToast('Save failed', 'error');
        console.error('Save error:', error);
      } finally {
        if (saveBtn) {
          saveBtn.disabled = false;
          saveBtn.textContent = 'Save';
        }
      }
    } else {
      showToast('Save not ready yet', 'error');
    }
  }
  
  // Toast function
  function showToast(message, type = 'info', duration = 3000) {
    // Remove existing toast
    const existing = document.querySelector('.toast');
    if (existing) existing.remove();
    
    const toast = document.createElement('div');
    toast.className = `toast toast--${type}`;
    toast.textContent = message;
    toast.style.cssText = `
      position: fixed;
      bottom: 20px;
      right: 20px;
      padding: 12px 20px;
      background: ${type === 'success' ? '#4CAF50' : type === 'error' ? '#f44336' : '#2196F3'};
      color: white;
      border-radius: 4px;
      z-index: 10000;
      transition: opacity 0.3s;
      box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    `;
    document.body.appendChild(toast);
    
    setTimeout(() => {
      toast.style.opacity = '0';
      setTimeout(() => toast.remove(), 300);
    }, duration);
  }
  
  // Make showToast available globally
  window.showToast = showToast;
  
  // Initialize on multiple events to ensure it works
  function init() {
    setupToolbarHandlers();
  }
  
  // Try multiple initialization strategies
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    // DOM is already loaded
    init();
  }
  
  // Also listen for GMKB ready event
  document.addEventListener('gmkb:ready', () => {
    console.log('GMKB ready event received, initializing toolbar...');
    setTimeout(init, 100); // Small delay to ensure everything is rendered
  });
  
  // Fallback: Try again after a short delay
  setTimeout(init, 500);
  setTimeout(init, 1000);
  
  console.log('Toolbar fix script loaded');
})();
