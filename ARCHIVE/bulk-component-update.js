/**\n * BULK COMPONENT UPDATE SCRIPT\n * Converts all components from Phase 1 to Phase 2 structure\n */\n\n// Component list to update (excluding already updated ones)\nconst componentsToUpdate = [\n    'booking-calendar',\n    'call-to-action', \n    'guest-intro',\n    'logo-grid',\n    'photo-gallery',\n    'podcast-player',\n    'questions',\n    'social',\n    'stats',\n    'testimonials',\n    'video-intro'\n];\n\n// Generic conversion function\nfunction convertToPhase2Structure(oldComponent) {\n    const newComponent = {\n        name: oldComponent.name,\n        category: oldComponent.category,\n        icon: oldComponent.icon,\n        description: oldComponent.description,\n        isPremium: oldComponent.isPremium || false,\n        version: '2.0.0-phase2',\n        order: oldComponent.order,\n        \n        // Convert settings to componentOptions\n        dataBindings: extractDataBindings(oldComponent.settings),\n        componentOptions: convertSettings(oldComponent.settings),\n        sections: convertSections(oldComponent.sections),\n        presets: generateDefaultPresets(oldComponent)\n    };\n    \n    return newComponent;\n}\n\nfunction extractDataBindings(settings) {\n    const bindings = {};\n    \n    Object.entries(settings).forEach(([key, setting]) => {\n        if (setting.mkcgMapping) {\n            // Convert MKCG mapping to Pods field binding\n            const podsField = convertMkcgToPods(setting.mkcgMapping);\n            bindings[key] = podsField;\n        }\n    });\n    \n    return bindings;\n}\n\nfunction convertMkcgToPods(mkcgMapping) {\n    // Convert MKCG dot notation to Pods field names\n    const mappings = {\n        'biography.biography.name': 'full_name',\n        'biography.biography.title': 'guest_title', \n        'biography.biography.short': 'biography_short',\n        'contact.email': 'email',\n        'contact.phone': 'phone',\n        'contact.website': 'website',\n        'topics.topics.topic_1': 'topic_1',\n        // Add more mappings as needed\n    };\n    \n    return mappings[mkcgMapping] || mkcgMapping.split('.').pop();\n}\n\nfunction convertSettings(settings) {\n    const options = {};\n    \n    Object.entries(settings).forEach(([key, setting]) => {\n        // Skip content fields, focus on styling/layout options\n        if (setting.section === 'appearance' || setting.type === 'select' || setting.type === 'checkbox') {\n            options[key] = {\n                type: convertFieldType(setting.type),\n                label: setting.label,\n                description: setting.helpText || `Configure ${setting.label.toLowerCase()}`,\n                default: setting.default,\n                section: setting.section || 'appearance',\n                preview: true\n            };\n            \n            if (setting.options) {\n                options[key].options = convertOptions(setting.options);\n            }\n        }\n    });\n    \n    return options;\n}\n\nfunction convertFieldType(oldType) {\n    const typeMapping = {\n        'checkbox': 'boolean',\n        'url': 'text',\n        'textarea': 'textarea'\n    };\n    \n    return typeMapping[oldType] || oldType;\n}\n\nfunction convertOptions(oldOptions) {\n    const newOptions = {};\n    \n    oldOptions.forEach(option => {\n        newOptions[option.value] = option.label;\n    });\n    \n    return newOptions;\n}\n\nfunction convertSections(oldSections) {\n    const sections = {};\n    \n    Object.entries(oldSections || {}).forEach(([key, section]) => {\n        sections[key] = {\n            title: section.title,\n            description: `Configure ${section.title.toLowerCase()} options`,\n            order: section.order,\n            icon: key === 'content' ? 'edit' : key === 'appearance' ? 'palette' : 'settings'\n        };\n    });\n    \n    // Ensure we have at least basic sections\n    if (!sections.content) {\n        sections.content = {\n            title: 'Content Settings',\n            description: 'Configure content and data',\n            order: 1,\n            icon: 'edit'\n        };\n    }\n    \n    if (!sections.appearance) {\n        sections.appearance = {\n            title: 'Appearance',\n            description: 'Customize styling and layout',\n            order: 2, \n            icon: 'palette'\n        };\n    }\n    \n    return sections;\n}\n\nfunction generateDefaultPresets(component) {\n    // Generate basic presets based on component type\n    const presets = {\n        standard: {\n            name: 'Standard',\n            options: {}\n        },\n        minimal: {\n            name: 'Minimal',\n            options: {}\n        }\n    };\n    \n    // Add premium preset if component is premium\n    if (component.isPremium) {\n        presets.premium = {\n            name: 'Premium Style',\n            options: {}\n        };\n    }\n    \n    return presets;\n}\n\nconsole.log('üîÑ BULK COMPONENT CONVERSION SCRIPT LOADED');\nconsole.log('üìã Components to update:', componentsToUpdate);\nconsole.log('üí° This script converts Phase 1 components to Phase 2 structure');\nconsole.log('‚ö†Ô∏è Manual review recommended after conversion');