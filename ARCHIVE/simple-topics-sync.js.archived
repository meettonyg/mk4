/**
 * Simple Topics Sync Fix
 * ROOT FIX: Minimal, event-driven sync without complexity
 * 
 * This replaces the complex bidirectional sync manager with a simple,
 * direct implementation that follows architectural principles
 */

(function() {
    'use strict';
    
    console.log('üîß SIMPLE SYNC: Loading simple topics sync...');
    
    // ROOT FIX: Direct event-driven initialization
    function initializeSimpleSync() {
        // Listen for design panel loaded event
        document.addEventListener('designPanelLoaded', function(event) {
            if (event.detail && event.detail.component === 'topics') {
                console.log('üéØ SIMPLE SYNC: Topics design panel loaded');
                setupTopicsSync();
            }
        });
        
        // Also try immediate setup if elements exist
        if (document.readyState === 'complete' || document.readyState === 'interactive') {
            const hasElements = document.querySelector('.topics-sidebar__topic-input') && 
                               document.querySelector('.topic-title');
            if (hasElements) {
                console.log('üéØ SIMPLE SYNC: Elements found, setting up sync immediately');
                setupTopicsSync();
            }
        }
    }
    
    // ROOT FIX: Simple sync setup without complexity
    function setupTopicsSync() {
        console.log('üîÑ SIMPLE SYNC: Setting up topics sync...');
        
        // Get all sidebar inputs
        const sidebarInputs = document.querySelectorAll('.topics-sidebar__topic-input');
        
        // Setup sidebar to preview sync
        sidebarInputs.forEach((input, index) => {
            const topicNumber = index + 1;
            
            // Ensure data-property attribute
            if (!input.hasAttribute('data-property')) {
                input.setAttribute('data-property', `topic_${topicNumber}`);
            }
            
            // Add input listener (remove old one first to prevent duplicates)
            const newInput = input.cloneNode(true);
            input.parentNode.replaceChild(newInput, input);
            
            newInput.addEventListener('input', function() {
                const value = this.value;
                updatePreviewTopic(topicNumber, value);
            });
            
            console.log(`‚úÖ SIMPLE SYNC: Setup sidebar input ${topicNumber}`);
        });
        
        // Get all preview elements
        const previewElements = document.querySelectorAll('.topic-title');
        
        // Setup preview to sidebar sync
        previewElements.forEach((element, index) => {
            const topicNumber = index + 1;
            
            // Ensure attributes
            element.setAttribute('contenteditable', 'true');
            element.setAttribute('data-topic-number', topicNumber);
            
            // Add listeners (clone to remove old ones)
            const newElement = element.cloneNode(true);
            element.parentNode.replaceChild(newElement, element);
            
            newElement.addEventListener('blur', function() {
                const value = this.textContent.trim();
                updateSidebarTopic(topicNumber, value);
            });
            
            newElement.addEventListener('input', function() {
                const value = this.textContent.trim();
                // Debounced update
                clearTimeout(this.syncTimeout);
                this.syncTimeout = setTimeout(() => {
                    updateSidebarTopic(topicNumber, value);
                }, 300);
            });
            
            console.log(`‚úÖ SIMPLE SYNC: Setup preview element ${topicNumber}`);
        });
        
        console.log('‚úÖ SIMPLE SYNC: Topics sync setup complete');
    }
    
    // Update preview topic from sidebar
    function updatePreviewTopic(topicNumber, value) {
        const previewElement = document.querySelector(`[data-topic-number="${topicNumber}"]`);
        if (previewElement && previewElement.textContent !== value) {
            previewElement.textContent = value;
            console.log(`üìù SIMPLE SYNC: Updated preview topic ${topicNumber}`);
        }
    }
    
    // Update sidebar topic from preview
    function updateSidebarTopic(topicNumber, value) {
        const sidebarInput = document.querySelector(`[data-property="topic_${topicNumber}"]`);
        if (sidebarInput && sidebarInput.value !== value) {
            sidebarInput.value = value;
            
            // Trigger input event for character counter update
            sidebarInput.dispatchEvent(new Event('input', { bubbles: true }));
            
            console.log(`üìù SIMPLE SYNC: Updated sidebar topic ${topicNumber}`);
        }
    }
    
    // Expose simple API
    window.SimpleTopicsSync = {
        setup: setupTopicsSync,
        updatePreview: updatePreviewTopic,
        updateSidebar: updateSidebarTopic,
        reinitialize: function() {
            console.log('üîÑ SIMPLE SYNC: Reinitializing...');
            setupTopicsSync();
        }
    };
    
    // Initialize
    initializeSimpleSync();
    
    console.log('‚úÖ SIMPLE SYNC: Simple topics sync loaded');
    console.log('üìã Available commands:');
    console.log('  SimpleTopicsSync.setup() - Manually setup sync');
    console.log('  SimpleTopicsSync.reinitialize() - Reinitialize sync');
    
})();