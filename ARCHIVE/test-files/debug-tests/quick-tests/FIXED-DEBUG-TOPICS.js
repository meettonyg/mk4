// FIXED DOM INVESTIGATION - Now looking in the RIGHT place!\nconst debugTopicsFixed = function() {\n    console.group('\ud83d\udd0d FIXED TOPICS DOM INVESTIGATION');\n    \n    // Look for the actual topics container (not the component library item)\n    const topicsContainer = document.querySelector('.topics-container');\n    console.log('Topics container found:', topicsContainer);\n    \n    if (topicsContainer) {\n        console.log('Topics container HTML:');\n        console.log(topicsContainer.outerHTML);\n        \n        // Look for topic title elements\n        const topicTitles = topicsContainer.querySelectorAll('.topic-title');\n        console.log(`\u2705 Found ${topicTitles.length} topic title elements:`);\n        \n        topicTitles.forEach((el, i) => {\n            console.log(`  Topic ${i + 1}:`, el);\n            console.log(`    Text: \"${el.textContent.trim()}\"`);\n            console.log(`    Contenteditable: ${el.hasAttribute('contenteditable')}`);\n            console.log(`    Data attributes:`, {\n                topicNumber: el.getAttribute('data-topic-number'),\n                topicIndex: el.closest('.topic-item')?.getAttribute('data-topic-index')\n            });\n        });\n    } else {\n        console.log('\u274c No topics container found');\n        \n        // Show what we can find\n        const allTopicsElements = document.querySelectorAll('*[class*=\"topic\"], *[data*=\"topic\"]');\n        console.log('All topic-related elements found:', allTopicsElements);\n    }\n    \n    console.groupEnd();\n};\n\nconst setupFixedSync = function() {\n    console.log('\ud83d\udd27 FIXED SETUP: Setting up preview-to-sidebar sync with correct selectors...');\n    \n    const topicsContainer = document.querySelector('.topics-container');\n    if (!topicsContainer) {\n        console.log('\u274c No topics container found');\n        return;\n    }\n    \n    const topicTitles = topicsContainer.querySelectorAll('.topic-title');\n    console.log(`\u2705 Found ${topicTitles.length} topic title elements`);\n    \n    if (topicTitles.length === 0) {\n        console.log('\u274c No topic title elements found');\n        return;\n    }\n    \n    // Setup sync for each element\n    topicTitles.forEach((element, index) => {\n        const topicNumber = index + 1;\n        if (topicNumber > 5) return;\n        \n        console.log(`\ud83d\udd27 Setting up sync for topic ${topicNumber}:`, element);\n        \n        // Ensure it's contenteditable\n        if (!element.hasAttribute('contenteditable')) {\n            element.setAttribute('contenteditable', 'true');\n        }\n        element.setAttribute('data-topic-number', topicNumber);\n        element.setAttribute('data-fixed-sync', 'true');\n        \n        // Remove existing listeners by cloning\n        const newElement = element.cloneNode(true);\n        element.parentNode.replaceChild(newElement, element);\n        \n        // Add sync handlers\n        const syncToSidebar = (eventType) => {\n            const currentValue = newElement.textContent.trim();\n            const lastValue = newElement.getAttribute('data-original-value') || '';\n            \n            // Only sync if value changed\n            if (currentValue !== lastValue) {\n                console.log(`\ud83d\udd04 FIXED SYNC [${eventType}]: Topic ${topicNumber} changed from \"${lastValue}\" to \"${currentValue}\"`);\n                \n                // Store new value\n                newElement.setAttribute('data-original-value', currentValue);\n                \n                // Visual feedback\n                newElement.style.backgroundColor = '#e3f2fd';\n                newElement.style.transition = 'background-color 0.3s ease';\n                setTimeout(() => {\n                    newElement.style.backgroundColor = '';\n                }, 400);\n                \n                // Find sidebar input and update it\n                const sidebarInput = document.querySelector(`#topics-list .topics-sidebar__topic-item:nth-child(${topicNumber}) .topics-sidebar__topic-input`);\n                if (sidebarInput && sidebarInput.value !== currentValue) {\n                    sidebarInput.value = currentValue;\n                    \n                    // Trigger character counter update\n                    if (window.TopicsTemplate && window.TopicsTemplate.updateCounters) {\n                        window.TopicsTemplate.updateCounters();\n                    }\n                    \n                    // Visual feedback on sidebar\n                    sidebarInput.style.borderColor = '#4caf50';\n                    sidebarInput.style.borderWidth = '2px';\n                    setTimeout(() => {\n                        sidebarInput.style.borderColor = '';\n                        sidebarInput.style.borderWidth = '';\n                    }, 1000);\n                    \n                    console.log(`\u2705 Updated sidebar input for topic ${topicNumber}`);\n                } else {\n                    console.log(`\u26a0\ufe0f Could not find sidebar input for topic ${topicNumber}`);\n                }\n            }\n        };\n        \n        // Set initial value for comparison\n        newElement.setAttribute('data-original-value', newElement.textContent.trim());\n        \n        // Add comprehensive event listeners\n        newElement.addEventListener('blur', () => {\n            console.log(`\ud83c\udfaf FIXED SYNC: BLUR EVENT for topic ${topicNumber}`);\n            syncToSidebar('blur');\n        });\n        \n        newElement.addEventListener('focusout', () => {\n            console.log(`\ud83c\udfaf FIXED SYNC: FOCUSOUT EVENT for topic ${topicNumber}`);\n            setTimeout(() => syncToSidebar('focusout'), 10);\n        });\n        \n        newElement.addEventListener('keydown', (e) => {\n            if (e.key === 'Enter') {\n                e.preventDefault();\n                console.log(`\ud83c\udfaf FIXED SYNC: ENTER KEY for topic ${topicNumber}`);\n                newElement.blur();\n            }\n            if (e.key === 'Escape') {\n                newElement.blur();\n                syncToSidebar('escape');\n            }\n        });\n        \n        console.log(`\u2705 Fixed sync setup complete for topic ${topicNumber}`);\n    });\n    \n    console.log('\u2705 FIXED SETUP COMPLETE - Try editing topics in preview now!');\n    console.log('\ud83e\uddea Test: Edit any topic in the preview and click outside - should sync to sidebar!');\n};\n\n// Run diagnostic first\ndebugTopicsFixed();\n\n// Make functions available\nwindow.debugTopicsFixed = debugTopicsFixed;\nwindow.setupFixedSync = setupFixedSync;\n\nconsole.log('\\n\ud83c\udfaf FIXED DEBUG LOADED');\nconsole.log('Commands available:');\nconsole.log('- debugTopicsFixed() : Check the correct topics container');\nconsole.log('- setupFixedSync() : Setup working preview-to-sidebar sync');\nconsole.log('\\n\ud83c\ude84 RUN: setupFixedSync() to fix the sync immediately!');\n