// PHASE 4 RECOVERY: Force-initialize Phase 4 features even after errors
// This script ensures Phase 4 features are available despite the registry conflict

console.log('üöë PHASE 4 RECOVERY: Attempting to restore Phase 4 features...\n');

// Check current state
console.log('üìä Current GMKB state:');
console.log('  - GMKB exists:', !!window.GMKB);
console.log('  - State Manager:', !!window.GMKB?.stateManager);
console.log('  - Inline Editor:', !!window.GMKB?.inlineEditor);
console.log('  - Templates:', !!window.GMKB?.componentTemplates);
console.log('  - Import/Export:', !!window.GMKB?.importExportManager);

// If Phase 4 features are missing, try to initialize them
if (window.GMKB && window.GMKB.stateManager) {
    console.log('\nüîß Attempting to initialize missing Phase 4 features...');
    
    // Try to load Phase 4 features directly
    (async function() {
        try {
            // Check if modules are available in the bundle
            if (!window.GMKB.inlineEditor) {
                console.log('  Loading Inline Editor...');
                // The modules should be in the bundle, just not initialized
                // Try to create instances if classes are available
                if (window.InlineEditor) {
                    window.GMKB.inlineEditor = new window.InlineEditor(window.GMKB.stateManager);
                    console.log('  ‚úÖ Inline Editor initialized');
                } else {
                    console.log('  ‚ö†Ô∏è InlineEditor class not found in bundle');
                }
            }
            
            if (!window.GMKB.componentTemplates) {
                console.log('  Loading Component Templates...');
                if (window.ComponentTemplates) {
                    window.GMKB.componentTemplates = new window.ComponentTemplates();
                    window.GMKB.componentTemplates.loadCustomTemplates();
                    console.log('  ‚úÖ Component Templates initialized');
                } else {
                    console.log('  ‚ö†Ô∏è ComponentTemplates class not found in bundle');
                }
            }
            
            if (!window.GMKB.importExportManager) {
                console.log('  Loading Import/Export Manager...');
                if (window.ImportExportManager) {
                    window.GMKB.importExportManager = new window.ImportExportManager(window.GMKB.stateManager, '3.0.0');
                    console.log('  ‚úÖ Import/Export Manager initialized');
                } else {
                    console.log('  ‚ö†Ô∏è ImportExportManager class not found in bundle');
                }
            }
            
            // Create helper functions
            window.phase4 = {
                // Test inline editing
                testInlineEdit: function(componentId, field = 'title') {
                    if (!window.GMKB.inlineEditor) {
                        console.log('Inline Editor not available');
                        return;
                    }
                    const component = document.querySelector(`[data-component-id="${componentId}"]`);
                    if (!component) {
                        console.log('Component not found');
                        return;
                    }
                    
                    const editable = component.querySelector(`[data-editable="${field}"]`);
                    if (!editable) {
                        console.log(`No editable field "${field}" found`);
                        return;
                    }
                    
                    const event = new MouseEvent('dblclick', { bubbles: true });
                    editable.dispatchEvent(event);
                    
                    console.log(`‚úÖ Started editing ${field} in component ${componentId}`);
                },
                
                // List templates
                listTemplates: function(category = null) {
                    const templates = window.GMKB?.componentTemplates;
                    if (!templates) {
                        console.log('Templates not available');
                        return;
                    }
                    
                    if (category) {
                        const categoryTemplates = templates.getTemplatesByCategory(category);
                        console.log(`Templates in category "${category}":`);
                        categoryTemplates.forEach(t => {
                            console.log(`  ${t.id}: ${t.name}`);
                        });
                    } else {
                        console.log('All templates:');
                        Object.values(templates.templates).forEach(t => {
                            console.log(`  ${t.id}: ${t.name} (${t.category})`);
                        });
                    }
                },
                
                // Apply template
                applyTemplate: function(templateId) {
                    const templates = window.GMKB?.componentTemplates;
                    if (!templates) {
                        console.log('Templates not available');
                        return;
                    }
                    
                    const result = templates.applyTemplate(templateId, window.GMKB.stateManager);
                    if (result) {
                        console.log(`‚úÖ Applied template: ${templateId}`);
                        console.log('Component(s) added:', result);
                    }
                },
                
                // Export kit
                exportKit: async function(format = 'json') {
                    const manager = window.GMKB?.importExportManager;
                    if (!manager) {
                        console.log('Import/Export not available');
                        return;
                    }
                    
                    await manager.exportMediaKit(format);
                    console.log(`‚úÖ Exported media kit as ${format}`);
                },
                
                // Show import UI
                showImportUI: function() {
                    const manager = window.GMKB?.importExportManager;
                    if (!manager) {
                        console.log('Import/Export not available');
                        return;
                    }
                    
                    manager.createImportUI();
                    console.log('‚úÖ Import UI opened');
                }
            };
            
            console.log('\n‚úÖ Phase 4 helper functions created at window.phase4');
            
        } catch (error) {
            console.error('Error during Phase 4 recovery:', error);
        }
        
        // Final status check
        console.log('\nüìä Final Phase 4 Status:');
        console.log('  - Inline Editor:', !!window.GMKB?.inlineEditor);
        console.log('  - Templates:', !!window.GMKB?.componentTemplates);
        console.log('  - Import/Export:', !!window.GMKB?.importExportManager);
        
        if (window.GMKB?.inlineEditor || window.GMKB?.componentTemplates || window.GMKB?.importExportManager) {
            console.log('\nüéâ Phase 4 features are now available!');
            console.log('\nüí° Try these commands:');
            console.log('  phase4.listTemplates() - Show all templates');
            console.log('  phase4.applyTemplate("hero-minimal") - Apply a template');
            console.log('  phase4.exportKit() - Export your media kit');
            console.log('  Double-click any text to edit inline');
        } else {
            console.log('\n‚ö†Ô∏è Phase 4 features could not be loaded from bundle');
            console.log('The bundle may need to be rebuilt with:');
            console.log('  cd C:\\Users\\seoge\\OneDrive\\Desktop\\CODE-Guestify\\MEDIAKIT\\PLUGIN\\mk4');
            console.log('  npm run build');
        }
    })();
} else {
    console.log('\n‚ùå Cannot initialize Phase 4: Core GMKB system not ready');
    console.log('Please refresh the page after fixing the registry conflict');
}
