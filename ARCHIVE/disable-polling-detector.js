/**\n * @file disable-polling-detector.js\n * @description ROOT FIX: Polling Detector Killer\n * \n * This script completely disables and neutralizes the comprehensive\n * polling detector that was blocking legitimate setTimeout calls.\n */\n\n(function() {\n    'use strict';\n    \n    console.log('üö´ ROOT FIX: Polling Detector Killer Active');\n    \n    // PHASE 1: Restore original setTimeout and setInterval\n    if (window.pollingDetector) {\n        console.log('üîß Found active polling detector - neutralizing...');\n        \n        // Restore original functions\n        if (window.pollingDetector.originalSetTimeout) {\n            window.setTimeout = window.pollingDetector.originalSetTimeout;\n            console.log('‚úÖ setTimeout restored');\n        }\n        \n        if (window.pollingDetector.originalSetInterval) {\n            window.setInterval = window.pollingDetector.originalSetInterval;\n            console.log('‚úÖ setInterval restored');\n        }\n        \n        if (window.pollingDetector.originalClearTimeout) {\n            window.clearTimeout = window.pollingDetector.originalClearTimeout;\n            console.log('‚úÖ clearTimeout restored');\n        }\n        \n        if (window.pollingDetector.originalClearInterval) {\n            window.clearInterval = window.pollingDetector.originalClearInterval;\n            console.log('‚úÖ clearInterval restored');\n        }\n        \n        // Disable the detector\n        window.pollingDetector.isActive = false;\n        window.pollingDetector = null;\n        \n        console.log('üéâ Polling detector neutralized!');\n    }\n    \n    // PHASE 2: Prevent any future polling detector activation\n    Object.defineProperty(window, 'pollingDetector', {\n        value: null,\n        writable: false,\n        configurable: false\n    });\n    \n    // PHASE 3: Remove polling detector functions\n    const pollingFunctions = [\n        'detectPolling',\n        'eliminatePolling', \n        'pollingStatus'\n    ];\n    \n    pollingFunctions.forEach(func => {\n        if (window[func]) {\n            delete window[func];\n            console.log(`üö´ Removed polling function: ${func}`);\n        }\n    });\n    \n    // PHASE 4: Ensure clean setTimeout/setInterval environment\n    const originalSetTimeout = window.setTimeout;\n    const originalSetInterval = window.setInterval;\n    \n    // Verify functions are clean (not overridden)\n    const setTimeoutStr = window.setTimeout.toString();\n    const setIntervalStr = window.setInterval.toString();\n    \n    if (setTimeoutStr.includes('polling') || setTimeoutStr.includes('BLOCKED')) {\n        console.error('‚ùå setTimeout still overridden - attempting manual restore');\n        \n        // Manual restoration\n        window.setTimeout = function(callback, delay, ...args) {\n            return originalSetTimeout.call(this, callback, delay, ...args);\n        };\n        \n        console.log('üîß setTimeout manually restored');\n    }\n    \n    if (setIntervalStr.includes('polling') || setIntervalStr.includes('BLOCKED')) {\n        console.error('‚ùå setInterval still overridden - attempting manual restore');\n        \n        // Manual restoration\n        window.setInterval = function(callback, delay, ...args) {\n            return originalSetInterval.call(this, callback, delay, ...args);\n        };\n        \n        console.log('üîß setInterval manually restored');\n    }\n    \n    // PHASE 5: Validation\n    console.log('üìä Final validation:');\n    console.log('  setTimeout clean:', !window.setTimeout.toString().includes('polling'));\n    console.log('  setInterval clean:', !window.setInterval.toString().includes('polling'));\n    console.log('  pollingDetector removed:', window.pollingDetector === null);\n    \n    // Test setTimeout works\n    try {\n        const testId = window.setTimeout(() => {\n            console.log('‚úÖ setTimeout test successful - no blocking');\n        }, 1);\n        \n        console.log('‚úÖ setTimeout test scheduled, ID:', testId);\n    } catch (error) {\n        console.error('‚ùå setTimeout test failed:', error);\n    }\n    \n    // PHASE 6: Expose validation function\n    window.validatePollingDetectorKilled = function() {\n        const validation = {\n            pollingDetectorExists: !!window.pollingDetector,\n            setTimeoutClean: !window.setTimeout.toString().includes('polling'),\n            setIntervalClean: !window.setInterval.toString().includes('polling'),\n            pollingFunctionsRemoved: !window.detectPolling && !window.eliminatePolling,\n            timestamp: Date.now()\n        };\n        \n        console.log('üîç Polling Detector Kill Validation:', validation);\n        \n        const allClean = !validation.pollingDetectorExists && \n                        validation.setTimeoutClean && \n                        validation.setIntervalClean && \n                        validation.pollingFunctionsRemoved;\n        \n        if (allClean) {\n            console.log('üéâ SUCCESS: Polling detector completely eliminated!');\n        } else {\n            console.warn('‚ö†Ô∏è Some polling detector remnants may still exist');\n        }\n        \n        return validation;\n    };\n    \n    console.log('üéØ ROOT FIX: Polling Detector Killer Complete');\n    console.log('üìù Run validatePollingDetectorKilled() to verify');\n    \n})();\n